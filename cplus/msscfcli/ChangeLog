commit db9e98763568918ead69f8e3f1dbe2487413763d
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon May 11 14:47:49 2020 -0600

    2020-05-11 MSS Code Factory CFAll 2.13.11185 Licenses on all 2.13 projects updated
    
    The C++ builds will not be shipped with this release.  I won't be rebuilding
    the 2.13 c++2a code until some point in the future, when there are new features
    to test and debug.  I don't remember what state the Java code is in, other
    than clean-compiling, but I need to get a relicensed set of downloads out the door.
    
    An enhanced GNU Lesser General Public License applies to all of the
    2.12 projects and the 2.13 projects CFLib, CFCore, CFDbTst, CFBam,
    CFAcc, CFAst, CFFrSw, and CFUniv:
    
            Copyright (c) 2020 Mark Stephen Sobkow
    
            These files are part of MSS Code Factory.
    
        MSS Code Factory is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.
    
        MSS Code Factory is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.
    
        You should have received a copy of the GNU Lesser General Public License
        along with MSS Code Factory.  If not, see https://www.gnu.org/licenses.
    
            Donations to support MSS Code Factory can be made at
    
                    https://www.paypal.com/paypalme2/MarkSobkow
    
            Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
    
    An Apache V2 license is used for the foundation projects CFSec, CFInt, and CFCrm 2.13.
    
    These three projects can be incorporated in any project produced by MSS Code Factory 2.12
    without limitation or restriction, including the right to take a copy of the code and
    modify it specifically for internal use, such as replacing the security implementation
    wholesale.  It is absolutely critical that this be allowed for these projects, as they
    form the basis on which the vast majority of user applications are based.  CFSec in particular
    is incorporated in ALL applications produced by MSS Code Factory.
    
            Copyright (c) 2020 Mark Stephen Sobkow
    
            These files are part of MSS Code Factory.
    
            Licensed under the Apache License, Version 2.0 (the "License");
            you may not use this file except in compliance with the License.
            You may obtain a copy of the License at
    
                http://www.apache.org/licenses/LICENSE-2.0
    
            Unless required by applicable law or agreed to in writing, software
            distributed under the License is distributed on an "AS IS" BASIS,
            WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            See the License for the specific language governing permissions and
            limitations under the License.
    
            Donations to support MSS Code Factory can be made at
    
                    https://www.paypal.com/paypalme2/MarkSobkow

commit 924613c5f582c48aefbc7ade6262c24ccef8662d
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun May 10 09:55:38 2020 -0600

    2020-05-10 MSS Code Factory MssCF, CFAcc 2.13.11185-202005101000 Resurrect CFAcc as a member of the base project set
    
    CFAcc never went away, of course, but I decided to make it part of the base delivery set,
    as it provides so many good examples of server procs, custom code, GUI customization, and
    so forth from a "general line of business application" perspective.
    
    It will server as an excellent tutorial project for "how to use" MSS Code Factory.
    Plus it is a useful base line project for others to build on.
    
    The sha512sums for this release are:
    
            fd7b41a8f6ec548b88b2250f2a9fb4cda4d945572ce867fe93265f12da27beb87b838a9d5b831cd91791719592946c47be19b5fedb993044520959b538dd2b54  cfacc_2_13_11185-202005101000-Apache_V2-db_scripts.zip
            4eb77685f23cd7931a57a0e672ec0dbf666cf6b303431c72f275a302f8839eb2e20aeb63e0cd195faf7c19bb784f5e052dae729caa5964cefc7f9acd883597f1  cfacc_2_13_11185-202005101000-Apache_V2-src.zip
            083547531b0d211265ba0040ee83d691b0a6f6da8772c7f2c9de45b5e70241c9ce377b1df4523eaf7db17664bae7fc772a1dadc3929ad79b2c5442bbee496cf6  cfacc_2_13_11185-202005101000-java-installer.zip
            af2b6334c39c54854947f9fff22fb202677f898f512bacfdf1c01591ad1bb2f8657673e1e83940f7ff7be7070c42b43cf7a6913ce01719806a3169c373596a3c  msscf_2_13_11185-202005101000-Apache_V2-data.zip
            c4284a8901b62c17dfdc12555c6ab0106a18657d3b4e44a33b33e46007647c2ca07409e61c93f8f965a66336e429c7af0707602e6f42ebe9702ec0a6b71a0cb2  msscf_2_13_11185-202005101000-Apache_V2-src.zip
            3c21848e48110349801fbd9c57998fcda6a8db4442532dd0e17db8920219ba808dae75cc8b703db04e8eed544d33b0d103f76c858c82a2fbf2591fc03b8e9afd  msscf_2_13_11185-202005101000-java-installer.zip

commit d718442084190c55ece5f420efa3f1b7dd0d7b3d
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun May 10 09:41:35 2020 -0600

    Re-enable CFAcc as a base project.

commit 1d8b5668a8f317fd3e5a9bb06aff7087c3245954
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat May 9 22:08:30 2020 -0600

    2020-05-09 MSS Code Factory CFAll 2.13.11185-202005092200 Manufactured by 2.12.11184-202005092115 and built with OpenJDK 11.0.7 and OpenJFX 11.0.2
    
    This code was manufactured by MSS Code Factory 2.12.11184-202005092115.
    
    I decided not to chase the bleeding edge with Java, but rather stick to the
    OpenJDK 11.0.7 that ships with Ubuntu 20.04 LTS as the default.  All of my
    code still builds and runs ok with the older JDK, so there is no need
    to rush to OpenJDK 14.0.1.
    
    You can still find the the OpenJFX 11 installers at the old gluonhq site.
    
    I finally resolved all my issues with the Ubuntu 20.04 LTS installation
    under WSL1 for Windows 10.  It turns out you can't install apt-config-icons
    or any of its relatives, or apt will no longer function properly under WSL1,
    and will report double-free errors.  Once you remove the package, apt functions
    correctly again.  But I had to isolate this one packe from over 1000 of them, so
    it took a few tries and reasonable groupings of package install and retest cycles.
    
    I am not worrying about C++ builds yet and won't for several days.  I'll be working
    on the earlier-phase Java coding efforts instead for this release.
    
    The sha512sums for this release are:
    
            fe8513c5cfe165f6a69ab3f84b9c68151364e89de0942f167c63b16202ab4bc54c3f5e1e25efe3284d2b4cd9be3c01580311dee504b8efdde1e84d7aa223a65c  cfacc_2_13_11185-202005092200-Apache_V2-src.zip
            d7e47ea1adbf7b11695b758f4eecf2a534d7dc5a50d8c64295573ccaa6e6f90152f153427bcae9950f0fa86cb80384368ecccee9211dd057919b0ab6d43f20f3  cfast_2_13_11185-202005092200-Apache_V2-src.zip
            cfec258e3315666976679f9b9c9e4116a37f558f7f0ebf4f398e64398e86f51f19ce187ccd376d33af78d5b9b2785cbcdcf742684e3a1f7bb1e2f4126c822d1d  cfbam_2_13_11185-202005092200-Apache_V2-db_scripts.zip
            0b95fc6f20a1b4e26dc098fb6129b6750f4bf187679fd47cb5d81aaa3c792c087f0a64a0dba4e822950fa2b2f5c57d66152b43fcb774779f5395948ee1038365  cfbam_2_13_11185-202005092200-Apache_V2-src.zip
            28d511777685ca238032c05a2faa4092481580c202688f8974064ab70ef5111e7e51a3e1ed4bf27d1aa76530ab13a0717af966f601b6aada3743a59e1fc1692f  cfbam_2_13_11185-202005092200-java-installer.zip
            26d61a0822ed56c1802bf7f7ebefc8c1375a5d290d472f81ec7da4cb5988732fb9023dcd9eefece04ea5764922f86f243ae8443e0f8c59d63cdc29c5a311fe22  cfcore_2_13_11185-202005092200-Apache_V2-src.zip
            b8a4a2941dec7df70862f946a628fecb5220756ae9f7fca6058e18f7fcf76415dba16a1dd4b861ac9b2bfab4108e5af3f60631731844896c1b11701c6e8c9f82  cfcore_2_13_11185-202005092200-java-installer.zip
            8653a0d4725dd67114b40c958fc2cdde3a3174d4a78926d8fcfe88c2472b31dbc0d75a29e199114de4a9ce6adfa10be17e1e2cac3e9ec9bda1809a749920d88d  cfcrm_2_13_11185-202005092200-Apache_V2-db_scripts.zip
            3f9dd2ba54a5f1c46954751d48013518c22a6a716f40644e58c89d57b58e42bedd1d4cbe24c0ebf65f1fe56150cb0a4505cbfb15c89d081a34b13ca9bc0b7932  cfcrm_2_13_11185-202005092200-Apache_V2-src.zip
            9f01c62faf9954660a45c40246bd2951d13c3085c884bd679e0dcce447a48ed8420d248adb3e8bdc08ec142d64db5b60ea695ff0b8a899bfc74cb0ded8de52de  cfcrm_2_13_11185-202005092200-java-installer.zip
            a9e8536e7b23f5a42102ac31c4b03cef4383ddb6786bee18b77571cab302770c32491ab80bf826608a100726083d51f8b1480523962bdbd739e8345c75be04f5  cfdbtst_2_13_11185-202005092200-Apache_V2-db_scripts.zip
            be8f22ae7058c25daef59a280aac21a5c8cf5d0049786d1e9fc53e30d2de155ecaa11d10a6dc7d4fb1f71eb9c7a43d84a6b54da17021670d2907e4a6939082d9  cfdbtst_2_13_11185-202005092200-Apache_V2-src.zip
            d900b9ad9baede00706acf941b45859d9f4f931ea330b929cffeb5b572930c1970b24410d73c1e5cbf41503ce6a31f083b1b01f441885bfe581022b3272583fc  cfdbtst_2_13_11185-202005092200-java-installer.zip
            86ef65d8c8185235e64e04a960e0b0cafa17c62e1a9da380ed697635891b3b93233d15597112de1abf9b62e3c4cfb1063ceedce1daeb9902a6afd71b48fd62ff  cffrsw_2_13_11185-202005092200-Apache_V2-src.zip
            2360a3b678709a71178d779ccbbe3e9960f82e328b721772f77083d471960e46de16b8446d0633d15a4024d3c41ab4691acb0f982c5243bd164d808a7d047127  cfint_2_13_11185-202005092200-Apache_V2-db_scripts.zip
            9aefe7af0a391c68969c9e7308382597d0f978249a3d78fc7d9c58f3cb19cb75a8dbc1a5f75cbbeef156b7d7086769cd0f1fa5a79140fb355d83c4f8e3eec1a7  cfint_2_13_11185-202005092200-Apache_V2-src.zip
            0f82970879312ce4dc8d33c37eb14c10a008dc51f04222b836a44b859fb1928381b7db0dca764cf4b6fa3d8c43c7aca927203c1e55eeb9877e25295e98b81dbb  cfint_2_13_11185-202005092200-java-installer.zip
            274ad6e7cd55440747f1ece8968126295901f0cfec3bd74aec644e7329435004207e4374ddd6ab46fb1eeff4989a8594a322109ce8535924743ef3cecd42219d  cflib_2_13_11185-202005092200-Apache_V2-src.zip
            05891459121566146160dc5d7b9b6f45450592947b98339f08b6e968cd2a5ab4f0006751be5d18e2811a48fb0f79a94d549dacb0100e9754715b0a358e624f86  cflib_2_13_11185-202005092200-java-installer.zip
            a5eadc40e13bcc6a905b8dc50c405a08bdd9cfc865ea6e960e444c52fd2980cd39a0d0a0fa40743fc6feacc04c37b5b4f3daadb63e71854e608cb92d11014dcf  cfsec_2_13_11185-202005092200-Apache_V2-db_scripts.zip
            01332054b950e9dcf505d446a3a089c0c81aec944dde5f52e2df799822d1fc20fc36148436bde83e7d6db1d905bb62269573f094c220143b566d828892c4e375  cfsec_2_13_11185-202005092200-Apache_V2-src.zip
            d83809541f846108e111e19435ae63bbe2faea22ca9711a776c5eca20ccab8cbfcf60d28e7e5de70cbf6741678c96fae92e36bde23d0fd202c9af25a7e50d921  cfsec_2_13_11185-202005092200-java-installer.zip
            056d32cf5d0d333c43f0e9e3e9183be0e9fd509bff72d232e8e7d8db11f401a491f391e634bb1a6d4c0e01304da88259a98ce23ffa026efc9bf04f6fdf146823  cfuniv_2_13_11185-202005092200-Apache_V2-src.zip
            0605620bbb032d0a3a1c4f2b9b1d5401cd9f6f19c50644f8f15788e240328ce319c46505b0847940b8e5ac0224ad69e9ae308f4758735f19c3c5e3e7de71bfbc  msscf_2_13_11185-202005092200-Apache_V2-data.zip
            62cb03d00fb690b878922743c9160aa1370eafd03b21281d381891786946fc086213686486895916f72aacd548d393ccf4438825d5c9451c18d169dc5c35c658  msscf_2_13_11185-202005092200-Apache_V2-src.zip
            e6d4a970f7347e6b551a06e406fde59b3bfad55667b0201cc5b48d6532fafffeb8bb13da622975e6c551277e32b36a9aceb82fcf6e0bd91d033aa6e8aa4f940c  msscf_2_13_11185-202005092200-java-installer.zip

commit 439eb019237030cb646b8a8805f0cbb27003ae77
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat May 9 21:40:38 2020 -0600

    2020-05-09 MSS Code Factory CFAll 2.13.11185-202005092200 Manufactured by 2.12.11184-202005092115 and built with OpenJDK 11.0.7 and OpenJFX 11.0.2
    
    This code was manufactured by MSS Code Factory 2.12.11184-202005092115.
    
    I decided not to chase the bleeding edge with Java, but rather stick to the
    OpenJDK 11.0.7 that ships with Ubuntu 20.04 LTS as the default.  All of my
    code still builds and runs ok with the older JDK, so there is no need
    to rush to OpenJDK 14.0.1.
    
    You can still find the the OpenJFX 11 installers at the old gluonhq site.
    
    I finally resolved all my issues with the Ubuntu 20.04 LTS installation
    under WSL1 for Windows 10.  It turns out you can't install apt-config-icons
    or any of its relatives, or apt will no longer function properly under WSL1,
    and will report double-free errors.  Once you remove the package, apt functions
    correctly again.  But I had to isolate this one packe from over 1000 of them, so
    it took a few tries and reasonable groupings of package install and retest cycles.
    
    I am not worrying about C++ builds yet and won't for several days.  I'll be working
    on the earlier-phase Java coding efforts instead for this release.

commit 05e599bfa9fdb870864120e2d5502da9303ae27c
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed May 6 19:37:37 2020 -0600

    2020-05-06 MSS Code Factory CFAll 2.13.11185-202005061930 Manufactured by 2.12.11184-202005061910 to enhance 2.13 CFBam model
    
    An optional Value.DefaultXmlValue string attribute of 1023 characters and
    a required Relation.AllowAddendum flag (init/default false) have been added
    to the 2.12, 2.13, and 2.14 CFBam models.  Both attributes are used to control
    the output for the manufactured SAX Loader document parsers produced by
    the 2.12 and 2.13 versions of MSS Code Factory.
    
    As per usual, this is a github-only release.

commit 5e6cc7bc849d1eec5f2067f56bb17846a7c7c3d7
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue May 5 06:44:32 2020 -0600

    2020-05-05 MSS Code Factory CFAll 2.13.11182 The C++ and Java SAX Loader functionality is back in sync
    
    The functionality of the Java and C++ SAX Loaders is back in sync with the new XmlElementName and
    IsLateResolver functionality implemented and tested.
    
    The sha512sums for this release are:
    
            0f012d46e799fdd06da3360e9d81ba48a3e120e9bdb19a45b42f1076f26ef54566efcbe714701f16d4335430d6f0e7b7c32b3a59a1cb6755b239a449fb39a86a  cfacc_2_13_11182-Apache_V2-src.zip
            1a75949209dc86a6eb475018993ebe73905726901855ca1c42e3d607768abaa4a3076071d3257d37a62ca8facd5958980bde53a3087e7d8c4588044f4ffcb465  cfast_2_13_11182-Apache_V2-src.zip
            c2025df1074a996d10414fc0d82c7e7bd082c8e013df9a4d321f736e41d0f4f5f60385c57d2491c9c17699003a2978760974e838ec91a1e64047f955d18165fc  cfbam_2_13_11182-Apache_V2-db_scripts.zip
            c63ca6bb37a74aa773a0ff5a110702c2f8042f1e478f95fb071bee567c3ead7e0d95f27cb1dc3e9b03258bdd7bbbf6d6c7220f99d1eb9c0b03eedeffdeb63b5a  cfbam_2_13_11182-Apache_V2-src.zip
            a249d9b3db7318057580be4418147567ece9f960c509a70d13ff19c7fb7a6f02a02e75643256ee04d074129d0a88501887c1a386d5986d921bf6b44cea92696a  cfbam_2_13_11182-java-installer.zip
            b339c103f18c5c511f1ac9637edee6a03bc775904943b45487decc237b97547ef498834d913f84d5b682284c43008be7ad075d271c14deeae7491a0c7e25b151  cfbam_2_13_11182-wsl-debug-installer.zip
            d22d349bdea7e9aa37c3888a8ca16267bcc0bb1cfaa823574464e9b13e39ed154c6715567c8b9d3bdc42c24963b7956593af0c00e504e6aef204e3256a59060f  cfcore_2_13_11182-Apache_V2-src.zip
            c7a95a61ee05793ce768a63c70923d465412907784e4688c3f2c6f440f9161c78219eb8669f60dc669833dfce8776380362cf89f396f187e3232ddcf1c59c66d  cfcore_2_13_11182-java-installer.zip
            d7117f69a1574cd8ec3f821802971e175d4f4827cd7eeca8340e69367af71d30a728939a61d00412f09279f94c2ce96189f9dc28c8795813a3082e62e974994f  cfcore_2_13_11182-wsl-debug-installer.zip
            5226544ba95a73bc38cbd22d1957e4a2935fadbd7d857243d5b4f4f19d3e4b38a3e1c5ff79281199325b3837a8f1de02d136260c030db1b9553eac2e24ce7637  cfcrm_2_13_11182-Apache_V2-db_scripts.zip
            0fffb7e06bdecc4534167c06893703bc323075f61c3057a07f8fb55bc3f78a3df346566350d3500906d2c62f3b5ac78835b8b017cb50792b4ef29c9f1b7543b6  cfcrm_2_13_11182-Apache_V2-src.zip
            afccc28fb07124263bf36421baae0112dd07785de01b6ba80e94ccf5beff6483beb72d623641609bd3b18ac1f9e783162c29e5f60b454fa2b456f15756eb4b98  cfcrm_2_13_11182-java-installer.zip
            901aa8fa766475ac2c80378845d3d23c0643c2112dd5377c1636dd9ab4e3500347b88118ff2bdf9e9402aafdb34b9bbee27e50df4b414f2d65cd13af85d32304  cfcrm_2_13_11182-wsl-debug-installer.zip
            5c03fe7fb351ed68eff28c4f9205baca613d26962b1dd6b82dee9bee5ba92856823e8317fc900ea858cd43e5ce724a703f3424b74d3495bb8daea09f22c18a85  cfdbtst_2_13_11182-Apache_V2-db_scripts.zip
            4329c58f1ff2a32e613f338609198d0131834ec3754e5cdef333b1691aa7a3f5b0195a6848a0c058bbf1e5fbe132b20bb35e824a2810b070c9ead80de2a468fe  cfdbtst_2_13_11182-Apache_V2-src.zip
            d3c2525da0f97e4aac99efdc3484198fb43a273473b6d0d3d111aad8abf09971bb65886bf4ef5b5415b537b12551827bbb92259f8ed6a84e661a3cc307aea0e5  cfdbtst_2_13_11182-java-installer.zip
            9571ce48aa1180aac0c33f775ff16f97707704c9063c89fd1ac72f335effec77fc042320cbb18d768b24d1f1b64610748224881e230d08455f4aae7324e0a601  cfdbtst_2_13_11182-wsl-debug-installer.zip
            d65a4ba75473b832ffca792ec1c2a431b95a6619aba4c2aa62453f8598de36cb82ff2057979c78a01edba1d05dcb8cf38d2f3aab348e9860cd55575500da41cd  cffrsw_2_13_11182-Apache_V2-src.zip
            7535f1edb0bafe8ed209d24aa57af4ade2075141ae99c66ec2b134e2d66009a2ed33845cb7e6baeb923a6fb4623d85847f94c229f07a6194f9610a7c75478e62  cfint_2_13_11182-Apache_V2-db_scripts.zip
            8177ab6cdc5267256808aca7de185f5668511ccacead86e8b3dbd4d235c5eddb9adfe9e3377db37f840a96aa4da23f02e9b198f2a6a394091f120b13b9672460  cfint_2_13_11182-Apache_V2-src.zip
            3ed77191378bdd1f10a3e3f2fc0d6fd79742347ed22d35c9d6e746ecb1e72f38185a64e972d90c581d513d4f435b1e9e43fcb5e6d7bcb95281d88fc6869a0086  cfint_2_13_11182-java-installer.zip
            48f81414d89863f6ff519ad8105d6b4556290d220b0a19513b9c8462d1ea129a6cf69e0b3b310c56e0565ddedd6cda3513019db57c66d1e23270725f1c84764b  cfint_2_13_11182-wsl-debug-installer.zip
            316d739e2bec407ebc082b4e93eceafeba91b5f07d70887c3ad24b3cec4df1f378019bf48da0456b6648ca3cf39c29c98efb3f925a6d46cffedcbb1aed07aea1  cflib_2_13_11182-Apache_V2-src.zip
            2ea5e7423b899e0de15c23b4146d24c57578945b4c4f761bd95b3b7b36f4fa45175c11cf8e5db2065f226855f0c25ca0785b1c99855ecc3a2f5c98011b3f5d19  cflib_2_13_11182-java-installer.zip
            fbdb406de75e17f86f552b8cd53f9577225ff10cebc5c3650dacb18a6e05d5cb48e8d87ae4a836584f7a32f18cdb73bc3a33010e385903b3dc0434d942867ee3  cflib_2_13_11182-wsl-debug-installer.zip
            a5f11d8c6caf631ee62b059a53f0219b5e500fc82e53fa1b1ec9cb6037ad8ec8dad22f32a5f3a1cbef7f42076307301ee4b0027a691259582a86c7d5c012ba2f  cfsec_2_13_11182-Apache_V2-db_scripts.zip
            e80a7410814131b8f8fa9f20b4708e2f7b896532becd3fae14bf9aa76861a7896aec91186a48042186fb41b60ea4d5d28139518e802623601a5d3f316b9a8649  cfsec_2_13_11182-Apache_V2-src.zip
            fe6617224869dfc6c4c476a02cd52ce58fbe44b8a70ae0057dd9c3066042e6ef23f2cd44572810b56683951beeae3b32bc4a1775c0a3153d0c42acdce1aef12c  cfsec_2_13_11182-java-installer.zip
            e055bdefaa9d026126c1cbfc87a4c90596617c2db370addc3fd246c77c0e2379339e384dff48e8cbec25bc5cee8ced52a92313cfedc9fe00d3170a5c9817291f  cfsec_2_13_11182-wsl-debug-installer.zip
            2fd9f6cdec5c09fc29380d0396c45e0af30b05addb9b206c0852057fd3808c74e8f200da22a61f729715839dc8cd0953fad536704f395e7501ea3ea56ccfe334  cfuniv_2_13_11182-Apache_V2-src.zip
            a3eac4357102e705a09e649b4f1992420c3f321927ac985f57b5973530a8405805254206552117e9f57214d3e5c68d84305bd103be4c5f818ab7fe8374874c5e  msscf_2_13_11182-Apache_V2-data.zip
            d8aeb084d32e98503fd4dad721be1dd10a83abd3392e438896e330215d95cc21696bbfa8feaf8abf104c5a366e57013d1333690fe024298711f5ac2106bdd39d  msscf_2_13_11182-Apache_V2-src.zip
            9a4b54073e5587b817e600c5d079fc8a0e15a49e40fb01a189f9f645a4a42518f4959047a5ea66a184a0e03de40fd4b73739a5bd144a58ca77f0123c364b8d95  msscf_2_13_11182-java-installer.zip
            eb9938e59b600c83703fc114f107222fa2e53cbd241b1fc1d38caa39f04c748eaffd293c2da49a25e302bf032f1108571e43a3008eb906690807e1b5a558c83e  msscf_2_13_11182-wsl-debug-installer.zip

commit 06a9944c7a7e4aadfc97042370ed46c083a189f8
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon May 4 16:42:48 2020 -0600

    2020-05-04 MSS Code Factory CFAll 2.13.11182-202005041645 Remanufactured by 2.12.11181-202005041630 to fix bugs so CFDbTst 2.13's regression tests run
    
    There were some minor changes to the rule base before CFDbTst 2.13's regression
    tests would run successfully, and modifications made to the test data to allow for the
    new IsLateResolver feature, but it is finally THERE.  It RUNS.  It WORKS again.
    
    Now to wait for CFBam 2.13's libcfbamram to finish building so I can link its executable
    and run the new tests for that project to verify that the C++ version of the SAX Loader
    code is back in sync with the Java version.
    
    All of the SAX Loader C++ code for the 2.13 projects has been refreshed.

commit 2624a5023083b60c243122e1135c646a65d5f415
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon May 4 05:52:38 2020 -0600

    2020-05-04 MSS Code Factory CFAll 2.13.11182-202005040550 Remanufactured by 2.12.11181-202005040545 to synchronize behaviour of Java and C++ SAX Loader enhancements
    
    Both Java and C++ implementations of the XmlElementName handlers now allow the element name hander to
    define a text value exactly once for each containing object.  There is no hidden "append" behaviour; the
    text is set once and only once by end-element processing, and if it was previously set, a SAX Exception is
    thrown reporting the problem.

commit 192ee9472127321bc14045f7b1f39c98c19b560c
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon May 4 04:52:45 2020 -0600

    2020-05-03 MSS Code Factory CFAll 2.13.11182-202005030500 C++ SAX Loaders remanufactured by 2.12.11181-202005030440 to apply first round of bug fixes
    
    The first round of bug fixes for the C++ SAX Loader enhancements is incoming.  This code clean-compiles
    and links, but the first round of testing uncovered some code in the startElement() handlers that wasn't
    supposed to be there, as it has moved to the endElement() handlers.
    
    With that fixed, I have high hopes that this version Shall Be The One That Passes C++ CFBam 2.13 Test Case 0001.

commit ded737df006a4f080db08a9442af9b17d6c6a889
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun May 3 18:30:12 2020 -0600

    2020-05-03 MSS Code Factory CFAll 2.13.11182-202005031830 C++ SAX Loaders refreshed by 2.12.11181-202005031820 to wire the document structure
    
    The SAX Loader itself now wires the XmlElementName handlers as sub-elements of the appropriate objects,
    initializes the members to NULL, and auto-destructs the members in the parser's destructor.
    
    None of this code is ready to test just yet; I need to modify the element handlers first so that they don't expect
    attribute specifications of XmlElementName attributes any more.  That doesn't change the interface of the handlers,
    though, just the implementations.  In the grand scheme of the project family, maybe a dozen or two handler implementations
    will actually be affected by this last change.

commit 7041cf689a71c7135cba3aa7cfae2aead6461fe4
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun May 3 11:04:01 2020 -0600

    2020-05-03 MSS Code Factory CFAll 2.13.11182-202005031100 C++ SAX Loaders remanufactured by 2.12.11181-202005031045 to create C++ SAX Loader XmlElementName handlers
    
    The 2.12 knowledge base has been enhanced to create C++ SAX Loader XmlElementName handlers
    for tables which have TextDef columns that specify an XmlElementName attribute.  These
    handlers capture the text between the tags and apply it to the underlying object attribute
    using a normal object update procedure template.  The containing context's object must be
    an instance of the table that contains the attribute to be updated.
    
    This new code has not even been compiled yet, but I'm checking it in so it is feasible to see
    the work as it progresses from outline to complete and tested.

commit 68200c1be0bf280d849e3813ccf7a23c515a09e3
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat May 2 04:53:51 2020 -0600

    2020-05-02 MSS Code Factory CFAll 2.13.11182-202005020450 Manufactured by 2.12.11181-202005020320 to work on syncing the c++2a SAX Loaders with the Java version
    
    The functionality of the c++2a and Java versions of the modfied SAX Loaders will be tested and ready for
    use with this release pair (2.12.11181, 2.13.11182.)
    
    This is the initial snapshot build, which just changes the version numbers.  As I don't expect
    to be changing the 2.12 executable for this release, I'll just be posting data archives with refreshed
    rules and models as I work through the implementation and debugging of the SAX Loaders.  But I won't
    be working in total isolation any more, at least not as far as posting 2.12 development timestamped releases
    goes.
    
    As with all date-stamped 2.13 releases, this is a github-only release.

commit f0be7d141b0ab0ba55a0de78051cba54ae56fb61
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri May 1 08:30:49 2020 -0600

    2020-05-01 MSS Code Factory CFBase 2.13.11180 c++2a builds for WSL Ubuntu 20.04 LTS amd64 complete
    
    The first c++2a build for Ubuntu 20.04 LTS amd64 is complete.
    
    There were a couple of missing libraries in the install script in the
    msscf_2_12/documentation-2.12/home-template/wsl-ubuntu-20_04_env/bin directory.
    I've added the missing libxerces-c-dev, libmpfr-dev and libuuid-dev entries, and
    manually installed them to my WSL environment.
    
    The base 2.13 projects which now accompany the 2.12.11179 release which manufactured the 2.13.11180
    code are CFLib, CFCore, CFSec, CFInt, CFCrm, CFDbTst, CFBam, and MssCF 2.13.
    
    No other 2.13 projects are built on a regular basis, and those other projects
    are never shipped as anything but source archives.
    
    The functionality of the manufactured Java SAX Loader parsers is up to date with my new
    self-imposed requirements in my quest to manufacture the majority of the custom CFBam XML Loader
    code.  Both the LateResolver attribute for relations and the XmlElementName optional attribute
    for text columns of a table class have been implemented in Java, though the XmlElementName code
    has not been exercised yet.
    
    If I recall correctly, the C++ code base does not support the XmlElementName element handlers yet,
    but it does support the IsLateResolver attribute for named lookups, though that support is untested
    at this point.
    
    msscfcli c++2a took 1m22s to manufacture CFCore 2.14.  OpenJDK 14.0.1 took 20 seconds to do the same.
    
    The sha512sums for this release are:
    
            924d6edfdc3c5d0d59f814bdb4faf0571348897c4f69945d4c8cd41c56952e3ec5e69e7a793ea2ecabfac7b7447a7dcf31e30e956600d139dddead95dd72d05f  cfacc_2_13_11180-Apache_V2-src.zip
            f5de30598636874fadc46c5d23b429d796dba799ffd46b86c8634d1c7581a8fddc0b16316d2291b6d8ed96b2a34faf23354f9862f9bd297f3cbf0962ec7ccf23  cfast_2_13_11180-Apache_V2-src.zip
            d32886e076f283f7879cea38f452ab0f5493149389b884bce1bff440c28ff13f22d208faba76cc1658b5199ffa98647aa58c4dfc419793159d98f3b13ef886a9  cfbam_2_13_11180-Apache_V2-db_scripts.zip
            990f113813f142c54066f4ce03954b55499ee35c772f56dc4f2faf0af43a89eff73f194167b3701f50fd3a3eaee947bc9435b37e682e9598cb3d83b6b14ffde0  cfbam_2_13_11180-Apache_V2-src.zip
            488fcd77057777b373b998389963859803c24ef74c9370f3fbe4f8da707903ef06dcab7c155e5ebcc6d7d7e3d78a3a08d31d8cdc0d2947346e61c8d349be441a  cfbam_2_13_11180-java-installer.zip
            e99e38aefa8fb33d783885d24bd195cf5c7fba55054ad90288bcf7fd11df1c0349cb21f960bb91034b519898fa694a22efa55c0faead19506704d77a51189bfc  cfbam_2_13_11180-wsl-debug-installer.zip
            c15c01aeee664083093b6421b2f4d2b386a9554d05a911e6f1437ce54c93880bfaeb615c0057c83a31861ae0683b7da3b97e85e48e22cb93748bb4bf20665b8d  cfcore_2_13_11180-Apache_V2-src.zip
            199dbcaaacc28495f8c51ef6412624f9be0ba7d210f5e7eea6af8428702cddb500ee915fcfce5bf899a7e57350b928444bdbb45bb9a1ad0b19aec99ea50bd6f8  cfcore_2_13_11180-java-installer.zip
            0f3ef53361922fcbb2313a4d2153e922ebb79c5af823a2cf7a0b97f417a942096fd9e02e714b808c141144f5b59cc16b19d8c8b41c0ed6f007ff5c10ae318841  cfcore_2_13_11180-wsl-debug-installer.zip
            656e6f47bda8290b770f1d566530fce03215273f31645ea44a1c71f361993da5e8daabb73b8edb8c8ea0b3b30313833c58d17d6862e0251b80b2ba102da60adc  cfcrm_2_13_11180-Apache_V2-db_scripts.zip
            558990a9652fe1d0dbcb86efa69c14d36be2cc30ffad32a85ed4fe7f3495387eaf8a1f2ce81b79643337a7f7166d503aeff0aab2e7dd81f1214ec4823aa75dcf  cfcrm_2_13_11180-Apache_V2-src.zip
            6f0358abbff1dcdb22505952fedb16682707a1fc2ea850043ec7aab50e3a85065f8bfb29ea56e62ad093cbade190ecb28bc84e27fb33688703ab25f1ff15d60f  cfcrm_2_13_11180-java-installer.zip
            d94d4b2f9eae14b06f846e32e39fa3f5dfa60e2b2daee856ba45aa492e18c31829a404c8345ac75e35925a8cf990b9bf38b6966a94f9e326c5cd626dae49ded8  cfcrm_2_13_11180-wsl-debug-installer.zip
            9935c618b7b5cf1aa008b635509733260bb7223fef63dbb21e271857203434a86c0e156c409d3b16b75bc96be31ce1ae79de4262644f41339632dbb745be030d  cfdbtst_2_13_11180-Apache_V2-db_scripts.zip
            4e45e55ff9c64b70658ab9000b857da8a194b65541a15650633a2a9c8f82bae03282ec36b76148609c30ff017ccfb793db19c499c3bf4c4a6f48745def9f87c7  cfdbtst_2_13_11180-Apache_V2-src.zip
            d4ab41eed3375238d7d1457e51cca25b3fae59ac48f8f638b1ceead9fdec15c7aab8f0125d4310652231cc394caf6e3be4a0dbd9c290147e67b86e162276037f  cfdbtst_2_13_11180-java-installer.zip
            48bcb2692cee2a790eeabb2f67c7b301666825a10f18604b4721f173110c708e279698c76deb31d0a616c89d529b170909390315e264a96d368dfa2c67272f66  cfdbtst_2_13_11180-wsl-debug-installer.zip
            1db5161a1fe0d009392fa68751788965748fdbd32715d4dd29fc28094851bf6328b7f413e60c52e465a3adace60ba5d936c2878a9b0b7b8018eefd6cd263e29b  cffrsw_2_13_11180-Apache_V2-src.zip
            4743ab21fb4e3a26cd3622400c114861d2b489fa0904b2af1f30fb57c10e705a8bcd8f96c40a8184019310f50e72f35d0f194cea33aaaf74e89c3043a4d4a923  cfint_2_13_11180-Apache_V2-db_scripts.zip
            235cebf2f8c7b52cab3dff86c5ab0e6ccf1c79fcaa501999036842c4435f1112e8c6c419705cf6c3b7d882eb3bee8a9b6f8fd873113d3495d9887014aedd4a9b  cfint_2_13_11180-Apache_V2-src.zip
            ead62a718689d17fdff987a29b498abb12b038d1392e5cc458c285d8740df59d979cf9499474abee6bb1e2d1e81cd4a08dfd880e99a50e17927e255bc63ca94c  cfint_2_13_11180-java-installer.zip
            759030546794fe996308234ed3c20c4b001359695e05540c1e77deaa8b0f013d4c7307e82f852f42c504bb534d376d6cd5b98482d4c50bbf897fda55aef96d1a  cfint_2_13_11180-wsl-debug-installer.zip
            b6f3490ae494f3a6c55302d53a21cd72a9b393bb5a2bacd81058515b3ad6c9c4760d1c2d6d2fcd230c8df58ff66156a6b47288275893385b44ddddd27e21e995  cflib_2_13_11180-Apache_V2-src.zip
            7fdb734dd17dbb58010664ba7f6859f73b926d8ee0828ed7adb1302aa9cb33729ad6d0f0f47f21bcc540fde7fcbe6cd487fd550c8f0fb1ad80647f4c003ea587  cflib_2_13_11180-java-installer.zip
            889128c01c48684f3281b000afacda5765ed7aa3ae17fcd968546c99139909dbc8fd395d9fa6892c6aca491d54f0dd71674e0c44f41b6c5a1bfca7abd701ff7e  cflib_2_13_11180-wsl-debug-installer.zip
            39e1acce0ebf95d7ef5912b3bfe8d238837f7a64aca2f292f1872e62bb7db071a19e8f133116b071612ae8244d24f8d9064e7f33ddb770678afe3cce5ea5da82  cfsec_2_13_11180-Apache_V2-db_scripts.zip
            2b658ba86f783e3ced56527f85286ca53d8146c2fec9a5033b56d6ffa171a5ae1b7c6f824951b181ba16d70f21f39782150ad37894a5fc2a3034ea7b619a8dec  cfsec_2_13_11180-Apache_V2-src.zip
            0ce7254948fd6251c6f882518be7ed4e4efa4b24a30a899ee36c6c42fc6f38464efebe74d013a6b7e3ce961148306a6226f9d4871a1a0e3465704d0bdca99a5e  cfsec_2_13_11180-java-installer.zip
            4b5f8064db38a47f5492de761bab9d8fd3e5359ab2ae8e87d1a329af7486df8fd136a7734bf5beab3b6f89cfec72f5459da8476a062b4cebdeacb022e92971e5  cfsec_2_13_11180-wsl-debug-installer.zip
            fee57e5f87bee682f09a29c36b17abea9276e33724c3c0267a4bb67ddff64dbbdd3e56fdd98d5a280b84f775056aa40a0e8dc48fc7076d3da6ab97e2b68aac42  cfuniv_2_13_11180-Apache_V2-src.zip
            c8775372f97f9b83ce03bcd1c1a5f985031ae2b4d5188c66d201c4d03b45be611dc4d036ddee29074a053e6743f51ea898108b90a85f78b9925c3fa5deb0e00d  msscf_2_13_11180-Apache_V2-data.zip
            6b17f21961183c63f8926a2c95ad49ceb8ecf8227ee2720bde1e5172889b75e4b485cb698704409b0735147598e80b51bc8cb3ff5b0066962a7790b366736971  msscf_2_13_11180-Apache_V2-src.zip
            b7f17bf0d6d8e1d590fa4641d028a9214b8324e4a1bd289cb5407fde99e335bb69baaad6bd798ea468689d6e78277acd34592ea3253036a0f00e959c10e8aa7b  msscf_2_13_11180-java-installer.zip
            1732ca7e090509a272f02b2c31a36669a1ac89289d0f580ce2fd10347c3c683548d9b602d29aecd8ba8b19b608ce4333900bdd066c57ca50acd7c6a1c92675c0  msscf_2_13_11180-wsl-debug-installer.zip

commit f611f0388ff4788325efc255076186832c5156f0
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri May 1 08:08:47 2020 -0600

    2020-05-01 MSS Code Factory CFBase 2.13.11180 c++2a builds for WSL Ubuntu 20.04 LTS amd64 complete
    
    The first c++2a build for Ubuntu 20.04 LTS amd64 is complete.
    
    There were a couple of missing libraries in the install script in the
    msscf_2_12/documentation-2.12/home-template/wsl-ubuntu-20_04_env/bin directory.
    I've added the missing libxerces-c-dev, libmpfr-dev and libuuid-dev entries, and
    manually installed them to my WSL environment.
    
    The base 2.13 projects which now accompany the 2.12.11179 release which manufactured the 2.13.11180
    code are CFLib, CFCore, CFSec, CFInt, CFCrm, CFDbTst, CFBam, and MssCF 2.13.
    
    No other 2.13 projects are built on a regular basis, and those other projects
    are never shipped as anything but source archives.
    
    The functionality of the manufactured Java SAX Loader parsers is up to date with my new
    self-imposed requirements in my quest to manufacture the majority of the custom CFBam XML Loader
    code.  Both the LateResolver attribute for relations and the XmlElementName optional attribute
    for text columns of a table class have been implemented in Java, though the XmlElementName code
    has not been exercised yet.
    
    If I recall correctly, the C++ code base does not support the XmlElementName element handlers yet,
    but it does support the IsLateResolver attribute for named lookups, though that support is untested
    at this point.
    
    msscfcli c++2a took 1m22s to manufacture CFCore 2.14.  OpenJDK 14.0.1 took 20 seconds to do the same.

commit 09ea635fa89a6d3e3ec50573f4da3a9ada06deaa
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri May 1 01:58:39 2020 -0600

    Resync knowledge base.

commit 79646d44838941ae73eb01770089b5f1e1a3cea7
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Apr 30 10:54:37 2020 -0600

    Refresh change logs.

commit 4b732fc1bacf6acc4a089425a23bf95579799baa
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Apr 30 10:52:23 2020 -0600

    2020-05-01 MSS Code Factory CFBase 2.13.11180 c++2a builds for WSL Ubuntu 20.04 LTS amd64 complete
    
    The first c++2a build for Ubuntu 20.04 LTS amd64 is complete.
    
    There were a couple of missing libraries in the install script in the
    msscf_2_12/documentation-2.12/home-template/wsl-ubuntu-20_04_env/bin directory.
    I've added the missing libxerces-c-dev, libmpfr-dev and libuuid-dev entries, and
    manually installed them to my WSL environment.
    
    Other than that, it was just a matter of waiting for the builds to finish.  Not one single
    line of C++ code or build script had to be modified to accomodate the upgrade to
    Ubuntu 20.04 LTS with GCC/c++ 9 from Ubuntu 18.04 LTS with GCC/c++ 8.
    
    Only the base projects CFLib, CFCore, CFSec, CFInt, CFCrm, CFDbTst, CFBam, and MssCF get
    shipped for 2.13 now.  Building my entire suite of 2.13 projects was too hard on my
    hard drive and took too much time for my wee 4-core box.  All projects other than
    the base projects now exist only as https://github.com/msobkow source repositories (cfast_2_13,
    cffrsw_2_13, cfacc_2_13, cfuniv_2_13, lib*.)
    
    As SourceForge file releases provide their own calculations of download checksums, I will not
    bother publishing the sha512sums in the release notes any longer.
    
    The functionality of the manufactured Java SAX Loader parsers is up to date with my new
    self-imposed requirements in my quest to manufacture the majority of the custom CFBam XML Loader
    code.  Both the LateResolver attribute for relations and the XmlElementName optional attribute
    for text columns of a table class have been implemented in Java, though the XmlElementName code
    has not been exercised yet.
    
    If I recall correctly, the C++ code base supports the XmlElementName element handlers, but does
    not use them yet, so it is out of sync with the .xsd file it produces and cannot be used at all.
    But the hand-crafted CFCore and CFBam XML loaders/parsers aren't affected by that issue, so I'm
    shipping this release even though the manufacture C++ code isn't completely useful right now.

commit 7fb11ece732b72946e0336dc0ee2279cfb3844e5
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Apr 30 10:48:28 2020 -0600

    Remove the *Base*.bash scripts, and focus the *All*213*.bash scripts
    on the base projects.  The source code for the other projects is also
    manufactured and maintained in git, but it is not built on even a semi-regular
    basis, and the builds are never shipped to the sourceforge download
    servers.

commit 2a9deb13178cb6ed7b549779ce60670a9de520c8
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Apr 30 10:35:35 2020 -0600

    I have made the refresh of the ChangeLog part of the UpdateChangeLogs
    script for the 2.13 projects so that it stays stable during release
    script runs.

commit 6d4936e3d9119971a4beb0a3dad894ba7c9a1f35
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Apr 30 09:44:41 2020 -0600

    Update the packaging scripts to stript the C++ libraries,
    and to add a ChangeLog to the Java and C++ install packages.

commit 434bdc0057f5960f9ccc42ac457dd633e2cd932e
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Apr 30 09:06:36 2020 -0600

    Refresh knowledge base from 2.12 in preparation for 2.13 release.

commit a13781a610620c4db9a6820ffe2bc64bb2a30056
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Apr 29 17:01:31 2020 -0600

    2020-04-29 MSS Code Factory CFAll 2.13.11180-202004291700 Remanufactured by 2.12.11179-202004291620 for next round of coding and debugging
    
    This code has been remanufactured by MSS Code Factory 2.12.11179-202004291620, the version
    numbers updated, and is the foundation from which the 2.13.11180 code base shall evolve
    during the next round of coding and debugging.
    
    I expect this release to focus on some possible minor bug-fixes to the C++ code in order
    to accomodate the move from GCC/c++ 8 to GCC/c++ 9, and the OS refresh from WSL Ubuntu
    18.04 LTS amd64 to WSL Ubuntu 20.04 LTS amd64.  Should that prove trivial to address, I
    will be working on reimplementing the new SAX Loader functionality added to the Java
    code base in c++2a.
    
    All date-time stamped releases of 2.13 are github-only.

commit fa78fdfcc3b51b06d3c68f9a58c23bf656168d7a
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Apr 29 14:44:28 2020 -0600

    Handy-dandy new script...

commit 32cf7aae780cd29b25b5645e5dedc94063fff454
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Apr 29 01:17:15 2020 -0600

    2020-04-29 MSS Code Factory CFAll 2.13.11177 The new BAM parser code runs, ship it
    
    Actually, don't ship all of it, but only the core projects cflib_2_13, cfcore_2_13, cfsec_2_13,
    cfint_2_13, cfcrm_2_13, cfdbtst_2_13, cfbam_2_13, and msscf_2_13.  The other 2.13 projects
    now only exist as GitHub source projects as far as the public is concerned.  Build accordingly.
    
    This code was manufactured by 2.12.11176 to fix the Java SAX Loaders for the new late resolvers,
    and to celebrate the complete restoration and upgrading of my development system.
    
    Ubuntu chose to release an LTS before I could get into doing any work with my restored system,
    so I upgraded to WSL Ubuntu 20.04 LTS and refreshed all my Linux tools.  I can't install the
    Microsoft SQL Server ODBC 17 drivers until they support the latest LTS distribution of
    Ubuntu GNU/Linux.
    
    OpenJDK is now 14.0.1, with OpenJFX 14 providing GUI support.  GCC/c++ is now release 9 instead of 8,
    and I'm about to do set of refreshed builds of all my projects, as the empty project trees have been
    cloned from GitHub and await my efforts.
    
    This release fixes the show-stopping null instance reference exception that Java was throwing with
    the previous build, and late references now seem to be getting resolved properly.
    
    I'll worry about testing the XmlElementName text element handlers later; they're very simple, though,
    so as long as they clean compile I expect they'll run ok.  I won't be testing them at this time.
    
    The *CFBase* scripts for the 2.13 projects in msscf_2_13/java/bin are used to package the subset
    of 2.13 projects that I actually ship.
    
    The sha512sums for the base 2.13 projects as shipped are:
    
            f76dc85e3d27a7ad43ed02efd6c7b61a228201c6a9aa7ad4ce744ddf74b3414b46ec36bece3c5c69612433ded03c10a8e6afd3f1cf2ad91f0806a7c14ff79e7a  cfbam_2_13_11177-Apache_V2-db_scripts.zip
            93f84c755af0fa6d9c431161e0429e5c3452acbd524fa9b5f64eb30f2eb496b15286f02f550748b4d1de97dce70f0d2a945c77b8d8e51f58db030c201b0b0eb2  cfbam_2_13_11177-Apache_V2-src.zip
            d3b5bc84fac07d5d0d99726d940bfee1634f5ff18688c52d20bb9b7b728a2c0252cf4de287e70659ef24cfc62472c74efeafd71f5ecb7335f34c6adee2ce166e  cfbam_2_13_11177-java-installer.zip
            c52f6d16e44048fd6a2b18bd7211dc1f7c895dac1d88a4154e4f6e9464387fd6a9144da94129645db836a9a362173c3f123e40ccacbe6eadd482432690dc7fa8  cfcore_2_13_11177-Apache_V2-src.zip
            7744c2c2549e5ec3f1f1aafd87c6f227c32eee5bc59c0a81b4790e648b1a8a9e9d09723657046f1b6d73663aecf4e68d67cab51af3b2d6b916e1207c39c9a79c  cfcore_2_13_11177-java-installer.zip
            5f7d485152e4acfb46c362d1e29976054b8bf1ec45e042e516855ee26dc30bb1c0d9f3756be3b133710ccc665b7940e6ecfc9b9344b22f38a24dda7c04d395ce  cfcrm_2_13_11177-Apache_V2-db_scripts.zip
            95fc5031616a6c8781ab43fd77e38f634e6bf9a56afd0fcb2e9af3f0f390e1e2cb3f6a14ebefad36ced7f2b8e5a7d9ef3194937d3c9990569ea6039c457489fe  cfcrm_2_13_11177-Apache_V2-src.zip
            73d707afba2e837117b56e3aba46cad4b7a2199688b1d6df13fdc580ad8d752a7f0754b2625543aab4d538ff55e334c1213e7a1c25515f80e84bdd825aed7913  cfcrm_2_13_11177-java-installer.zip
            1269f8f4dd3c44741dbe3c496f27255908e5070d4d7e153fe92cc6866728145204dc39d1e827cc000fc494b56e7e23aaf723e1868fc4f962ac7d8e932dfb88fc  cfdbtst_2_13_11177-Apache_V2-db_scripts.zip
            306de0cbb5338e5690ebf925fa3c7b0f22d8bfa76b8590166d987111281d9dcab8dc6088f7e16d4c0e5acbe9aae0ea687eb089688285ce77e9bca66fa51cf987  cfdbtst_2_13_11177-Apache_V2-src.zip
            e8393d50506d48a158d6e54e714a87092bf8e6b94a99262d8ceb6e9f13e54aaf0144c04775842e6d7a7569ce4245196c5ecf23858ebae0e83b93fcf3ee08832e  cfdbtst_2_13_11177-java-installer.zip
            59d41da4f3357ccc1ff0120e74a6c574e9836c7dc8be59a65f117dc5b413c9c9630eede082bc6d4f24e3f2ea8fa103ddfe79db4c2800f6619ff1e3636797cba2  cfint_2_13_11177-Apache_V2-db_scripts.zip
            463a576b900daa558975c6c9760a21bb1882e7787b981d286332ac21ea27c2d2132b1c5883b7dbe713790890c36c55375e2c3fefc632fdbe9d38e889f30d378c  cfint_2_13_11177-Apache_V2-src.zip
            b1146e232fa947a85931202b206fba301176a06bbc2a4b54b45e39bb4200943578f95ebcc4161853a01b3d7f126bbe51e4c83cda686fc69c9b45ccab3e61fc01  cfint_2_13_11177-java-installer.zip
            a749827a98eed2f631a2ccbe28bbab07c82815ab2cb64df4cc50395e33f7bdaac5d7fd7ea7f81d14a16caaf8894559e78ce0c57a14bce987b5c52b085947f132  cflib_2_13_11177-Apache_V2-src.zip
            278100196ba8af004d47409e89bd17426cef2512f2c78c4f7cef060277fc32fa20746cc09c6c3cc3969049d1a6b6147efb53de90136e3a3ebebaccf15aae487b  cflib_2_13_11177-java-installer.zip
            d7af3fd00ee88b5f6877e192db25f76648ebfd7acf396d9c221ef1b78fe25d23326a24731b13d6480a2b6ac4dffe2e4643f253077d8b368c12bc2fc4bae4d37a  cfsec_2_13_11177-Apache_V2-db_scripts.zip
            03a7119fca4ac2f5b823f6d8aafce36b24209d52a923c277d0da940d0b70346f394dd0387c8ded55c50f7de1a9937fd6d3c0b0349c0c4540e3eb0b7c189a4b02  cfsec_2_13_11177-Apache_V2-src.zip
            72d26b7cc0585773299ea3e5f4291884e31e0be90b49807f7296b7e06aa6f930bff395955399c2a7f617fd8ce4f18f0f039d328e93298448f79e324c43f8281b  cfsec_2_13_11177-java-installer.zip
            86fbd011c7ab088c9db914dd4d2bb19f2aea45c9248341239ff6331fb55c3e166595a06cd85c990b0998a5b81b6a7ee90857ad56e584e507920b963a0e18cbc8  msscf_2_13_11177-Apache_V2-data.zip
            3139da76579a424de29735e113bd11dd35f7116dc6890bf74cbb07b1f6b79ef9d4e4289d662a0c473c51302c177ecfd07d1b3c34a779fa6548492f1dced360d6  msscf_2_13_11177-Apache_V2-src.zip
            d8bf9eea32b33ecb4a7123c9b5238b8bc73283de19c117754ed349e0255bc23beb6b68cc0ebcd6350a7c2f3b081bea5d9c7764a9a2189fcbfd1b62448bb9613a  msscf_2_13_11177-java-installer.zip

commit 64cafa27aa08d8d4db421a433e89100a8425d49c
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Apr 20 14:12:00 2020 -0600

    2020-04-20 MSS Code Factory CFAll 2.13.11176-202004201415 Manufactured by 2.12.11175-202004201400 C++ and Java SAX Loaders were remanufactured to define XSD XmlElementName elements
    
    The java+saxloader and cplus+saxloader modules were remanufactured to define XmlElementName elements instead of
    data attributes for the XSDs in the C++ and Java SAX Loader code.  At this point, the C++ code won't properly
    support this specification change.
    
    I've just broken the C++ implementation - intentionally.  I need to bring my Java functionality
    in sync before I get back the C++ coding.  Besides, I don't have the disk I/Os available to do
    test builds of C++ code right now; I'm still recovering from a hardware failure, and probably will
    be doing so until the weekend at earliest.

commit c3b92681dc774cda18bf412b3c05cd3b41c8ea3f
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Apr 18 22:25:17 2020 -0600

    2020-04-18 MSS Code Factory CFAll 2.13.11176-202004182222 Manufactured by 2.12.11175-202004181845 and ready to resume work
    
    All of the 2.13 projects have been remanufactured by 2.12.11175-202004181845 and the Java 13/14 code
    clean-compiled.  I have not bothered to compile the C++ projects other than CFLib 2.13 yet, as building
    that base was sufficient to "prove in" the C++ build environment.  I'm not working on C++ code right now,
    so there is no point building it yet.
    
    The build environment now consists of Windows 10 Home WSL Ubuntu 18.04 LTS installed on 2020-04-17 from
    the Microsoft and Ubuntu servers, and prepared by my updated scripts and template configuration
    files in the msscf_2_12/documentation-2.12/home-template/wsl-ubuntu-18_04_env directory tree.
    JDK 14.0.1 is used instead of 13.0.1, with an accompanying upgrade to OpenJFX 14.  GCC/c++ 8 are
    used as I have been using them for some time; I just made sure they were installed and configured
    by my build environment setup scripts and templates.
    
    cflib_2_13 c++2a has been built to verify the C++ build environment has been properly restored.
    
    All of the 2.13 Java 13/14 code projects have been built to verify the build environment and scripts.
    I've also been working on the remaining pieces needed to attempt a test build of CFUniv 2.13 Java, too.
    I'm curious to see if the JDK has eliminated its old compiler limits or not.

commit da9aeb34cf91a0cb950f292bc8e011b010e71652
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Apr 11 23:06:34 2020 -0600

    2020-04-11 MSS Code Factory CFAll 2.13.11175-202004112310 Remanufactured by 2.12.11174-202004112255 to modify the Java 13 SchemaSaxLoader to wire new element handlers
    
    The SchemaSaxLoader implementation rules have been modified to wire the new SchemaSaxLoaderTableXmlElementName element handlers
    to their containing SchemaSaxLoaderTable element handlers.
    
    This is a github-only release.

commit 71682bf367a3f2aa957c0ded71f4bf99a2dc2a25
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Apr 10 19:13:02 2020 -0600

    2020-04-10 MSS Code Factory CFAll 2.13.11175-202004101915 Manufactured by 2.12.11174-202004101900 to modify Java 13 SchemaSaxLoaderTable element handler
    
    The SchemaSaxLoaderTable no longer supports parsing of the XmlElementName attributes as attributes
    of the element.  Instead you are expected to use the new sub-element handlers to specify the text
    for those attributes.
    
    The code changes do clean compile.
    
    This is a github-only release.

commit c50cef27697b9f4527e3a775ace768f294598373
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Apr 10 12:41:08 2020 -0600

    2020-04-10 MSS Code Factory CFAll 2.13.11175-202004101130 Manufactured by 2.12.11174-2020041010442 to add Java 13 SchemaSaxLoaderTableAttr element handlers
    
    The new element handlers created by this development release all clean compile, though
    none have had their runtimes tested yet.
    
    XmlElementName is an optional camel-case string providing the unique-within-schema
    XML element name used to specify the value of a Text attribute or of a TableCol that
    is defined by a TextType.
    
    The element name is used to produce a SAX element handler named SchemaSaxLoaderTableAttr
    that assumes the containing element is parsing an instance of the object.  It collects
    the body text between the begin and end element tags, and then the endElement() callback
    applies the body text to the attribute of the containing element's object, similar to the way
    that I do in the various code customization elements in CFBamCustXmlLoader, except that
    I decided the manufactured code should keep building on subsequent specifications of a given
    text element rather than only allowing a single specification of a value.
    
    This is a github-only release.

commit 490b6e14ca3c8b261aade143597bd9a409e2c942
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Apr 10 06:21:50 2020 -0600

    2020-04-10 MSS Code Factory CFAll 2.13.11175-202004100630 Manufactured by 2.12.11174-202004100050 to support C++2a version of IsLateResolver processing
    
    This code incorporates support for the IsLateResolver attribute used by the CFBam and CFDbTst
    2.13 models.  All of the cplus+saxloader code has been remanufactured, but only those two
    projects and CFUniv should actually be affected.
    
    My development drive is showing symptoms of wearing out and potentially dying any day now.
    I'm working on a replacement drive, and will get that taken care of as soon as I can.
    But in the meantime, the I/O load of c++2a builds is more than I want to stress the
    drive with.  After it has been replaced, I'll do a proper build and release.  But until
    then, c++2a for the 2.13 projects will be shipped as "as-is" uncompiled and untested
    code that might well not even compile clean.
    
    This is a github-only release.

commit 44bdaafa9562f62b1997850b7f6becb5b8d6bbd7
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Apr 4 22:39:55 2020 -0600

    2020-04-04 MSS Code Factory CFAll 2.13.11175-202004042230 Manufactured by 2.12.11174-202004042200 to implement Java 13 version of IsLateResolver support
    
    The Java 13 version of the IsLateResolver processing is clean-compiled and ready for
    testing for the test projects CFLib, CFCore, CFSec, CFInt, CFDbTst, CFBam, and MssCF..
    
    I did not build the other 2.13 Java projects, as I am trying to minimize the stress on
    my ailing primary drive by only building the pieces of code I need for testing.
    
    I will be porting the Java changes to the cplus+saxloader rules instead of doing
    any testing at this time.  I need clean compiles of both versions before I can modify the
    test data, then I'll need to verify that both versions can process the modified test data
    before I can sign off this first task, implement IsLateResolver support.
    
    This is a github-only release.

commit 9c6732b73d560d9c9491c4f54114a9ec7689c549
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Apr 4 22:37:03 2020 -0600

    2020-04-04 MSS Code Factory CFAll 2.13.11175-202004042230 Manufactured by 2.12.11174-202004042200 to implement Java 13 version of IsLateResolver support
    
    The Java 13 version of the IsLateResolver processing is clean-compiled and ready for
    testing for the test projects CFLib, CFCore, CFSec, CFInt, CFDbTst, CFBam, and MssCF..
    
    I did not build the other 2.13 Java projects, as I am trying to minimize the stress on
    my ailing primary drive by only building the pieces of code I need for testing.
    
    I will be porting the Java changes to the cplus+saxloader rules instead of doing
    any testing at this time.  I need clean compiles of both versions before I can modify the
    test data, then I'll need to verify that both versions can process the modified test data
    before I can sign off this first task, implement IsLateResolver support.
    
    This is a github-only release.

commit 7cca8a0c0045a1daadc39554a5394405fac45650
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Apr 3 14:45:21 2020 -0600

    2020-04-03 MSS Code Factory CFAll 2.13.11175-202004031500 Manufactured by 2.12.11174-202004031415 to prepare for the next release, which will enhance XxxSaxLoader modules and libxxxsaxloader libraries
    
    This next release pair of 2.12.11174 and 2.13.11175 will enhance the XxxSaxLoader
    Java 13 modules and the libxxxsaxloader c++2a libraries.  Any project which uses
    the new modelling attributes IsLateResolver or XmlElementName will have manufactured
    SAX loaders that are no longer backwards-compatible with the past 5-10 years of
    manufactured XSD specifications.
    
    I won't be doing full c++2a builds for 2.13.11175 in order to minimize the
    stress on my ailing hard drive.  Just libcflib, libcfsec, libfsecsaxloader, libcfint,
    libcfintsaxloader, libcfdbtst, libcfdbtstsaxloader, libcfbam, and libcfbamsaxloader
    will be built.
    
    I'll be working on the Java modifications first, as it has historical significance
    and will be needed on the client side some day when I'm ready to pass entire
    XML documents around as messages instead of just object-record instances.  In
    particular, large complex documents like BAM specifications in their entirety.
    
    The CFBam model attribute Relation.IsLateResolver that has been added is a required value that
    is initialized to false, and is only of importance for Lookup relationships.  If a Lookup is a
    late resolver, resolution of the XML dot-path name associated with the lookup is resolved after
    the child elements of a given element have been parsed (i.e. when the endElement() callback
    fires for the parsed object), allowing the object to resolve a component for the lookup.
    
    Late resolvers must always be optional singleton lookups relying on nullable attributes
    so that the initial creation of the object will succeed with null lookup attributes.
    
    The IsLateResolver attribute will be used to enhance the manufactured SAX parsers so
    that they can produce code that supports a this key feature of CFBamCustXmlLoader's code.
    I eventually want to manufacture the entire CFBamCustXmlLoader if at all possible as a
    generic SAXLoader document.
    
    TextDef.XmlElementName is an optional camel-case string providing the unique-within-schema
    XML element name used to specify the value of a Text attribute.  A corresponding
    TableColDef.XmlElementName will return the optional element name of the TableCol,
    not of the underlying AtomType specification.
    
    The element name is used to produce a SAX element handler with the appropriate name
    that assumes the containing element is parsing an instance of the object.  It collects
    the body text between the begin and end element tags, and then the endElement() callback
    applies the body text to the attribute of the containing element's object, the same way
    that I do with the various code customization elements in CFBamCustXmlLoader.
    
    Text attributes that define an XmlElementName are not listed as object/element
    attributes in the main object being parsed.  You have to specify sub-element text
    if you define an XmlElement handler for the whitespace-preserved body of the text.
    
    This is a github-only release.

commit 49ba2ff53eca5a824a49f7546537ef848e0bba96
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Apr 3 14:41:57 2020 -0600

    2020-04-03 MSS Code Factory CFAll 2.13.11175-202004031500 Manufactured by 2.12.11174-202004031415 to prepare for the next release, which will enhance XxxSaxLoader modules and libxxxsaxloader libraries
    
    This next release pair of 2.12.11174 and 2.13.11175 will enhance the XxxSaxLoader
    Java 13 modules and the libxxxsaxloader c++2a libraries.  Any project which uses
    the new modelling attributes IsLateResolver or XmlElementName will have manufactured
    SAX loaders that are no longer backwards-compatible with the past 5-10 years of
    manufactured XSD specifications.
    
    I won't be doing full c++2a builds for 2.13.11175 in order to minimize the
    stress on my ailing hard drive.  Just libcflib, libcfsec, libfsecsaxloader, libcfint,
    libcfintsaxloader, libcfdbtst, libcfdbtstsaxloader, libcfbam, and libcfbamsaxloader
    will be built.
    
    I'll be working on the Java modifications first, as it has historical significance
    and will be needed on the client side some day when I'm ready to pass entire
    XML documents around as messages instead of just object-record instances.  In
    particular, large complex documents like BAM specifications in their entirety.
    
    The CFBam model attribute Relation.IsLateResolver that has been added is a required value that
    is initialized to false, and is only of importance for Lookup relationships.  If a Lookup is a
    late resolver, resolution of the XML dot-path name associated with the lookup is resolved after
    the child elements of a given element have been parsed (i.e. when the endElement() callback
    fires for the parsed object), allowing the object to resolve a component for the lookup.
    
    Late resolvers must always be optional singleton lookups relying on nullable attributes
    so that the initial creation of the object will succeed with null lookup attributes.
    
    The IsLateResolver attribute will be used to enhance the manufactured SAX parsers so
    that they can produce code that supports a this key feature of CFBamCustXmlLoader's code.
    I eventually want to manufacture the entire CFBamCustXmlLoader if at all possible as a
    generic SAXLoader document.
    
    TextDef.XmlElementName is an optional camel-case string providing the unique-within-schema
    XML element name used to specify the value of a Text attribute.  A corresponding
    TableColDef.XmlElementName will return the optional element name of the TableCol,
    not of the underlying AtomType specification.
    
    The element name is used to produce a SAX element handler with the appropriate name
    that assumes the containing element is parsing an instance of the object.  It collects
    the body text between the begin and end element tags, and then the endElement() callback
    applies the body text to the attribute of the containing element's object, the same way
    that I do with the various code customization elements in CFBamCustXmlLoader.
    
    Text attributes that define an XmlElementName are not listed as object/element
    attributes in the main object being parsed.  You have to specify sub-element text
    if you define an XmlElement handler for the whitespace-preserved body of the text.
    
    This is a github-only release.

commit 4681a5cd523b25e7355b25f4936bd78671298ca9
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Apr 2 18:22:59 2020 -0600

    2020-04-02 MSS Code Factory CFAll 2.13.11173 Enhance C++ code with safe-exception mode code style
    
    The code for this release is mostly safe-exception mode clean and should not leak when
    exceptions are being thrown, but I probably haven't completely plugged all possible leak
    cases, and have no way of testing these exceptional conditions as I am just one human, not
    a whole QA team.
    
    Regression tests for testcflib, cfdbtstramloader, and msscfcli have all been run and passed, though
    some debugging was required before all the custom code changes for msscfcli (CFBam and CFCore) would
    run properly.
    
    CFBamCustXmlLoader saw the most changes, as I went through every element handler by hand to make
    them compliant.  My goal is to eventually deploy manufacturing servers, so I can't have the tool
    leaking memory if someone submits a bad model file for manufacturing.
    
    There is no build of CFUniv 2.13 with this release.  My primary development drive has started to fail,
    so I cut my losses before yet another unnecessary build could risk permanent damage.  I won't be doing
    any more coding until that drive is replaced, and I can't see that happening before July.  I'll just have
    to "tough it out" by playing video games, watching media, and listening to tunes instead.  Oh, woe is me!
    
    The sha512sums for this release are:
    
            4a9c804a790a9e1e7e9b5b50f448b89d9f98d92b581be9dc6595cbce2047cc0ca1ae089241f8646b5cad2924f8977d629170e90b7129b08c2ec4888541697b58  cfacc_2_13_11173-Apache_V2-db_scripts.zip
            8bec58831264182ee2369fd05c938cd5aabba0c6ab33a804f5a53aaace90b5568673ae14eb43608fcb1b63e7718eaed90ab24cd30b146ae938b7ee9dbbfb3b30  cfacc_2_13_11173-Apache_V2-src.zip
            944da4715c2cc8cf696dc79c712cec291286af5b888d242916c25b159f50fa30c062d0e209edcc23c9896975d2ce14a7329962a378cebd04ca21800be6fa9e7f  cfacc_2_13_11173-java-installer.zip
            8ddb29dfd7df4ceb032fd80df3eea9daa7bc73fcf136f70c71a96b59b24d8cd6eacbe2efac60ec73d25cd9aa17f5b9b264939b4a4e1a58daeee97cf1c32fccdf  cfacc_2_13_11173-wsl-debug-installer.zip
            3a6bb66724ac9723ed78ed38b2618525ab307478e3bf349ecc81293c3a0b6d5f5e4759c900b490933d4fdf9c53745974a7cf848752b045e56932fdc306277438  cfast_2_13_11173-Apache_V2-db_scripts.zip
            5b348b53944c727eda9318d0400b525e03d3c94c881e2ec39b5bea4f9c6e60121556b4d18881a0f6bdc872f24dba3140c537bf59de43df475e4f6e5e5f3d2633  cfast_2_13_11173-Apache_V2-src.zip
            1db573b95f6a23a2e093ada63a3a13fae12bb26e46996eaa10f6cdecea743094617b207fb96e56e4d1f640db714adbfce0a3ef76724f639db2cea361da754d0f  cfast_2_13_11173-java-installer.zip
            9853cd5f54c8db3d4b323beeff209e12b230cbeb3ea32bf9fa9febd458419bc6dee5c8321bbe4e6c5a461732623c37019ce108f35a7def4432def0eafa0dcb8e  cfast_2_13_11173-wsl-debug-installer.zip
            445178759461a2e03ca1c9abd2346c96e828bc1adef55f04fb912b878d3eaad52cb6a3059ae468e4b8e00f1c4778c5692e2f97118a9397d58ccda674b7b28778  cfbam_2_13_11173-Apache_V2-db_scripts.zip
            82f6672e3594def49bf0ef1db9e8e1373cd8360a374ab16aaa7676cc1dfed274058963de1dbb1ce0c724939e4412e1e20777b150eb5e3a8b6effbff27eb96107  cfbam_2_13_11173-Apache_V2-src.zip
            54e677809d82eb9ba3462e230d7d66e8cd1579f75b249ce72948b89f0bf11c3b897611928294b8f855d291d987cd6a56b6fbf467cb235282d70f87a99afea931  cfbam_2_13_11173-java-installer.zip
            263a5acc4bfd02bc7248b0fce81ed82e8fd7902a323aa922f54205564c252f48bf60d0685e056998faebdaca915a824d2ecf4cb379e72065048fe41150813d73  cfbam_2_13_11173-wsl-debug-installer.zip
            d6541c581a19db79622625f1652d2231768c25ec5fc5d18cdfa210b2dca84a2fa96ecb1012e33404f7bb13df7c4662bbfddb2c0ddfa818187f299502369c4c7b  cfcore_2_13_11173-Apache_V2-src.zip
            7cd634a361a0c315f1729d702b6b47c35867eec7bb5d2838218fa7fd8593884bb74694f78358fe3198f3ca0907748b6e65e1a52fdde96914f8726f6d241b5e20  cfcore_2_13_11173-java-installer.zip
            8dce6716bfb7f92d6be46e32c0304703b8aa8bece129d579e3cbfd5d0192da865ac128bc70e204ad361f3a242f34ba9df121f0dde79d33ec6b09fc2fbcb32a80  cfcore_2_13_11173-wsl-debug-installer.zip
            194ddab1e4a8db2da0c9421512a2aa042fd82e22f6e349bb1340bcca459f0c8d6927bf43cfd585236002edd29fd81b884fe003bc56f050509b6dcbcd72192516  cfcrm_2_13_11173-Apache_V2-db_scripts.zip
            ccaa4d28f44f1583a9e20166a13b465c8f9484a326334d9b2f60919bfa0b5116f3e81e6d4f46f2ac598632d76dfefb14d908d763d4e0c839e992d4b67f18eced  cfcrm_2_13_11173-Apache_V2-src.zip
            69f5a69069d4449f83cb9af84df5047b4844ea1275aaa33a9fe4e6d7501e279b81f5efafd5abbc30166fbdd9f889aaed2f417236d10817c077530da7f0ebef5f  cfcrm_2_13_11173-java-installer.zip
            2fdd5c61b17d13fd778a4ca9d00f8fdbf9c2a3f506f0c6408af3bfff9282743013861a350123c5adb864b634593d251f317f404635f6c89e3b2e22a119f10048  cfcrm_2_13_11173-wsl-debug-installer.zip
            bba72adfbc8bf5a5ba0ece81e61865d9dae43d65d41720eef47c890e74196c38a7808f8c2c168ac65eaa3f5b9cce9a6ae816990613d784f4c15ff8e178474a54  cfdbtst_2_13_11173-Apache_V2-db_scripts.zip
            b6630f2147fbf5e805cb45164599bf17a8ce92fb796f08085d54ea470163a6589da3351b489e4bbd6aff217fb7c2b87bd04d7b86e57ccec28c1fd9a9853185fe  cfdbtst_2_13_11173-Apache_V2-src.zip
            e3f3756a3dcdb3949aaeceacd7fb0fab8e73acaae15f644e1111e51e0d76b59d2ae66ccc9ac8d05dca63f70c49c9e5ee8f9287a147555f40d18ddaa3ec92641f  cfdbtst_2_13_11173-java-installer.zip
            b26457a5d1be264c932ce99d20d2581b0b5929b79ff8f5e62230b39afacab54a94f7b32b879bea7c996076ccdc2ebe9166745c85a6ed7fcf9cff18de1378d3bb  cfdbtst_2_13_11173-wsl-debug-installer.zip
            351fdf07463277385ac1482593ebc6a5cbbb38a9a41d1fb0a48566c2b18251314823a48036b0ad1dfd659c01d65650a24c29711898f109a6015aade01cade18b  cffrsw_2_13_11173-Apache_V2-db_scripts.zip
            6d7d9bd8c4dbcff3b40498fcfac8dfedbe39ef6cd9bc6039628460f4b3a98ad5f9d463f3d4b7b5eaa293281f609aa54f78f8ce5a439d16e5d4c11b9099b87442  cffrsw_2_13_11173-Apache_V2-src.zip
            373ec647534a7e167d52f488ae8ddbf6fdc0019cc06dff80c437ebd338540c30ed5fa9423ba96c8b0ff2e137a1c8eb06d3196399702b86f93f76033d458d0df9  cffrsw_2_13_11173-java-installer.zip
            3f96f4048be82275f776178ccd07d5b87c9e248a5a4e4d1c53e3aa73db24d2d4b290136c814d41a6d4fe942fe6650cfb77d664a1652e766dcf8e807f0dbcf8f1  cffrsw_2_13_11173-wsl-debug-installer.zip
            f74a9a081e7c404cf79f18633d27ad39d03aae6fa5ede9e957b0ac4b143dd7bafb2b1c00121568abb8cc04783a52fb45c554db364161f21672a5c4126f5ef332  cfint_2_13_11173-Apache_V2-db_scripts.zip
            9250db143e99727c978b269b4fe5ff2173133e2117a586b384e011706f11d23d791fa74244e3e490ee93a5b12b314ae006686f417a512bc7bf0b78f63b5f68f3  cfint_2_13_11173-Apache_V2-src.zip
            f6116d030d6840e0130688af3d5cbb497b97c0d75d5fe77ea93b74b42dcba41c1059c3a29e370102e8ad447351f2632024a4f1ad40009e3a6afbcb0331d90e2f  cfint_2_13_11173-java-installer.zip
            61198c33bcf5f797fc4697d61ddcd0f1d9f65995bdbb35b4a18210ba751ddb04069c12b389053d463499e3a70d9c57bc36109056e82b923dad258ebc9f77a62c  cfint_2_13_11173-wsl-debug-installer.zip
            2e34af533756ed64f043ea1cd023193867ad02699068922231c22fe7e5a081b7136ddd66c10d5d714e2330dfcb57f47fa3785603dbe2145c3930ee74a84652a0  cflib_2_13_11173-Apache_V2-src.zip
            ce7a47d95de13df41d7f32f1f6d00902ba0319bff01c80fd85ee650edf8b988f1a515abe5b55e3690bbdf158369a30ef565eab8d180d9a69688b4f52eb0c0633  cflib_2_13_11173-java-installer.zip
            6dd2041fab98f2895e23f66f61b773716e178911aebc0a409865ad64c31e88943776c5f96db81f521c9f7379a9f0977c0a83f087d33b6b802393d9935a13c482  cflib_2_13_11173-wsl-debug-installer.zip
            ebfad1402495dcba16b27aca38340af719d3df463e6548f57e8e98482fdaa8944856325e752e6d6c9d5edf03b2db52557e29e544937d06a8b9fbf74a5233e2b7  cfsec_2_13_11173-Apache_V2-db_scripts.zip
            1a27c21190daf2ef3131cbf54962d5fe2853a6e8277deec77d380d28cb4dddc4b8afebf5774aa385edd6d048fe8fa97ef9708fb3a427e3cf642c2769c34e2586  cfsec_2_13_11173-Apache_V2-src.zip
            47eb80f05e9778e825ab9e4991f486944f509ecae9d3715fab53217777a87a4294bdb47dd3c84408724fbf1be0cc8f937b7338bb2801c5897601ef551b530593  cfsec_2_13_11173-java-installer.zip
            fba5dcecb1e1153f27f476ef1023ff6876686f852b792f37911de97b3e149ece29960f3900cc46c68813e2af2a2229f41b4d03ca997b9a3e78b302d8dcbc5e16  cfsec_2_13_11173-wsl-debug-installer.zip
            cea5f8603fa278f3ab00ab389890b5115ed02815a6c5d4dafb3ae96d284fec837fdae77246f05da6cff609462690acbf4a3383434f252a08250fe2aae1562e1f  cfuniv_2_13_11173-Apache_V2-db_scripts.zip
            87ffdd5a4d66fcaacc9f50431e65e7afecf7b0037835f0221c5db8befe04e5d924ec4f50ae2e1fb6f519eead15ce961b97322c3f398008ff571ef1323bc77fe7  cfuniv_2_13_11173-Apache_V2-src.zip
            460444e4aae81d9393433e5caa59026a2618b57a26a571c23289146ceb2f953cdf714bcff395f27f8819bf42b70049a5aee11e9c2477b7feb7c19a0d9c1a12c3  msscf_2_13_11173-Apache_V2-data.zip
            43de6e63a4aa4512bdf5a57af934c7c93d5f43e54675989d708934728c5b34e5a2e0eb6bce7b0e8523dd34606c16f6e6e1a4ed96daa7bd3c42a553454dbe3838  msscf_2_13_11173-Apache_V2-src.zip
            3bb98997b8b4334638820c0a0e4895cd4631e948ef96498f8c3f1939b09e5e04840e27f6f016d9ae4270f2b6bc683edaaa4b6c1846200ea253ed7e5d39dfb5f1  msscf_2_13_11173-java-installer.zip
            0547d6a7bb4d9994d8b0c609a68a95a6940a2e15d4742225ad52a3a0a18e0aacb95e1d3b4791efce35e1044b2ea84fb417cc4f25c5f979de5a98d5b08cff74c0  msscf_2_13_11173-wsl-debug-installer.zip

commit df2cb0e26c925b2ef1972af4d57e7a5d4f43b7f1
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Apr 2 16:15:08 2020 -0600

    2020-04-02 MSS Code Factory CFCore, CFBam, MssCF 2.13.11173-202004021610 msscfcli passed its regression tests
    
    There were numerous little gotchas to get cfbamcustxmlloader to compile, and a few minor bugs to correct
    for a successful runtime, but all in all the regression testing of msscfcli went quite well and only took
    a couple or three hours from initial link to finally passing.
    
    This is a github-only release.

commit d9e3e4dca137329a0f97f7335ab3f74e7b62b6fd
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Apr 1 14:57:48 2020 -0600

    2020-04-01 MSS Code Factory CFAll 2.13.11173-202004011500 Remanufactured by 2.12.11172-202004011450 to declare parentContext and scopeObj in C++ SAX Loader element handlers
    
    The C++ element handlers had a couple of missing variable declarations.
    
    This is a github-only release.

commit 0ccaa17633bf58071ef21f8e18fd720be1fa8943
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Apr 1 14:15:48 2020 -0600

    2020-04-01 MSS Code Factory CFAll 2.13.11173-202004011420 Remanufactured by 2.12.11172-202004011410 to correct defects in C++ TableObj rules
    
    There were missing CFLIB_EXCEPTION_DECLINFO invocations in the C++ TableObj rules,
    and some variables that had to be pulled out of the try block so they'd be available
    to the return statements of the methods.
    
    This is a github-only release.

commit 892f0df67e3f1e59ee60ee0874b05da178bf0ab9
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Apr 1 13:34:48 2020 -0600

    2020-04-01 MSS Code Factory CFAll 2.13.11173-202004011330 Manufactured by 2.12.11172-202004010845 to follow safe-exception handling protocols in more cases
    
    More cases of the manufactured code now follow safe-exception mode code styles, though
    not all of them yet.  But it is getting close to a completed effort.
    
    This is a github-only release.

commit 050085a28f418c531bc9ff45f219a7d56096effa
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Mar 30 23:00:26 2020 -0600

    2020-03-30 MSS Code Factory CFAll 2.13.11173-202003302300 Manufactured by 2.12.11172-202003302215 to modify the C++ SAXLoader element handlers to follow safe-exception mode code style
    
    The manufactured element handlers of the C++ SAXLoader now follows the safe-exception mode
    code styles completely.  I even tidied up the indentation.
    
    I've also been working on manually converting the CFBamCustXmlLoader element handlers to
    following safe-exception mode code styles.  The code customization element handlers are done,
    which left roughly 75 element handlers to be processed.  I've been going through them alphabetically,
    and the next in queue is CFBamCustXmlLoaderNumberTypeHandler.cpp.  There are 42 more element
    handlers to refresh after that one.  (Life, the Universe, and Everything pops up its head again, eh?)
    
    This is a github-only release.

commit 30670cbd74076bf78a439f13fcc4dcf1be81c425
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 22:30:23 2020 -0600

    Update ChangeLogs.

commit 5e8e16aabe32e94d4b6b880d1c1d0b401b9a2b98
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 16:49:13 2020 -0600

    Don't refresh ChangeLog in BuildXxx.bash scripts

commit 79b5c0b8ba2334b0c92cea7c6f26ede1439345d2
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 16:19:03 2020 -0600

    2020-03-28 MSS Code Factory CFAll 2.13.11173-202003281555 Java-only release of code manufactured by 2.12.11172-202003280710
    
    The ChangeLogs in the C++ directories are no longer ignored by git.
    
    A script to update the change logs has been added to msscf_2_13/java/bin.
    
    The CFBamCustXmlLoader implementation has been updated to support the new IsLateResolver
    and XmlElementName attributes described below.
    
    The CFBam model attribute Relation.IsLateResolver that has been added is a required value that
    is initialized to false, and is only of importance for Lookup relationships.  If a Lookup is a
    late resolver, resolution of the XML dot-path name associated with the lookup is resolved after
    the child elements of a given element have been parsed (i.e. when the endElement() callback
    fires for the parsed object), allowing the object to resolve a component for the lookup.
    
    Late resolvers must always be optional singleton lookups relying on nullable attributes
    so that the initial creation of the object will succeed with null lookup attributes.
    
    The IsLateResolver attribute will be used to enhance the manufactured SAX parsers so
    that they can produce code that supports a this key feature of CFBamCustXmlLoader's code.
    I eventually want to manufacture the entire CFBamCustXmlLoader if at all possible as a
    generic SAXLoader document.
    
    TextDef.XmlElementName is an optional camel-case string providing the unique-within-schema
    XML element name used to specify the value of a Text attribute.  A corresponding
    TableColDef.XmlElementName will return the optional element name of the TableCol,
    not of the underlying AtomType specification.
    
    The element name is used to produce a SAX element handler with the appropriate name
    that assumes the containing element is parsing an instance of the object.  It collects
    the body text between the begin and end element tags, and then the endElement() callback
    applies the body text to the attribute of the containing element's object, the same way
    that I do with the various code customization elements in CFBamCustXmlLoader.
    
    I hope those two features prove sufficient for manufacturing a CFBamCustXmlLoader-equivalent
    generic SAX Loader.
    
    The sha512sums for this release are:
    
            8ab28d5e47296064dba6fa3a7f1c92f7e72b53909232e86ee10b0975030f2e6843abf5e346498e97101ca278b41716e0ed86e07bdd8fe2579a2e6e964f7dfa21  cfacc_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            be5ff30d8a8985c955e2e2b4baaa9397991d1f421aa4fd582cba027076a1cf0725caebe1341f0b22444cb5adea2eb14b8377c157077a69aa0578247380f5de9e  cfacc_2_13_11173-202003281555-Apache_V2-src.zip
            939029bb2c1d04f732dcb9902e412465419f7d72c81741f72162d1889db8590fc9264e4d0e0aa8b9829a982f43272777d68abfef8eba5fd34dd26766acaab1fc  cfacc_2_13_11173-202003281555-java-installer.zip
            e68063ad4529c0bae43909d0a6021519e477941aa813cfc97baf715debfc6059abbc9f7658f128c5d45b0a7fc3fbbb3027c3a99be69bf409380f74f4609eaa1b  cfast_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            c5e84e267fd6914d78ef9a092f6d453726c77229c1c6ac52029228ddae69228ed127b6fce86a3ac3db381c63fb2cf351694e7eddc9521a09c3b427ddadc9bfd3  cfast_2_13_11173-202003281555-Apache_V2-src.zip
            df2d0aa7a6b2bcf3721fa293cf7d1bb9f1ad1ba54c5ed3a299ffd02fd0cdce03c78281ba3ea7f44813178b4aa9b69bf77238d855ec9e3b1cee9524c4254a3874  cfast_2_13_11173-202003281555-java-installer.zip
            c952e8cadadb924407323b79012eaa399024745028b8d92322634629cf53b0205ab2ce6510b108f182a940fd87da0268ad45e20c3bec3d1d8cc6ea22f30fcc22  cfbam_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            f89307dcfc0cb70f2efc151ebe07c9d836ab4be7c7fdcc6d35aefbd2d9cc8edeee8f9c80cc66b7a386979d82d2d80e8c0f90d221344e85b0c7a8d912921b4b1e  cfbam_2_13_11173-202003281555-Apache_V2-src.zip
            95552428d9b45bdfbe3a2c394603a3f3d5db316df09a6d0ac873f3928f8c773fa4e0a73fb06f4237153cb3f5d1d4a0868d110f8d38b2f12a2b995a57720b9a6d  cfbam_2_13_11173-202003281555-java-installer.zip
            0ea4aa2f90e899899eb62ce7d3bd69ba56dce73afb1f7370081feb34b64be367135098bbbb7c46385ac8c957b66e225626542e7b9ee540287368b1a8501b1f4e  cfcore_2_13_11173-202003281555-Apache_V2-src.zip
            5f7e3764f1fb7fcf69c368ff94ebdb4428e014c349da7cbff3c7163ccfc48da3a5c8ff6e0bc58ce4ff5e93542f0a2e97e28d7d2e684aefb1c76905a9c52e22a2  cfcore_2_13_11173-202003281555-java-installer.zip
            8ff8720516932d39f4df1030ad593330e7e541485b966dc6d04bc28fcbb481b6af974a39d882e5bebc96ac0f56d329414ff4491479ce7c0b0c9beeeefe088f3f  cfcrm_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            83c961f1c6e667f62170a4350ae5613b30d2d8202e88e69bfca797e341788600a2ea5d659accbf097adf372b67674fb104264e33b65e3e9555f8ab0001abe714  cfcrm_2_13_11173-202003281555-Apache_V2-src.zip
            49c57e1d1ca50776cc6dcaae64dc238572462348a3f37d05abe389261bd12b8a05dd546b20419e7b34a91076743e65ebed686efed0ae0fa0c744c63e6d16f3da  cfcrm_2_13_11173-202003281555-java-installer.zip
            60c4bc13b19bc5c2cc2462805eaf6e7b77019b1d9b015bde74043a4c9e25e56e4863a32b9c50ec17e64510f16533a30151329c0f1de0be1c9231513e219e7494  cfdbtst_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            c7836f0afb38eafd763f448325ff9134cbba23d46ea31c3a568993971b5291efa736a7d753452fb84c576ebaee05e2cbdc69a93ce024b48d8509fdbcc8a905f5  cfdbtst_2_13_11173-202003281555-Apache_V2-src.zip
            ea8143eebcba968496051e7b059ea48215d0b955634c6bdc34fa8682ca0f022cdfd00f572fcae8f4449a52c29605c9d95bc56a5cb46c6cba12b4f08f16f337e2  cfdbtst_2_13_11173-202003281555-java-installer.zip
            04540aaafcb5c20798d8b306f75c350d4d54bbcdf79562e02e2fb8ccc0b8279347fd7f544b6dc4138fefd8ffbe82b7c49eebe491a00d6a0ccd468c0f00c44b6d  cffrsw_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            99a8c439b89386b123a5b6fe321460072d6961a41d804539d66cc1ad8c1efc80fefcd6533ec762f9d300aa24b797c0b5755d5c38768362bf5b1a2b946f7a1dc2  cffrsw_2_13_11173-202003281555-Apache_V2-src.zip
            2766c2cd42f36eb542aa83bd210020e5040ca0473739e2b48166705dfdb3d1c911fbf013aa56f0ca1e30d24472dfa480e373b72789fab677c3a97ad4684c85bd  cffrsw_2_13_11173-202003281555-java-installer.zip
            c6a0fc649d60b475cd3aee89abdc813ec57eb7ddc821299d8908b99c54c033f67dc5e87f1ee99acd977947741bcdffe7b63e619c696ef76f897d0fc7a8c61b8b  cfint_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            8386d511b49cc72e0849c46ea3cef00b65d72d3a4bf3c808c86f3c3e056e8e682e759e2cccc927eafd10e537b9a8dbd79250de7b425fb1aad69b8693c1284e0a  cfint_2_13_11173-202003281555-Apache_V2-src.zip
            c520bdfcf94323a4fb9fe86788f4e29e20fdedad0cf28adbc9cc7f68d2efa3e6bb720cc0487b43fde5f0561868b285a8eebb6a6aaeab55b7361139eed0739a23  cfint_2_13_11173-202003281555-java-installer.zip
            bea7454fd76f25aaf6b100a63a285286078966c44063086abdcc0b614ac03168d64cf2c9543ad103bc26759b02d2f7893a9179b42c40b8480072b6ab4041e202  cflib_2_13_11173-202003281555-Apache_V2-src.zip
            aa71880f4a11bf74a49d47fdb3bfccf49fb8814bc8f0f44ceaab07dda69700b29f60d2571326308f9e68c2d79546cf13d253c99ee837de53bc3cdac3709d8ab9  cflib_2_13_11173-202003281555-java-installer.zip
            acf7dda16bc48596132165aadab8a8edeb0d2c52e36c2052e35c51d9d9e0e972b0f5de99a893389f2a7b70e5ef9063f9f6f7d1db91caa2963ee6da51d77a4d7d  cfsec_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            7014a39e5e3bdcd9eb424824ed914ac00fffc702605c64c4e3a3d75152e9b6aa86aabfb395357b391cf036c0c028a487a82b990847e76935a25176847d7bd93d  cfsec_2_13_11173-202003281555-Apache_V2-src.zip
            3424e7dfc32ff79d9cc6a5d83f64e40860af08d116352a57720fd5a849981d5f14cb7195c9de82c832bdb964aabecf80513454ee8f5cdc65ee0aaff2300b98c3  cfsec_2_13_11173-202003281555-java-installer.zip
            07e54681e172936bbd58ab99bccbeb6cb36a179196b8eaa3cacf69b8390fff42a92d1e22b5770741c04b3c13dd13a0b00d33eae29bf2cb9e04ce26e5d87fe42e  cfuniv_2_13_11173-202003281555-Apache_V2-db_scripts.zip
            2a4397b4ea28226fb747d052c9a2af2a6a703fa77ee8726888053486df2a57d73401df5a178a32e224c8e874ec7952b95e675efcbd5752e3bc991dac395e0196  cfuniv_2_13_11173-202003281555-Apache_V2-src.zip
            86efc058cfcb55e7058891cbd708662cc2b9f8255d8ceab86d7cdd59b690eba956f28e538c5c0c363b59a15337e3af45f1f14e7b49ba32e9920d1d907a1583b5  msscf_2_13_11173-202003281555-Apache_V2-data.zip
            7b44fc08c2bb1bbada4cac8507a59ff7b54e4178e57048abec9b6f9b3c28d55a65c867feda054c8449f933b7414467212d998b8878bb3689aa08f4ef5fa7e55e  msscf_2_13_11173-202003281555-Apache_V2-src.zip
            9ba6c0821ec9f2b0324634a38b8ae852e9101597fe053aa2ff9d1a323de2c7c454c55c548a37b20d5dd2dd4bb279e8f6852572d0c1635c13b7d28c3b9a00779d  msscf_2_13_11173-202003281555-java-installer.zip

commit 7eaa5f96648ce2308f45104b206fc047fbc12727
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 16:01:01 2020 -0600

    Update ChangeLogs.

commit d86c777711216f300aaa2093ecd948eaed69b6e9
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 15:58:50 2020 -0600

    2020-03-28 MSS Code Factory CFAll 2.13.11173-202003281555 Java-only release of code manufactured by 2.12.11172-202003280710
    
    The ChangeLogs in the C++ directories are no longer ignored by git.
    
    A script to update the change logs has been added to msscf_2_13/java/bin.
    
    The CFBamCustXmlLoader implementation has been updated to support the new IsLateResolver
    and XmlElementName attributes described below.
    
    The CFBam model attribute Relation.IsLateResolver that has been added is a required value that
    is initialized to false, and is only of importance for Lookup relationships.  If a Lookup is a
    late resolver, resolution of the XML dot-path name associated with the lookup is resolved after
    the child elements of a given element have been parsed (i.e. when the endElement() callback
    fires for the parsed object), allowing the object to resolve a component for the lookup.
    
    Late resolvers must always be optional singleton lookups relying on nullable attributes
    so that the initial creation of the object will succeed with null lookup attributes.
    
    The IsLateResolver attribute will be used to enhance the manufactured SAX parsers so
    that they can produce code that supports a this key feature of CFBamCustXmlLoader's code.
    I eventually want to manufacture the entire CFBamCustXmlLoader if at all possible as a
    generic SAXLoader document.
    
    TextDef.XmlElementName is an optional camel-case string providing the unique-within-schema
    XML element name used to specify the value of a Text attribute.  A corresponding
    TableColDef.XmlElementName will return the optional element name of the TableCol,
    not of the underlying AtomType specification.
    
    The element name is used to produce a SAX element handler with the appropriate name
    that assumes the containing element is parsing an instance of the object.  It collects
    the body text between the begin and end element tags, and then the endElement() callback
    applies the body text to the attribute of the containing element's object, the same way
    that I do with the various code customization elements in CFBamCustXmlLoader.
    
    I hope those two features prove sufficient for manufacturing a CFBamCustXmlLoader-equivalent
    generic SAX Loader.

commit 68be03aa0a25e3f7b0da43ec1dfcf5ee7c634ccf
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 15:57:12 2020 -0600

    Don't ignore ChangeLogs

commit 68e1f2d2ff77592796b028b099df7b15191631e8
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 15:38:03 2020 -0600

    Correct UpdateChangeLogs script and git flag it as executable.

commit 59d604f0da63b44d7789cf21959a9a8c7b75b25a
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 15:36:16 2020 -0600

    Add script to update all of the ChangeLog files for the 2.13 C++ code.

commit 66317fffd0cf39d589cb16d49d6c60b144e485b1
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 15:27:22 2020 -0600

    Update the archive script to incluse the C++ ChangeLogs.

commit 3a1b7a18475e9ee4e3ad9df2482858aff8911381
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 15:23:42 2020 -0600

    Update ChangeLogs.

commit b74a4400cbc642d29efc749b013c90713444fc7c
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 15:20:37 2020 -0600

    2020-03-28 MSS Code Factory CFAll 2.13.11173-202003281510 Java-only release of code manufactured by 2.12.11172-202003280710
    
    The CFBamCustXmlLoader implementation has been updated to support the new IsLateResolver
    and XmlElementName attributes described below.
    
    The CFBam model attribute Relation.IsLateResolver that has been added is a required value that
    is initialized to false, and is only of importance for Lookup relationships.  If a Lookup is a
    late resolver, resolution of the XML dot-path name associated with the lookup is resolved after
    the child elements of a given element have been parsed (i.e. when the endElement() callback
    fires for the parsed object), allowing the object to resolve a component for the lookup.
    
    Late resolvers must always be optional singleton lookups relying on nullable attributes
    so that the initial creation of the object will succeed with null lookup attributes.
    
    The IsLateResolver attribute will be used to enhance the manufactured SAX parsers so
    that they can produce code that supports a this key feature of CFBamCustXmlLoader's code.
    I eventually want to manufacture the entire CFBamCustXmlLoader if at all possible as a
    generic SAXLoader document.
    
    TextDef.XmlElementName is an optional camel-case string providing the unique-within-schema
    XML element name used to specify the value of a Text attribute.  A corresponding
    TableColDef.XmlElementName will return the optional element name of the TableCol,
    not of the underlying AtomType specification.
    
    The element name is used to produce a SAX element handler with the appropriate name
    that assumes the containing element is parsing an instance of the object.  It collects
    the body text between the begin and end element tags, and then the endElement() callback
    applies the body text to the attribute of the containing element's object, the same way
    that I do with the various code customization elements in CFBamCustXmlLoader.
    
    I hope those two features prove sufficient for manufacturing a CFBamCustXmlLoader-equivalent
    generic SAX Loader.

commit f2db72e0747df299ba4843441133658877f87545
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 28 10:03:55 2020 -0600

    2020-03-28 MSS Code Factory CFAll 2.13.11173-202003281000 Remanufactured by 2.12.11172-202003280710, propagated CFBam model changes
    
    The 2.13 projects have been remanufactured by MSS Code Factory 2.12.11172-202003280710, and the
    entire Java 13 source tree recompiled with the version numbers updated from 2.12.11170 to 2.12.11173.
    
    The code was subsequently used to propagate the 2.13 CFBam model changes to the CFBam 2.14 model,
    as per this verbatim copy of the 2.11/2.12/2.13 model change description text below.  The clean compiled code
    was then used to remanufacture the 2.14 code base via the "ManufactureCFAll214.bash 11174" command
    before taking this commit snapshot.
    
    The CFBam model attribute Relation.IsLateResolver that has been added is a required value that
    is initialized to false, and is only of importance for Lookup relationships.  If a Lookup is a
    late resolver, resolution of the XML dot-path name associated with the lookup is resolved after
    the child elements of a given element have been parsed (i.e. when the endElement() callback
    fires for the parsed object), allowing the object to resolve a component for the lookup.
    
    Late resolvers must always be optional singleton lookups relying on nullable attributes
    so that the initial creation of the object will succeed with null lookup attributes.
    
    The IsLateResolver attribute will be used to enhance the manufactured SAX parsers so
    that they can produce code that supports a this key feature of CFBamCustXmlLoader's code.
    I eventually want to manufacture the entire CFBamCustXmlLoader if at all possible as a
    generic SAXLoader document.
    
    TextDef.XmlElementName is an optional camel-case string providing the unique-within-schema
    XML element name used to specify the value of a Text attribute.  A corresponding
    TableColDef.XmlElementName will return the optional element name of the TableCol,
    not of the underlying AtomType specification.
    
    The element name is used to produce a SAX element handler with the appropriate name
    that assumes the containing element is parsing an instance of the object.  It collects
    the body text between the begin and end element tags, and then the endElement() callback
    applies the body text to the attribute of the containing element's object, the same way
    that I do with the various code customization elements in CFBamCustXmlLoader.
    
    I hope those two features prove sufficient for manufacturing a CFBamCustXmlLoader-equivalent
    generic SAX Loader.
    
    This is a github-only release.

commit db82a76dcb307b9fcd77f7fbfa1fda4cb7703535
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Mar 23 12:50:18 2020 -0600

    2020-03-23 MSS Code Factory CFAll 2.13.11170 Reworked exception catches and rethrows to plug remaining valgrind memory leaks
    
    cfuniv_2_13 is still building and will follow along in due time.
    
    This code was manufactured by MSS Code Factory 2.12.11169.
    
    There has been a reduction of 304,606 lines of exception handling code in the 2.12
    rules and 2.13 code base that has been replaced by macros since 2020-03-13.
    
    There is a new cflib header file named CFLibExceptionMacros.hpp which defines the macros
    that were used to plug the remaining exception-case memory leaks in the 2.13 projects.
    Some of them are demonstrated in cflib_2_13/cplus/testcflib/testcflib.cpp.
    
            CFLIB_EXCEPTION_DECLINFO is used to declare the exceptionInfo variable, and
            must be invoked before any other CFLIB_EXCEPTION macros can be used.
    
            CFLIB_EXCEPTION_EMPTY checks to see if the exception information object has
            any exception catch information stored in it.
    
            CFLIB_EXCEPTION_CATCH_FALLTHROUGH catches all of the relevant CFLib, Xerces,
            and standard system exceptions, saving their information to the exception
            information object and then falling through to the statements following the
            macro invocation.
    
            CFLIB_EXCEPTION_CATCH_GOTO(cleanup) is similar to CFLIB_EXCEPTION_CATCH_FALLTHROUGH,
            except that after saving an exception's information, it invokes "goto cleanup", allowing
            you to jump to any label you choose to define for post-exception processing.
    
            CFLIB_EXCEPTION_RETHROW_CFLIBEXCEPTION rethrows the exception information as
            a CFLibRuntimeException.
    
            CFLIB_EXCEPTION_RETHROW_SAXEXCEPTION rethrows the exception information as
            a Xerces-C SAXException.
    
            CFLIB_EXCEPTION_FORMATTEDMESSAGE formats a message for display or reporting based
            on the exception information.
    
            CFLIB_EXCEPTION_FORMATTEDMESSAGEFIRSTLINE formats a message for display or
            reporting, but only uses the first line of the exception message body (the
            "what()" text.)
    
            CFLIB_EXCEPTION_RESET resets the exception information to its initial state,
            usually used if you have more than one try-catch block in a given method's
            implementation.
    
    The sha512sums for this release are:
    
            1ae617174ea5deaf4809566b3db405978dbcd435d4a90d94b98d032d1653ee56fc488fe14cea5bcaff7279bff225e9fc5b7b5c91af826e4ae07ce4506777218c  cfacc_2_13_11170-Apache_V2-db_scripts.zip
            a318203e2b68a53cb9d95a68b86e94f2c353832281da3077a7708374fdcfd3d1770d05d74a6e32ea9fe6748a5d513e73cefb8668b010f3f44723b63fddf56c5d  cfacc_2_13_11170-Apache_V2-src.zip
            caf3cb28a13ea2c21bf4c6ab8cf0e58d97403a68c0bcabd72e7c6265760752b1ce9d55857c194b0b9067a8939fa5ce308d792d85e81c61eea387d2660840ee18  cfacc_2_13_11170-java-installer.zip
            6c5f8c76a526cdf10d23aada71251485be18ab25643830f0a7abc6a5ae37922abd67109ed760e27668b3da4a830b25867c25ca9012f16393bcf37c896ae95e53  cfacc_2_13_11170-wsl-debug-installer.zip
            01d78f1992919cee47beace3600e6cdd0467b4e98b36346baedaed2cbfa571e9757ec63f6f0ec45fd4172bbd4ddbd0c5fce9d4b96e57397d29c5c361b39ea40c  cfast_2_13_11170-Apache_V2-db_scripts.zip
            621fd8b7e0a843db57383a77d787877a7f133879e3849b30cd9971aaa508eff4d35de2d1f1609926c43ca31892d1f45c7ce6353e3ffe045119e7ae41aa2bdad4  cfast_2_13_11170-Apache_V2-src.zip
            02668f2e26dd79f42c5d9e89f30019a2866a4ee6d3ee0ae0f5f3d60dd507098329b9864a2c0f671dff14e4fbd15c8e8c8c7af158172e8ae2ef27bae4ee06e82a  cfast_2_13_11170-java-installer.zip
            9b720f65530f9148e3f3e625fd8ab626ab7f6d85d75a6ddcc77cee35cd3da5aa38e62641497dd8833d03102932acc541541aa54d1d76a42eeefc4722a7f09a92  cfast_2_13_11170-wsl-debug-installer.zip
            9142f051be1f0b5d908cf6ebda573284f6f24be6d25125a0be3683950f427b8066ef7259013e2499b40cbd88eeb0a6f6d6bea40dd31b7d06cb91a3a5f8643911  cfbam_2_13_11170-Apache_V2-db_scripts.zip
            c112ac72daf2cacaed52f7a81ec2d4a72790274e53ea9c4f061486a4071a96cc7e9f896e9745aa2de9a9f3475fe045a4fb20cdd1601f0778d846af09f0de2300  cfbam_2_13_11170-Apache_V2-src.zip
            fc30c031b89078c390b7ee4bc34613c5e32a6b171c4f720a5aa3958fe6e74ec75ca5dfcee15ab1f2e064835acfa5ba0c05478a6413ed71499bbb151c04146226  cfbam_2_13_11170-java-installer.zip
            b9db3606c8bded6985938cdf17a810b757a0e92cfe84e7bc3a6f160b7e24373a40d8241cc2aa7bb9b8d50cb4ce7d5c1de668cb05890fc57fd00851cf31e7639d  cfbam_2_13_11170-wsl-debug-installer.zip
            7c015a564100171e39c510f7eb6f91d512b2f83239fb0d76b059a5ca7f4d8ea741ee956270cc954b081f228a243a28ef0f7b6e7bcbda073cd28fe0503585f370  cfcore_2_13_11170-Apache_V2-src.zip
            249e274a73e948dbb41fe281a6a1a29b302dcb415ff3f0f7b7906aa4b06781b137a7bbf40dbabab1195be6121735993b57f5734cb13fec6f822ee24e11a86dc7  cfcore_2_13_11170-java-installer.zip
            43d76afc774e299ac9d7e07f792ed242eaffd1ea619b6d426531357924135245f0d91e9e90fbff18eec570c885d55e9e949e123c353e48555d18ccd8a91edb82  cfcore_2_13_11170-wsl-debug-installer.zip
            44500f45941895eb5508c08f317c0d5cc64c67c6c292e9057d35080cd3aaaf51a3628db0536b45db72a1481b15660be90d5ced6adb3d76f76557615b99d8c779  cfcrm_2_13_11170-Apache_V2-db_scripts.zip
            47c4265cce301b3a590753f85e19f57c11ea94010c8bc8d60d230f8e7c31ad8126fb79c777a37a89cd22a451b4f47c0fb4d4f10672f7c95a3fca9ef1c0601ab0  cfcrm_2_13_11170-Apache_V2-src.zip
            2d0e360e99583db36d659dd0e5566431e2898687a81e020c9a2987b364175ef8a32fa5ef8684dce5571fcc3d7ef53ca28f9923a1e06faf86fbbcc52dc644814e  cfcrm_2_13_11170-java-installer.zip
            c20c9a6d9b1cbe5378e25261c9747699e25d42d2602b92dbd488d737f6c441ca2021b9e3e530eac22cc86f40691cab5176ee31d436f16bd2139435fecba03630  cfcrm_2_13_11170-wsl-debug-installer.zip
            7cf4788d1aaa02c5ea1e8463365b9f11a8f0519944ba78381eb89e61b535ba5c4ec934f257cdfd59fd9f53d3c88a6654743aea735a38e602e96eaf94aae8c1ef  cfdbtst_2_13_11170-Apache_V2-db_scripts.zip
            e844649915e84d94896750083ca2159f73a2da608d77d9ddbbfca0037bf6cfffa4c1b81a0499054f14b0a9b744fcb0fdaeb37dd31d0430005479a7b14a848783  cfdbtst_2_13_11170-Apache_V2-src.zip
            cf8b64a8810ade64c1d1a60efde805e5abc17eea4de7ad74b767e9a9dff889c3f1082cb22328930f1f027568dcdc5ada600282f1b12d1386e261ef635b7bd58d  cfdbtst_2_13_11170-java-installer.zip
            dc5280f4c4bab60a0c3df64534a9afbb2697eafe14f9b7b0c3be86bdeb19f7b432f9186bfd05cf39ff993c2706aa5bb437468a6926aa4e6ac51a5514074d98cb  cfdbtst_2_13_11170-wsl-debug-installer.zip
            ee264c8e26d6edebe4c1a00c0ff3c69e493d7c58406fe742c5de5c5dfa15904416c816ef59aefc0208912dc5a88b597a0b7b93cd5e4b79040e90a14f602d7ce0  cffrsw_2_13_11170-Apache_V2-db_scripts.zip
            a7b9c0f1eddbd48bf2f6bdf2e27d583d63eb23e2c10cc4ec0be445737247202765e0fc2af7dfa49d459ff93d053ddbb202f23f5544d2abc6188d096817ff479b  cffrsw_2_13_11170-Apache_V2-src.zip
            3e2f32e46882dc037d8a89c1ba7dcae51975227cb9c306b66fabb1e732bd3593307020b9f2b12483890e88a0f4a82c4593aa33b05d3878646eff95b01b89954d  cffrsw_2_13_11170-java-installer.zip
            2d76922f2ec6c1d0c2cc916c06e9a68189d2402b4fe7fc163396951353fb94ffaae5b5959e0faf371d91190741a0059f03ee7c5da29bf9b76758e29b66af9a3d  cffrsw_2_13_11170-wsl-debug-installer.zip
            b1ead45e5ea9cfd90d330ad170374f8069c9918f0d6dcff8cd08497dd7fe65d868b86d17b1adccfcfbac5076d82f6f5305f855b295a3a4597c6f70d795088304  cfint_2_13_11170-Apache_V2-db_scripts.zip
            6603b9a87237616a5c6b13b212c23309b2f41a552b5723af8a82e3b425cdf314ffedfdc8e5f9a02dc0efcead2a30c476c17cb9555801e9a8f73434ebcc741b34  cfint_2_13_11170-Apache_V2-src.zip
            99bea1f41ba1cb696899a1e60ca04c512344890e7f5b1710d4516e5c03167aa0f68c540f20ee7675e2419b01ddbfda4ef3ede1900cd552f579c5e3d6e7a3c9e9  cfint_2_13_11170-java-installer.zip
            4b7f5b6dfc42b5860e6fe514ee52c5ec94d810f7da2ef067df687872560e1a159e9f76228128841892bd541e630da33e2cfb8e5f625db97ff49aecc9ee0282c1  cfint_2_13_11170-wsl-debug-installer.zip
            9607f9b3bfaf19f51bfbac4e108a67b9ec3164446c2dd2a4c2e3634062f34e70249073525f469f98d93c8c894d493348ae198d5abc43dc9899452c49d3765ecd  cflib_2_13_11170-Apache_V2-src.zip
            033f9daf4e49eb138d713c312cd98979fd72fac2835746bab61955e3501d0d7640890f5ba8a4e9fddda6d89f11438de78ce36baf1bc93c3c842fb3750fccb278  cflib_2_13_11170-java-installer.zip
            2aef6a2f1ac1cd68561155071ae7dd76bc31985dc20dadffdb141499f7182165caf080ddd8953a6a1ad8244edac3ad2b6ba9a79b37fd288819fc949035a30b2e  cflib_2_13_11170-wsl-debug-installer.zip
            c01b70ef350419a34509bb01a915ffbdc855494e1642c112ea644c696305157819751bc5fb54e7a60967fd65998e1369c579c4802203f27e0483c6aebb2aa898  cfsec_2_13_11170-Apache_V2-db_scripts.zip
            f517c668a3f601d1ca4158d9401b456b17642ff77f405fd938c6fe4c6b4642535101fa68e27956ace78c1196f86212991588b27c24155d0d83f90f73aa501527  cfsec_2_13_11170-Apache_V2-src.zip
            c98e797ad7c43d87742c7ce7ff62051096187bf8922d7ba00958f428ab9f31dbb6f267c703835d12a6dabc4678fbf365ed1036cc5abdfed400d329bd4594e027  cfsec_2_13_11170-java-installer.zip
            cc706468a972d111a6b1e886526856f2e3cd2e8b530276a157ca75c2512c53852c52245a7d8ebe98b4e534ff48e6d924fc571e7fdf5ccdca3f06479fef8e9a15  cfsec_2_13_11170-wsl-debug-installer.zip
            715bcb0e90cfbecfc2b092d13db4c1518e147abe33cdd5e4370499df555fca6b4608c458ccbce5a9afbb1c52b7dc4af5d4d70e0bbb2ec54ad608b705e5033fa4  msscf_2_13_11170-Apache_V2-data.zip
            409914f5a2725d0d53ebabcd384782e9d5a821d0cef87f1030fd6729cb2cf097accb3ca3b2b68e22248c85c29b5fe28b71530ef4322efea29cfd08240d4d97cc  msscf_2_13_11170-Apache_V2-src.zip
            88c7d9dad1daed6d7d42f1a066d93ae8a937b343ccd0c58c2de55c5e84c3bd87ca818a09dee93b6af74ba456a43c1b614450f276d0d6465fe445acdf2ac8517e  msscf_2_13_11170-java-installer.zip
            e9f1b127b18fe95666c3864828cdaea73db5f1e9951fbbe92e71179f9992856f278121e6b32d739d6440eaa129aaa370ef56c23b3deb9b5cc81a82dc811650c8  msscf_2_13_11170-wsl-debug-installer.zip

commit dbc5cf28fb668a4c6818adc0686a4693fe4ef685
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Mar 23 03:35:51 2020 -0600

    Refresh and update rule cartridges from 2.12 versions.

commit 0c0b16af26ae8fe491d3f5568e20ef89bdb935cb
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Mar 22 17:22:44 2020 -0600

    2020-03-22 MSS Code Factory CFAll 2.13.11170-202003221720 Remanufactured by 2.12.11169-202003221625 to correct macro usage
    
    There were typos in the macro invocations in the rules which had to be
    corrected before the entire CFSec 2.13 c++2a project would compile.  Those
    corrections have been applied to all of the 2.13 projects, where they will
    also inherit the corrections made to CFLib 2.13.
    
    cfsecramloader does not leak even when it is forced to throw exceptions by bad
    input data.  Here's hoping the same will be true for cfdbtstramloader once it is built.
    All of the CFSec 2.13 valgrind tests run clean.
    
    This is a github-only release.

commit fa960c4a95673bbff5b619601e3e4270ec1ce6e8
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Mar 22 13:50:00 2020 -0600

    2020-03-22 MSS Code Factory CFAll 2.13.11170-202003221400 Remanufactured by 2.12.11169-202003221330 to modify the C++ code to make use of the new exception macros
    
    The C++ rules in 2.12 now try to rely on the CFLIB_EXCEPTION_XXX macros in cflib/CFLibExceptionMacros.hpp
    instead of copying the exception try-catch details for each and every case where I was throwing
    or catching exceptions.  The code is now much easier to read, and I'm hoping it plugs my remaining
    exception-case memory leads for the CFDbTst 2.13 C++ test suite.
    
    This is a github-only release.

commit ad5ea8e3b9ad5cda9bce3412eb014d579c7289f6
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Mar 22 11:56:12 2020 -0600

    You now have to link -lstdc++fs at the end of the library and file list.

commit aeee2b5c5942d343b2480cb380e814940516273d
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Mar 17 08:21:15 2020 -0600

    2020-03-17 MSS Code Factory CFAll 2.13.11170-202003170820 Remanufactured c++2a code to revert to debug build flags
    
    The c++2a code has been remanufactured by 2.12.11169-202003170730 to reapply the debug flags to the builds.
    The version numbers of all the 2.13 code has been updated, and the custom Build.bash scripts have been updated
    to use debug flags as well.
    
    This is a github-only release.

commit 8f4e8c0821228d6959e71f39e03703f3e03c4bc1
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Mar 17 07:19:46 2020 -0600

    2020-03-17 MSS Code Factory CFLib, CFCore, CFSec, CFInt, CFBam, MssCF 2.13.11168-O2 This is a "-O2 -DNDEBUG" build of the listed project's c++2a code
    
    The OpenJDK 13.0.3 version of MSS Code Factory 2.13.11166 took 0m27.525s to manufacture
    CFCore 2.14.  The c++2a version of 2.13.11166 compiled with "-g3 -Og -D_DEBUG"
    took 1m42.583s to run.  The c++21 version of 2.13.11168 compiled with "-O2 -DNDEBUG"
    took 1m8.715s, an improvement of 33 percent over the debug version.  That still isn't
    up to the performance levels of JDK 13, but time for a little perspective on that...
    
    It is hard to believe I'd gotten so frustrated with my early c++14 efforts that I'd abandoned
    them from 2018-08-11 to 2018-10-24 (according to the 2.11 project log.)  Most of those early
    attempts have been reworked, refactored, and upgraded since then.  I'd estimate that my C++
    efforts for MSS Code Factory started around the beginning of 2018, so this 2.13 c++2a code
    base only has about 2 years of development effort behind it.  How can I expect 2 year old
    infant code to compete with JDK 13, which leverages development and tuning efforts that
    began before 1998-01-23, relying on the ideas and skills of tens of thousands of people
    since Java 1.0 was released?
    
    The sha512sums for this release are:
    
            a581b68c99edd33807c941129aff82bad65f470e78e42e2c3e16099cff74607428ca65eedb5961359c56fe3f6346d9607aef702e5b17196c8950ae715dd3bcab  cfbam_2_13_11168-O2-Apache_V2-src.zip
            4d1e796e0311fcefbf2c16c17bdb331eb20501d6543d0800838a9e53d9b184892c7de3529eb3cf03f1f0fdd027ee1296292b00e56be3b7449c57870571e905ed  cfbam_2_13_11168-O2-wsl-installer.zip
            963b764da36fa5a0bd39760370553ee3122447eb604ba506ebd467a0761d1e6a3e66553d8fcac4fae2ab2774aa61cafacc53c4a6642c294f6a19c8daa0a1cfad  cfcore_2_13_11168-O2-Apache_V2-src.zip
            076111bc2d0571dfd6a1d5daf05ee919ee1ed0850f1c486f546854a3e82ecfa4f86b29c9eefd1f4884697ab77e3572a68b41d67c1a05cf2c6c8ac904fc36a851  cfcore_2_13_11168-O2-wsl-installer.zip
            c97dd57dfa7b3b4850f89cd706b975264148ef07ad540e89ce33ce5cce809ded8d3486cc800d538d44f098a67c34289a5482405459b5c480289df7ced5259fd2  cfint_2_13_11168-O2-Apache_V2-src.zip
            0b9fe010d2213521a166dd4f322748a1a6fc356fa95dd89486be2c2470137a918ad3e573cd04e68ba9ee15b1afdac732de078d6b2aba6eb44ab2e38c6f00c4a1  cfint_2_13_11168-O2-wsl-installer.zip
            faec2030ce5955bcdf4afe32fd239f494f080fba5c7e88e6cdf0e06b868181a69a2f8f597c23956908774287e65b2e6db19865a95fc290336035185041cb9181  cflib_2_13_11168-O2-Apache_V2-src.zip
            03aa46a5678ed9b6998d0d28eaba9ba2831f8dd79ad6e58f26aa34e26e9d4eb366a1dffc0793fdeecc3c516fde713cfda35c0365a80d303c786208158f0c1304  cflib_2_13_11168-O2-wsl-installer.zip
            70fbf46d74427cfdf417bf8bed14e36473fdb6c6a1f6839e875b4ccf8a49ef3cb60f1ea9a3c971bb0409bf6bde689878a94b1f074aec788bd0fe56959a8bd757  cfsec_2_13_11168-O2-Apache_V2-src.zip
            e9ccf1a12a6f862ce1fe6b1cd750582c61218873f54dc760d2ad4d9f722defff684cf28fef622787646b6914ab822c6807f6a6818c2d32fc559081098c92444f  cfsec_2_13_11168-O2-wsl-installer.zip
            a32cd349adcf1685a76e6823441ff49c0ec18dde5947a98f712055b4fd7e5fb2c4495962add15287c40745fe2d2acbc06b3bb131d7db49e21c6d6bb028a65a9c  msscf_2_13_11168-O2-Apache_V2-data.zip
            4496d226a919c0ad3522d3d393f581296b13d994619800f71f8483843b03e24bbb07856620effaefc6633eeec4ab61e68c8bd279ae66df690a5548658aa0e3b8  msscf_2_13_11168-O2-Apache_V2-src.zip
            08c2109e1bb2a3e3514aafe067e62edd28073ac1e77021e867985bcdd0b7ed46e7437da2e12c67acaaecc161f63a6160ecb292889e7cc408427174d0d15e9997  msscf_2_13_11168-O2-wsl-installer.zip

commit b02d0b10ab95c91747b46b99c7e32b2b8d0cbbc1
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Mar 16 12:13:18 2020 -0600

    2020-03-16 MSS Code Factory CFAll 2.13.11168-202003161220 Enable production builds temporarily
    
    The production builds have been enabled temporarily in the various Build*.bash
    scripts for libcflib, libcfcore, libcfsec, libcfsecsaxloader,
    libcfsecram, cfsecramloader, libcfint, libcfintsaxloader, libcfintram, cfintramloader,
    libcfbam, libcfbamsaxloader, libcfbamram, cfbamramloader, libcfbammsscf, libcfbamcustmsscf,
    libcfbamcustxmlloader, and msscfcli for 2.13 c++2a for this release pair.
    
    My sole goal is to see what kind of performance difference there is between the factory
    compiled for debug and the factory compiled for release.
    
    This is a github-only release.

commit 8bac59c610328b57e2099d00a967d05811cb5772
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Mar 16 11:52:56 2020 -0600

    2020-03-16 MSS Code Factory CFAll 2.13.11166 Manufactured by 2.13.11165 to use both static_cast and dynamic_cast for Obj and EditObj buffers
    
    The C++ code now uses the static_cast inline method getTableBuff() when it is
    only going to access the buffer of an Obj or EditObj in read-only mode, and
    the dynamic_casting getTableEditBuff() if the code is going to be updating the
    buffer.  The former is only safe for reading data; the latter ensures that any
    subclass method overloads are in effect and can therefore be used to modify
    information.
    
    The sha512sums for this release are:
    
            95efe45d231d53eaacc96e83b4b56fab89e8dcf61e591f2946162a35e043ec1284215c39b503b4b2bbf7778c4726ffa5261487f4a68f55f6a26e87b011471e04  cfacc_2_13_11166-Apache_V2-db_scripts.zip
            6d2904d8bad033d5bba1c24adf60e6a7011c5ff866103cd9e2fa56c97643058205fd2b2d4c93b7ed2c28e6350bd786eedfba0e76d1c1b726166153454f447201  cfacc_2_13_11166-Apache_V2-src.zip
            273421cb13d0f8c8548ae4de779c184da03ca5c0764d2cab9658a875ebf1b64e12acaa50e3b1b4c70884ec2491d23fb34cab2cbab752beea05b3d80b6096e575  cfacc_2_13_11166-java-installer.zip
            b1e6d388a876669443dbed9cb5199b4f86fdf42b6326fd5563fd30b5b7f1d45cb92d3eb1fe46f155961a4be27d67660938bcc70f046c488477507b74c387bf7f  cfacc_2_13_11166-wsl-debug-installer.zip
            2b7b900fbe5ec19694ea4c2a60408e71be1fbb981c804a3cde2e9cce32ad3b09fe071439f35fbcb050455d0e3d1fd94d5328831b6aa954fc6cf40fb901c3d450  cfast_2_13_11166-Apache_V2-db_scripts.zip
            93fb8606d4c9cbc637cf80490271d8d2201d6a6248cf819221e80a4eee74cada91f59fd630bb8741093142716446e8edc881d62b9b6dc914a482e2260dac4ab1  cfast_2_13_11166-Apache_V2-src.zip
            b52af7c8d95940f90b316733f6887ea8fb2858481294b6e498b246d100fa39123698d9747df5ef1a9e21d0b061dba4f5100df8799333a79297475f257257486a  cfast_2_13_11166-java-installer.zip
            e8ada140201a22c892388c2ad0e5eb23183cc3b804877619b400cbd661be27607a716f32c4ed92fb0e4a5e0d194421d996d4da5b0e0e2513373d7ae2798a00c5  cfast_2_13_11166-wsl-debug-installer.zip
            b7605e780a1adf066d244606a8fca2ea6527d365bd53f182aaa50bd5c48d79814a0aeae6811f60c546c83d0b7900e9f843f58006b98278fdc77592aff541aee4  cfbam_2_13_11166-Apache_V2-db_scripts.zip
            34e3fa080c2c94e3ecd41c50ebbb536e6a3cfc9177546c6f0983b55223316683ac3b7a189eb1d44177bdf610045f2b269558681cdb13e96380374f928d65683b  cfbam_2_13_11166-Apache_V2-src.zip
            76781cbe00ad319a989f3331d9ccc1e7dc13de99801fc59860113ec43a9f2e387d8df91fb11732e51f16201f656166e63ce1f8b11dbfedc7179756a278151fb7  cfbam_2_13_11166-java-installer.zip
            75a4367860e3eb058e7eed43ca4609f52547e1c02f864024a8c2c31fc8edbbfeb62e2a6f654b4fd410c08b8d4594808717ad6900f286327e4e99373e78937878  cfbam_2_13_11166-wsl-debug-installer.zip
            f0943353d415645ea81345015a6ec1c216319cd412e6df0495c7624d2053fdc4fccfc0071063e2caa643f2c062feb12f035ac13ef593b68e90a6018559f54ead  cfcore_2_13_11166-Apache_V2-src.zip
            bd700f7e73318d621a07f69ac93cf7b36537c336707601a20b28acce0507221b629213e45db748c9d10c1778042ef5ad2f3b0fb228403e8c0459fdbf2ade3979  cfcore_2_13_11166-java-installer.zip
            df8ddf1d8fc19057f96c940c9dfd6b428b87576767e7eb69087f37dafd4b937ca96bc8f7dde514917d64bc3cb4c559c5df1417a05ae53f7293030d640d244af9  cfcore_2_13_11166-wsl-debug-installer.zip
            03f58ab314146dacd1eba80734b30ddb9e509cb4185e70f702254d2b2812b46c5a494564a4977cbbbf27d15d6241ae6f1e21311e48c1ea6930babb38486273dc  cfcrm_2_13_11166-Apache_V2-db_scripts.zip
            173a7bf754f070d28e15cd4d03f26ba5c93fd13a509d92049e93e600fed2bdaf4917b85ada75a7c3b083974b8375f27603a28f53f77ed43eb3517141f673a8fa  cfcrm_2_13_11166-Apache_V2-src.zip
            a2a6c9ca948c4dcd30270d7a7e7f54269ee63d98f758acd471a7ee52f007da678e9868a3d08aab135cb30c1ed838e619a9bc892fd2566680cfabb4278ac91624  cfcrm_2_13_11166-java-installer.zip
            623e74a7895a88ca6b2fccd43de8a83610f7e2ac93d369a60134080a97998fc0e115e031c56edb21d0b4aee693a05671b8f5052b5f22749a261d0bf7cd89df35  cfcrm_2_13_11166-wsl-debug-installer.zip
            7cb605b260821dc1fe717c5144ad3c5eceabccdf41ccd1790a4273129a175c403d068c5f3a2062d3aaebc5d5bfa1f9f4ed26de8b323ce6b3730e15cf419e72b3  cfdbtst_2_13_11166-Apache_V2-db_scripts.zip
            b9e44c3852cf36e114d39b462caf641e054b77fc126e4fb7b6cfcb8f394345c5e59216205a4d720f7ef31458afd8bec7eea888eac055b0adec4eb80b9a19be95  cfdbtst_2_13_11166-Apache_V2-src.zip
            f147e0f5fbdd423f56fecf9f9f4eecebaada51ecf9bd4655988e392f644d6f96bd52b0d07341421d1e4aff037e6fd0b6a6050ec7f419f2658b9ffb1a1064cfe9  cfdbtst_2_13_11166-java-installer.zip
            bc1ae1bbc31d789631d4a51c4e89ef468cccca84706ffdf7575c47eececdab0b0de3e23ed693b875cf4d3029e7c8b7c7ab1aa61c606916afe002551d7c62744d  cfdbtst_2_13_11166-wsl-debug-installer.zip
            e11ed94292481c6728a956e361800a797217997b5dfb518313ff4a35fc9dc8e55465a7779cf273f19df40ac95ddfa1ab760c3f436d8ed43fa3454b35ebb61461  cffrsw_2_13_11166-Apache_V2-db_scripts.zip
            9adc635084ee48152a7b07b5251ce24a921aa2f0b60dc46c51cdc38da3be49b6e2517aa6214697b1aee8d3a70b5b83d821506ba0feda13566d52aae9b980d8da  cffrsw_2_13_11166-Apache_V2-src.zip
            7a81d0dff5c905e0294a5c4228740c322be6cb87c9f0417a64c1fe0bde53f7e8ae9bdf56420a766b30f70ed7a7e79c766de3702a1b92c3b7d29cb295a3b2186c  cffrsw_2_13_11166-java-installer.zip
            589de87d13d9485dff060df30325abca7b4eda1464037880e22b0e050aea91f00d00c053c22b828e9d26e28187b2e01b5b3fcda268346efd56ae2aaf82994f84  cffrsw_2_13_11166-wsl-debug-installer.zip
            f04bc61c9259b08fdc3604570d0cf25e17aa6ef93d92ac969f3f4d7e4388f5a331565b00416dbed4e2128fb82067a09e2f6d02b086476fa4b668ba3310b550e3  cfint_2_13_11166-Apache_V2-db_scripts.zip
            0d7dea92ff54724aa1197ac951200673c774554e2b65330421979c3942f6182c3c6e54ceddc417049ba9b924266be790b8f88186fad3f66696ebb50a955b9ac8  cfint_2_13_11166-Apache_V2-src.zip
            e877ab117574aa37d97a712520939703abb7df73201361da1dcaddd388e7f0df34f7fc7d6e43611cfb8a35bb7e0a8d24a7f163df236a1aec6820c782e4965bb7  cfint_2_13_11166-java-installer.zip
            d93193e6af8e45312976e97e384f0e0072907d4eb74db5d05d82b7666e7fe5e17285afb1d40c7e2582f01f44f907bcc37906df86beb7824ef5b9500ddb43d8bc  cfint_2_13_11166-wsl-debug-installer.zip
            5fb9141307b41c891f479acdf49f5c97ebf77fb1cb90f016dda9114cf28f23af14b25ec6d5c91071d0eae52fb372e3ad2d8ad97a17ead74d19d5cf46ec42c644  cflib_2_13_11166-Apache_V2-src.zip
            76f33aa19e64c8c7299ecaf9d21c2965276736d17353fffc92ce5df5d284fac45ee26706d1aa06d3cc87b3e61efcc4804879107139ffa978fc9e7a65bce2317e  cflib_2_13_11166-java-installer.zip
            043649aa366e26971b77276ded3d5c3b11e0755d32876c0e59f0d5a8eebba7d2d619f30d49b2da777f596c4b8607fd4f0ed5d624aadea8576382a516a183f91a  cflib_2_13_11166-wsl-debug-installer.zip
            a52b841a7a4dfccb08b611aae6da46c380212b0ceec041eb6a605e3f46c14e853f24f287a9df63ca49597420e79ef40302d249587b312a56717e257635daa5af  cfsec_2_13_11166-Apache_V2-db_scripts.zip
            3b7a8d5368532d1d07f90c8c6cb9c74d21b19c7c352292403f822093a3ae6a2a88edf14535e6ee5fce5a3c295b93e6ce7ba9abc2cc488fe2d624896297729c0d  cfsec_2_13_11166-Apache_V2-src.zip
            990f8eb698ec13ce5062087dfba6de82d5f0da713b6416ec26c6b0b6edfb4eac3c8480a1c80deba7447c181ad37c0521282604852ef77c8c88762ad96e9571ae  cfsec_2_13_11166-java-installer.zip
            5f2c17e488614940646fb596e9fdf320dd2fb8fe30226597596bded7fd87d66f26a6ee137f1225382f617303b9791769fc8df6721b1aae1f4221f29be5d8d2f4  cfsec_2_13_11166-wsl-debug-installer.zip
            e83dbb7df647f39889e75365a5d61698dcc28ebc1d145a52606ff9d665347e2d8bca7610f327dc9f9b4f5a56e667c529b9e7e3e169500c794d70bcf53bef2c8f  cfuniv_2_13_11166-Apache_V2-db_scripts.zip
            178b3be2c8f55b4be35053be273ce6999695083c0d24448f96f79bd613a98afac39334000afb9319f009932ec155b43e4fb243b4fbe1d0453ba10381d9039fc0  cfuniv_2_13_11166-Apache_V2-src.zip
            4bf20d32052014aa0e9547c5e9680d1d21d8b7a60cee0911baf04c94a01d3627f948c69f0fc7896b3702a7120c9f11675c4dcab4a5181156c2e98119605fe4c0  cfuniv_2_13_11166-wsl-debug-installer.zip
            a32cd349adcf1685a76e6823441ff49c0ec18dde5947a98f712055b4fd7e5fb2c4495962add15287c40745fe2d2acbc06b3bb131d7db49e21c6d6bb028a65a9c  msscf_2_13_11166-Apache_V2-data.zip
            258196fef0a4af9b69b03fd5d20b0feebc104d2082dfebb905ca53cf7ca0ddbf8c4d779a4d55615216c47852b0fbf84ffef07d27c84763122f05dcc29a411182  msscf_2_13_11166-Apache_V2-src.zip
            49a2699f491f5e2505756b331107cc7be1d8b45cf866fb5efa18a9bd7eef22617ef5221f7bcbd88631612f85d09cc7168adb740a0fd64477325b6af369a297ed  msscf_2_13_11166-java-installer.zip
            a78e06b3b61bafcee010712ba46e48b2a8272052fb1ba4b95a439dfd112f1ce72fe393b0c1c3e7a438433f71b714b300ee54efebbee6a0f0c6ca86b8fbd42c01  msscf_2_13_11166-wsl-debug-installer.zip

commit 6d15ff5d60db1259d1bdca969fb589fe2ffdbdb3
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Mar 15 13:20:02 2020 -0600

    2020-03-15 MSS Code Factory CFAll 2.13.11166-202003151245 Remanufactured by 2.12.11165-20203151000 to ensure the Obj.hpp and EditObj.hpp always include Buff.hpp
    
    The Obj.hpp and EditObj.hpp always need to include the Buff.hpp for the table object,
    as they return casts to such instances with the getTableBuff() and getTableEditBuff()
    accessors.
    
    libcfbam and libcfcrm are building at the moment.
    
    libcflib, testcflib, libcfcore, libcfsec, libcfsecsaxloader, libcfsecram, cfsecramloader,
    libcfint, libcfintsaxloader, libcfintram, and cfintramloader have been built, as has
    the Java 13 code.
    
    This is a github-only release.

commit 5fdf13fe3ca5e2664bce242b8e63075ca4daa2ba
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Mar 15 08:47:27 2020 -0600

    2020-03-15 MSS Code Factory 2.13.11166-202003150845 Remanufactured by 2.12.11165-202003150800 to implement fixes for inline buffer access macros
    
    The Obj.hpp and EditObj.hpp can use the buff member directly, but the Obj version has to
    check if buff is NULL and invoke getBuff() if it is, so that it will be populated by
    the implementation's overload of getBuff().
    
    EditObj is constructed over an Obj and clones its buffer, so there is always a buff
    member for an EditObj and it does not perform the NULL check.
    
    These changes apply to both the getTableBuff() and getTableEditBuff() variants.
    I was getting seg faults in my msscfcli tests because of this bug; Obj.buff was
    not getting instantiated automatically any more.
    
    I've also made the changes to have both getTableBuff() and getTableEditBuff() variants,
    and use the latter only for cases where I'll be modifying the buffer.  Read-only access
    can safely use the higher-performance getTableBuff().  I hope to see substantial performance
    gains from the elimination of hundreds of thousands of dynamic_cast invocations at runtime
    that were occuring whenever an object's attributes were being read.  This should be particularly
    noticeable for the factory itself, which is a read-heavy process after it loads the knowledge
    base and model to be manufactured.
    
    I've decided to postpone the changes to CFLib and will just get a build implementing the
    buffer access tuning out the door instead.
    
    This is a github-only release.

commit 7672c1c6fef8e382227aee69fa42adc4a6b8a23f
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 14 11:11:52 2020 -0600

    2020-03-14 MSS Code Factory CFAll 2.13.11166-202003141111 Manufactured by 2.12.11165-202003140945 to prepare for a full production build with one performance tweak
    
    I've decided to do a full production build stack of 2.13 with "-O2 -DNDEBUG" instead
    of "-g3 -Og -D_DEBUG", plus one tweak to the manufactured code. I now use static_cast
    and inlining to optimize the implementations of getTableBuff() in the headers instead of as
    virtuals using dynamic casting.
    
    The underlying buffers no longer rely on factories, so dynamic casting is not
    required unless you're going to be invoking a destructor, in which case you should
    be destructing the base class pointer member without doing any casting.  The destructors
    from getTableBuff() are not valid and would leak memory.
    
    I've decided that is all I'm going to do for this build.  I want to see what kind of a difference
    there is in msscfcli c++2a performance with this tweak and a production build.  Is C++ really hopelessly
    slow compared to Java, or is it more that the Java code has been tweaked and tuned for over 20 years
    while the C++ code base is still immature and incomplete?
    
    libcflib, testcflib, libcfcore, libcfsec, libcfsecsaxloader, libcfsecram, and cfsecramloader have
    been built so far.  The valgrind tests for testcflib and for cfsecramloader have been run and
    passed.
    
    The Java 13 builds have been completed.
    
    This is a github-only release.

commit dca90ff7225c68d5a46528429f929184a759126e
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 14 08:23:56 2020 -0600

    2020-03-14 MSS Code Factory CFAll 2.13.11166-202003140825 Prepare a temporary production build of msscfcli and dependencies
    
    This code was manufactured by MSS Code Factory 2.12.11165-202003140730 with a
    build number of 11166.  The custom code has been modified to specify a release
    of 2.13.11166 instead of 2.13.11164 as well.
    
    My first order of business will be to build a production version of msscfcli
    and its dependencies without changing any of the implementation code.  I'm curious
    about the performance and size difference between debug and production builds.
    
    I've modified the cplus/BuildXxx.bash scripts in cflib_2_13, cfcore_2_13, cfsec_2_13,
    cfint_2_13, cfbam_2_13, and msscf_2_13 to specify "-O2 -DNDEBUG" instead
    of "-g3 -Og -D_DEBUG", but will revert the changes after my production test build and ship
    a normal debug build at the end of this release.
    
    This is a github-only release.

commit dfbaa0356f54ce831651bb21daad78e2e262b05f
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 14 06:23:57 2020 -0600

    2020-03-14 MSS Code Factory CFAll 2.13.11164 Eliminated 262,883 lines of factory and pointer management code
    
    There are 262,883 fewer lines of code in 2.12 and 2.13 projects since 2020-03-06,
    due to the removal of pointer management code that is no longer necessary since I
    switched most of the keys in the code to inline instances instead of managed pointers.
    
    The Java version of msscfcli takes 0m23s to manufacture CFCore 2.14.  The c++2a version
    takes 1m44s, a dramatic improvement thanks to inlining the allocation of the core key
    and buffer objects instead of relying on factories that impose virtual method overhead
    for every allocation.
    
    The C++ Factory and DefaultFactory objects in the lowest levels of a project have been eliminated.  Most of the
    key instances are now inline instances rather than pointers to instances, allowing the C++ compiler to automatically
    deallocate them up when an exception is thrown.
    
    Constrution of Xxx[Table]Buff instances is now performed explicitly, although those are still pointers that will have
    to be properly exception-managed in a future release.  For now, no leaks of buffers occur unless exceptions are thrown.
    
    The PKey instances are mostly inline instances, but the Obj layer still uses pointers to PKeys, so those will have
    to be exception-managed in a future release.  For the most part, it is the Obj and Ram layers that will be responsible
    for exception-managing the PKeys and buffers.
    
    The cfengine rule cartridge has been synchronized with the changes as well.
    
    I've disabled the stripping of the c++21 WSL Ubuntu 18.04.3 LTS amd64 binaries
    in the 2.13 cplus packaging scripts.  I now have the bandwidth to upload full
    debug builds.  I don't have the compute resources needed to do both debug
    and production builds.  I leave it up to anyone shipping builds of Mark
    Stephen Sobkow's projects to do production builds.  You'll be able to run
    valgrind test cases with the delivered code now.
    
    The sha512sums for this release are:
    
            3aaa7125111040ae6e4f2f43abd145ef49aaa172df5073f313bffe68fc78442752fa3fdf33cc1288e4cc290827cf3acde0f115b6ea281829a05e9e95adea988a  cfacc_2_13_11164-Apache_V2-db_scripts.zip
            873634e06029fe47d4d5b2207e74d123c77f8c5c6825d8da035720ba54241664086ca887228ef952bbe77af23c35744843e5b34392c163a1597a6c4faff255f8  cfacc_2_13_11164-Apache_V2-src.zip
            b67a4ba845f0b23fe2d933ca846c5e2aebb64f568ddec77fe4906188bc81340a7749406c0e4e60d4afeed90a4ac7462a4d890e663d05b426734a0600b1d7ae3b  cfacc_2_13_11164-java-installer.zip
            f9ed5efec30516f4b95bcc3c6b0ac26411054719e70480b3efe7416e2dd4c0a9ea9f1e5bdce833b780183764ebc75bf1ba9301ba389937adbdb8c38c4718aabf  cfacc_2_13_11164-wsl-debug-installer.zip
            7b111ad81c2691240c07b379c6c0eb9bf43faac24e83d97a0ea4db33cfc39a51d2d2f1bb95ff6b9b347cf8dfa00d168deeb18c0c7b9fb7d5137fdcaca4d14934  cfast_2_13_11164-Apache_V2-db_scripts.zip
            c7c7782f75b32e5f78462711aa4f0097f932cc78b7a60f23062934e1d0b9d86e3a122b83a2ba0cf6bcb75ef2f7410d0475fa93bb0a7aa49e5364b72a61175744  cfast_2_13_11164-Apache_V2-src.zip
            362d2371c4cb25557cc8ee11bedc4653d917fd476b133a3ad62651a806c1fd4bdf6887006252810232885e2c678665b9a773d819ada5feface1087b45ca7d0d3  cfast_2_13_11164-java-installer.zip
            0a9f81793c10b22e4bbb27fbaff03a2f977afb4637da95fd0fd8e2f9204aeff68b245e55fca5a181b3622a5c50d2107b5c36191bc71fdcf9a08116f75183754c  cfast_2_13_11164-wsl-debug-installer.zip
            fb5cbd40f477a17e24ff4441248592382f6fe932fe4eaf8ef77b9d9322d39a6b45406b949921e8022e17d2364727bd46428aa8441a0f2c68b085fe932a89e5ac  cfbam_2_13_11164-Apache_V2-db_scripts.zip
            4b61cc67c5dfa67cd4d38ecb033dcd30955fb83dccec0861a70c116ba8cc60b0915105dc580b4d8ced08ebca74bbe3cf268976d585e69d4bdf6af7e048db43f0  cfbam_2_13_11164-Apache_V2-src.zip
            ce75d90ca1c06c393c52a659f5ea6fddc4a97a81ebc2f5d37ff70622fe6d159ebba1d92df83fbc04d365748ec1b306ada641f1e7eaccad772a83d4c0f752e290  cfbam_2_13_11164-java-installer.zip
            490c437d1651ad50bf371771c5f7d89fb548ef365962027cb6dd6ad978abc004a990469665288b3969718aa0e2237518615049658eb77674f9cae41691efe720  cfbam_2_13_11164-wsl-debug-installer.zip
            0a34775e4c6caef3b34ba2ca12a5df1d80bbaaa622d34d92ff2734fb0326110af09ec570f753e4ce593eb82dd5c1b321bdb3d8d1106c6ec2344349ad502d280e  cfcore_2_13_11164-Apache_V2-src.zip
            22104253d34a9960c659e7a590452753ee7d712a3fab22d6bd4d089911ad44c2e95783fee5be440d1fe61d22c86274e20771d7988a7089bcafadd9ab54ea2ef7  cfcore_2_13_11164-java-installer.zip
            c9780eaa7700d925d75837d07c0e6dde89acd0b42be47e68823a60b9625921c0645a0ec1666c24b116033312d7a7126271eb7657ebd640bae2721c71a1d16095  cfcore_2_13_11164-wsl-debug-installer.zip
            8fe89fa66ab0ab49bcb03d5d7bd6dfecd3f17af4796f2d6b37b4d0cbdb48fbb8508db591392b8e12d44a3e4bc514a72687fe84ab6a9d3058db25cd6044d78f9b  cfcrm_2_13_11164-Apache_V2-db_scripts.zip
            b5da02175988ba6efbf0849b34b57d67b6a7d59f54ccb6807e9ee3c8774ca76d1398eaf2ce33f673b0469b47221d9feb4db1f98eabc838ae20a906fc00b5dd32  cfcrm_2_13_11164-Apache_V2-src.zip
            3d8e8513a37d7b7a3947596f9801483655b2b8a221a3ee996e51fa31e158f0c4b771f109c7636c41a5cc0ac5bf429d64ede9d77ef508bf2825512baa77f5cf64  cfcrm_2_13_11164-java-installer.zip
            d25054d7f1537bd79cdedad686627fe1a8b78276cfabcf8621dcad2573078bc8b808f346d6bf2355b07a3754d9ccb462b4dab341296749db0db84b080edc8dc8  cfcrm_2_13_11164-wsl-debug-installer.zip
            26d1b23e40b440a33f7dc34e4c1db36783ee46c6944b0cc0fe7fa33c81a4ddd9657ea36d04ed666da3b845606cadb5d1642f5f1e4246ad39ec9c1b3f2b3756c3  cfdbtst_2_13_11164-Apache_V2-db_scripts.zip
            df58086bcf04571225aaf6c0247172a866d8194e0655c9759eae8eb314759b606533074802a98fc3bebaf22a05bf15468dc3ad7856cf3f6b600889828838e787  cfdbtst_2_13_11164-Apache_V2-src.zip
            152aeaf72d54febd7acd7485f93b797c81860aa5fc08ca07f0db2c4865bb011d59c28d351a86950fa8f907b9db351d3b525e02a5ab3dd833116ee31c72dc6dde  cfdbtst_2_13_11164-java-installer.zip
            7400bcdf896b34e864a0ee3cf7212e55e1716bbf939dbc711952b9a1119a75a21c8acfa87e37ab4e3a5b374aa78a85c5b67144081ca324de31752f1380559a86  cfdbtst_2_13_11164-wsl-debug-installer.zip
            558dccdd421c99514d93e2142f96a26da575d60258aa0869a81c40b089d9f363b4527d2c7db29ad82cc13e43fe5c3aa5e5776bc439b02a66f5d63318df2edc6a  cffrsw_2_13_11164-Apache_V2-db_scripts.zip
            e942288e2cbc8b5605bcd84a2fbee1962454152df05533fd1777ff1e9f1d6cbadef1d045eb245863895e639b3bfd4c929331b8fade7867b5ce6a7fe13b4759c3  cffrsw_2_13_11164-Apache_V2-src.zip
            ebcbdb51b479c4f1d3dd9f4b0143bbd8986918c6418c4ae675caf09085cc5b46cd6e5b6acbed61c3a0308fcb0ba62cc5a883f67be9e23b08867267329bb10731  cffrsw_2_13_11164-java-installer.zip
            582db1ac358776583be7d427e42c0b71b3951d28adba98fc4f13f5361d8379494d1a5400253870415bd1e15fa172b2d75665f507a9d522392f75f71104d1a080  cffrsw_2_13_11164-wsl-debug-installer.zip
            79dcd23f92b66229354ff6993b2a5ac8ca859f656e9e38ae8484ceff39bceb9a6a9d43a41fbab7a85c41faad7cb2b02465ed062a603954861a5cece94a4b5310  cfint_2_13_11164-Apache_V2-db_scripts.zip
            2f4c198a47d462421ec9c56505ca182f5bdf3023340f994b2cf3ea156a698e263cb15ff411c19fb5734f1d49f86be864563d478eb2df3b2948c0cad8b2776836  cfint_2_13_11164-Apache_V2-src.zip
            eaf541fdc8a6ba99ad2f9f0bde18bbecc2d2c91eadf46973c4e1eb12c065c3f3a3d1e91e081fad6ccd26cb1f5b1ea2b331888b203f9bbf1b53e0e26e07fbcfb3  cfint_2_13_11164-java-installer.zip
            3eaf96249e829fcc22713036909140a443198c15d29df0820d398a6fc1a5e361882012eda43965285bd8e57ef0ea6aab1867cad647b40dbc2ba9ebc734bbfd56  cfint_2_13_11164-wsl-debug-installer.zip
            60e94a430bf0469f0e52de89df1cf00bd95d94fc699c0a8f3b961bfb4e1704405a5b5a795fda80f6d63db626846801772714ce826dc17c5ecb9df29800d30804  cflib_2_13_11164-Apache_V2-src.zip
            fb30a14aa789093f610af99363a5d6a20fd82f902aa4ff9489862943a81586a3e4270f34cf750de00e54a71d9e46690fb582c3fecc42796da345ee84f75e6f19  cflib_2_13_11164-java-installer.zip
            16be08742c698e5d80538f64fb5530c4ca529802bf8d6702bebab7456211d472a7a4e6e9a2941263ecd05b7f4bba18af741ab622bfd6959c4c894cf6d99e9fbb  cflib_2_13_11164-wsl-debug-installer.zip
            8b9e1fe8354339a57ffec31808bcef168d92ab6fc7edb293608de1ccda46a23666abdf64970fd6f6ef2fdc2077702e27bf2a47ea56d53cddf30d9ea665214761  cfsec_2_13_11164-Apache_V2-db_scripts.zip
            ec71cacb10932f87c9c0d7ba0c1ea9ac863c07238cfd812071e351af27f38799e08bc5795f310b5339384c2c8b4b93b1ad0fb33c204bf5ee1826da20669af407  cfsec_2_13_11164-Apache_V2-src.zip
            e33e21c6e513d7f4959606cbd478cea83cf55fbf5029366272764f77d2c7c2f4d56858cb516cb2cc1ef9249949fb6df39daa8459d61322eea8cd6450f791794a  cfsec_2_13_11164-java-installer.zip
            73c0a70b03b5f46d6e0c88b63cd1ca7f856b718f2a8863d129d087b7c65a748a81f569212971deef8af2480a44c0cd417ffb27c4e92fc3eb51a908d549598ef6  cfsec_2_13_11164-wsl-debug-installer.zip
            997a8cdcfcb9d4367a2a197c24c8f75d4b37b249e77550ca32752abf4f5a7e447193a6db1d8883202dd06863b4bea87268ffaee8fd663d7a47893483853a2de9  cfuniv_2_13_11164-Apache_V2-db_scripts.zip
            30563ce42930ed00e4d05902c07a28e414b2a44ecff012839c4ed7207a40e29a838dad298676b15da13c34b8e6a1a2efee64ad61550f63dc600819e52cb1c002  cfuniv_2_13_11164-Apache_V2-src.zip
            9974b135d52c3288949aace7e515a9d6b4495b2fef701f8bf07b2a10d436c26d4ea30e96ad1bf1ecffec19c2984db086582f798b6198befe23db11c3dffc8e85  cfuniv_2_13_11164-wsl-debug-installer.zip
            a32cd349adcf1685a76e6823441ff49c0ec18dde5947a98f712055b4fd7e5fb2c4495962add15287c40745fe2d2acbc06b3bb131d7db49e21c6d6bb028a65a9c  msscf_2_13_11164-Apache_V2-data.zip
            1d243a04dbcbef9a05f0e357f24ab55322c61dd44847c1f7e6bdf010ccde7764afda34717d6222b4006c393fe05d35bb319725dc41c1367bdbee63978b657b45  msscf_2_13_11164-Apache_V2-src.zip
            ef6be2153991edf48ca9c86adf2eff35b518fcedb3a34855f1e32b079d8d514e9060e824fa96aaf2ee5dfe6220541c9e5b2092c4b078fc3427113e49bba744a8  msscf_2_13_11164-java-installer.zip
            0c92927fbf18ce23f5e0be6bba8fa4bde3dbbfe1287ef08598f29687de56069f272af32faab8d48d1e80d1c1a179b54bbbba3816fb3ed1d8fdb6448e71cefada  msscf_2_13_11164-wsl-debug-installer.zip

commit a7118952aba3b1be9025bd08ac6c12bc10e43a6e
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 13 20:41:19 2020 -0600

    Refresh the knowledge base from the 2.12 cartridges.

commit a49e8054a8a1b4fde15991be63dae1ce58aef5c3
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 13 19:27:21 2020 -0600

    Don't strip binaries for shipping.  Leave the debug symbols intact
    now that I have the bandwidth to upload the larger binaries that
    include them.

commit 2d5ede4d1a9abfe7743adb99026dd3f549f85fdf
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Mar 12 18:18:59 2020 -0600

    Make sure to populate ChangeLog with git log output.

commit ce9facc2f73afe592d4abf5ff5700253406ec9c0
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Mar 12 18:06:55 2020 -0600

    Sanity check.

commit b6654c4616605def9c0201b617b3fc1694cc16a8
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Mar 12 12:35:00 2020 -0600

    2020-03-12 MSS Code Factory CFAll 2.13.11164-202003121240 Manufactured by 2.12.11163-202003121200-BETA to replace C++ factories for key and buff instances with explicit construction
    
    The code for this release has been manufactured by MSS Code Factory 2.12.11163-202003121200-BETA.
    
    The C++ Factory and DefaultFactory objects in the lowest levels of a project have been eliminated.  Most of the
    key instances are now inline instances rather than pointers to instances, allowing the C++ compiler to automatically
    deallocate them up when an exception is thrown.
    
    Constrution of Xxx[Table]Buff instances is now performed explicitly, although those are still pointers that will have
    to be properly exception-managed in a future release.  For now, no leaks of buffers occur unless exceptions are thrown.
    
    The PKey instances are mostly inline instances, but the Obj layer still uses pointers to PKeys, so those will have
    to be exception-managed in a future release.  For the most part, it is the Obj and Ram layers that will be responsible
    for exception-managing the PKeys and buffers.
    
    The cfengine rule cartridge has been synchronized with the changes as well.
    
    So far, CFLib, CFCore, CFSec, CFInt, CFCrm, CFDbTst, and CFAst 2.13 for C++ have been clean compiled and linked.
    The valgrind regression tests for CFSec and CFDbTst have been run and passed.
    
    The only projects that might cause problems are CFAcc and CFUniv 2.13 for C++.
    
    All of the Java projects have been compiled and are ready for packaging, except for CFUniv, which remains a work
    in progress that is very low priority.
    
    This is a github-only release.

commit 681089c9a345e4e7a574d148d6764111f5ea10a2
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Mar 7 05:10:12 2020 -0600

    2020-03-07 MSS Code Factory CFAll 2.13.11164-202003070515 Prepare to work on plugging exception leaks in 2.13 code
    
    Prepare to work on the next release, which is intended to plug the memory leaks that occur
    when the 2.13 code throws exceptions.  I don't have the manpower available to test those
    changes, but I'll do my best to ensure that memory doesn't leak from the manufactured 2.13
    code under any circumstances.
    
    Testing such code would require running applications under a debugger, setting breakpoints
    where you want to perform a test, and forcing the debugger to throw an artificial exception.
    Such testing is rarely performed outside milspec environments, though - they're about the only
    ones who have the budget for it.
    
    This is a github-only release.

commit e8bd2229c040c460ffaef55fc70a65e40b424b75
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 6 16:11:26 2020 -0600

    2020-03-06 MSS Code Factory CFAll 2.13.11162 msscfcli C++ now ready for production use
    
    msscfcli C++ is now ready for production use as it no longer leaks memory unless exceptions
    are being thrown.
    
    valgrind now reports no direct or indirect memory leaks by msscfcli C++ while manufacturing
    CFCore 2.14.  When I first ran that test a couple of months ago, the program took over 10GB of RAM by
    the time it was done running. It now takes a peak of 307 MB.
    
    None of the 2.13 C++ code should leak unless exceptions are being thrown.
    
    The sha512sums for this release are:
    
            03621f7e3d764b41fda1cbf9845b26dfddcaa585d162a1005fbd75f742c574122687970189e407b4b6fe5485e612fa6007a74470275578f2286ad7df73877949  cfacc_2_13_11162-Apache_V2-db_scripts.zip
            5c2e0455853efd7fa29802395689c48f466b3acfdc576e5e7144158182a420aad7634e1bbfaa7f18dfd234b7305b5a8a988cdda5c7d725880cb0a23d7c6eb2e1  cfacc_2_13_11162-Apache_V2-src.zip
            07e61941e1a89915416a969284b9b07b3b47bb06b6ff70af4c66e2de19e760a8b7f9e3432bf35efe8cd32222d7c118e580558cfd610ee3453b273e7e4f79acdd  cfacc_2_13_11162-java-installer.zip
            aa3fc2a34a556b2c76ee9ed8ca74ead8876f1b669e34cbab3614b2ef68415126f1be838e8eecc4dc178d17fb382f11c9204cc81445dd319db8c86ebca6cb0c43  cfacc_2_13_11162-wsl-installer.zip
            2c9e5a7d9b6356dbd4d410ba957ef206a74cd4aff767a40b20343d994da4dad5a514b648f985f3a549d9e4697e3da1a96a6da48f2c2b0277b235ecc3ab343f7e  cfast_2_13_11162-Apache_V2-db_scripts.zip
            de9df54ac235c0e8ea2e1b2cedd3fa99178c5e50a1b8f103d665afb47e6c518488d930f20ff6d60f4561c46d2ea27e4b48dcdaf0956bf76cd769000c008d8928  cfast_2_13_11162-Apache_V2-src.zip
            fe6b152f657fde17ce5b5c3b2fb937ef04476abf88f91b19546512f03be37041080ce8fa3226114316c20193dbfc93e417bcb2dee2f12999401d55f8d49824ea  cfast_2_13_11162-java-installer.zip
            48e846469025559a4397ddac9515e5a57d8edda991c650666f51305ae250e353cfae3f07ad13dea7d857ca768ea07710adb7fc1d58b25afa548d5b100ccb7329  cfast_2_13_11162-wsl-installer.zip
            fac92ac057a3be1188c4d2d34f8791f187369141fde1d62bc6460c3ab0424e5002a209f608dc2ba16843d760d4db574bf4337b24d32dee8ebb0b8d2c3c08d47b  cfbam_2_13_11162-Apache_V2-db_scripts.zip
            ad989fd88506e58b200684135ac79344de3da669c35651977e84f63bb04a13916aeed640e012deaf6b0b4fa7e7551a259cd66d49fb8ee808d803b5e54e52eda0  cfbam_2_13_11162-Apache_V2-src.zip
            182579d2480ddca1bdf6fef759a8dc21aa227feeac2c825ef20fe24b4b3808e81e32238667a57631ec6724478bc2ae2d6aeab8c6e65b8005279360f5d985fdfe  cfbam_2_13_11162-java-installer.zip
            30d407a6541dc8c143ea6d33551bbe644631d963f67b194344bd869ba41777e0553f9a5ff1f12d5d7a78f18585ebcb55039691d114f001140df29bb88fba402a  cfbam_2_13_11162-wsl-installer.zip
            eca4bf6e862d6bf3b9319995c41561ab62c946ab2485a72b41537ff2eb5e97a01b69af2ef29dead4e37ac0caf700b62ff61bfaf5843c56b583b7f26c860c2277  cfcore_2_13_11162-Apache_V2-src.zip
            ce1940fab94cd38e8f0d2d6e1e1dfe130188dbb78ff0524fa96efcf631e6419d5fb1abdccbfff209f4c404da688352690bed96df9f50daafac67d9635485dce6  cfcore_2_13_11162-java-installer.zip
            0bf223e232317d7bab323c6651a0750147fff17c35657713f8f91cfaf36fec0bb582e6d533c73951dd3b13a3dcccf2ed1de9758d7fc895f0cc64b1a37311f627  cfcore_2_13_11162-wsl-installer.zip
            95ed7fb59cbac73f2eac804d042394420981cc17000c114bc81b0da8ae6f7fc14988c1fafc6191cbc23b2693315374df449ff28541052d0a20ee18cf0fa43c98  cfcrm_2_13_11162-Apache_V2-db_scripts.zip
            2c5071c52fad5baf47963f260006afff4337af9534d54665af3c9c76a53e322828c130a86bb87a3de6ad224c4063f619bab62bac6fc87d1dd4b24fc1bbc51682  cfcrm_2_13_11162-Apache_V2-src.zip
            ad53c2d9c662c0e0ed3b9714c754a574e411e0ac30e1abfcd39efce5d219940668326f47816856def72ce5d9c4fa798d872f3db2690ea0d65bcb603ca54d7c48  cfcrm_2_13_11162-java-installer.zip
            ff58a464f2752687c56cc1d64c1a34c5c54c36682f3c2f07aff755c5aa02d56acb1f4506409ee725015d128d52fe3dc5a666ac9377f562bd96d058470896c5e0  cfcrm_2_13_11162-wsl-installer.zip
            436d5c522f761c1565c3d91d90af9b1cc202dde989153d41cfd50cf3083ba5810ce5d35f2beac6dd101232c62e796d7c5708eaf9334294aaf17b2050ebea4cbe  cfdbtst_2_13_11162-Apache_V2-db_scripts.zip
            d1757461ba9f044f6b3a9b265d82538589d0998bfa85120d8a9253811bd2833c48449f988897470fd0fb55ef2f0ac9c364ca9c41d8a78302ae6be479be4fda5e  cfdbtst_2_13_11162-Apache_V2-src.zip
            f9ed4345485a190cbec96c4a2eef70db72049cb478ca324f97b5b8234c133f0d766ec05c7b3643d373f84889adc37ba615e7da66211cf84df6c718d096769469  cfdbtst_2_13_11162-java-installer.zip
            7e8f2cad184d31ddcbb6b560a77192e213a0e1f5e52825d9182880362bf1d1711a86561e7f79fb178b2610b829a5580d16c8ef1ed98461280765dc6ae00507e6  cfdbtst_2_13_11162-wsl-installer.zip
            9b0b2c9962b3a29727f9ba5636b5d26711075afe05d5d5c697f2be55951350eb6f8e0f2eb2bcb106031f966e131736b4d793a0d76f41f9ca872fadffa1a338f9  cffrsw_2_13_11162-Apache_V2-db_scripts.zip
            f85cd4c3844e901257684d60508d298ed6bfbc2ef876ea58fd6b8e4db55addf4dfa6842a21b1b9dcc937760d7af9e2a3dacb12fc03d8a1ea8ea9b120e0fff4b0  cffrsw_2_13_11162-Apache_V2-src.zip
            d3737e3620b68b2b3b70c0bd860cd9587a819641bba37e0f39e82d587d71ade2c6f462c1d24a516dd5292385405802faa6c41fc0f105a670029692fead531bbb  cffrsw_2_13_11162-java-installer.zip
            cfc0407024e9bc224a9cab7c12d77b71b3056037271f1712534b0dd9ae2a8d745d7cc1d34a910ca9c19347e488f7f9dc1fef39f5b6cd57c1bf3900ad8a8c610a  cffrsw_2_13_11162-wsl-installer.zip
            65cae8b29f7237feb18530441d8dadae3a1266e67ba10e86ec7e729028f7ac799aa1c861aedc9c83eb01a18d6566dcc6fd4f4ea26f02d626a2a0c5acc2a653c6  cfint_2_13_11162-Apache_V2-db_scripts.zip
            da267dfea56a8530afe3f71328f6c6d7fd292ae56033aa8c5845f18ade29fa7e2e757795d8412912c2b9dc08f1db25c8c40810ce3728b4a179f623d903add346  cfint_2_13_11162-Apache_V2-src.zip
            afc5a89ef3706ffc0aaf39009e369fc8b007121851cd5ff051f162a0331ed613f35fa4798f5c6e2860bfe22931c360679b2b15241ce8aff3631d3952499ac178  cfint_2_13_11162-java-installer.zip
            07eba8fa50f6cc13087a68cfd262be4214be15da87226e41015ca784a1dea042268c88a87c9af63cef25090f453f7f42e0813be236afad0a0c8d148a6b8467ca  cfint_2_13_11162-wsl-installer.zip
            0534cfc0074c5c2187a13c521ea9d8eb539d23276dc459a5d12648b2fd8307d2c559e45939b3d6a9697f1e3f0b2ca05299649298031936962696343c35dda308  cflib_2_13_11162-Apache_V2-src.zip
            2b2c375c960d678e813d468eeec8218a5d0377f6610642a241c238f9f6f148a4cab107b3eec6efa2a673e01a4a0495e0cfd23c0124c4f4497030acbeaf1cb450  cflib_2_13_11162-java-installer.zip
            17f3e456e145effc070447205c0df5c0944dc25da10addecc73fecb1deecf82f2b388c70a3f42bd46a82bd9d90e14bca35225e0538cd391490c4528006b6ea3a  cflib_2_13_11162-wsl-installer.zip
            6daead399b13eccc5506d75659a0f580598e46370ce05e38f0ebc96171acb202b4493f35fa1bc4b94e722ee941bab1a01c3bfddeb8e893d37992e79b32948777  cfsec_2_13_11162-Apache_V2-db_scripts.zip
            d0af873cbcf78fbd5ba0ad1787da5adb31c43388991c95b03e63ba060655242f5ce9bfaa55520108de6ef9cfb5389dd4ab16da1fdd6f73034db9f2b108b679ce  cfsec_2_13_11162-Apache_V2-src.zip
            9731e62b430fdc4be143763fe7ac53c42fd38417f323f33a43243e0b2b966b5c7c711cc5b66e5e7e3e0b39a53d05fbe274b1b76987277763ce72fcfdc64ededb  cfsec_2_13_11162-java-installer.zip
            6baf3325f01eb964a2ab458122e01860ad2fe828aa4a3d2d6f1ae1f00fd43f000e69f16522d385f111b878fcc51d42cdd17881549c2c1dcefabcf78d86ecc1df  cfsec_2_13_11162-wsl-installer.zip
            1646652df3b489e8de52ac3ec4be88c70cc3fdb786c0031c0a2e4c9c5630fd74e8634ad418eea2e6ee800d8116db4539b2233122765ad5eb97ce319c5d6ca74c  cfuniv_2_13_11162-Apache_V2-db_scripts.zip
            34ba6cda9c10e0c8ad0307947fa1026b08740982de20ed4b57f32020e43432b09fa2c2d446fcaf825b41ba97ca6aedc4febf41a4f4492ec21041f75008b72eb7  cfuniv_2_13_11162-Apache_V2-src.zip
            cd6ccdb60f3cdb3b4d862cb2941f7c1cda6bb26c7eceb803c3b28b81b4d90fb8b4665ce7091bbc866ed7f5a0a9018d8ac5b506f4913b09a91997a4d96da15b1a  cfuniv_2_13_11162-wsl-installer.zip
            728b2c6594ee3e6a36bc906da9bdb5462b645aac338902b6039d0bb1f1332de540968109f3c28d1b53095710bf999ef35ae28c8cc9deeaed82c5a62b625783fb  msscf_2_13_11162-Apache_V2-data.zip
            783e9999bf2e099a045c53d1e57514526f0553ab42043bbc8b4fb7b3a1b980b93cd3ef97fd3c9e5a64dfac6e2afb0ac986c607d2a796d271892a3a9d3b32cbb2  msscf_2_13_11162-Apache_V2-src.zip
            8f376df2908bb4c27e8c111ed04c8a802e611cb33c956c28f20a756a1bfa32137fa2e267ddeef72f4edc79c0f3fe526323bcb87d7b997e9ec817ea1e5680e796  msscf_2_13_11162-java-installer.zip
            411db780f63e8cf2ffd0358be7f99f05a67e81922d36cc3fd1ac5ebc329dea53ceb1c9c93cfcce981f507760c27c123b6a186562788e26fb5124e883a8cbec96  msscf_2_13_11162-wsl-installer.zip

commit 2ca348e6008f227377ca58b06ffd877a76e1fbf5
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 6 13:21:55 2020 -0600

    2020-03-06 MSS Code Factory MssCF 2.13.11162-202003061320 Minor corrections to msscfcli.cpp, valgrind test running
    
    I had to pull out some variable declarations so I could access them in the cleanup
    phase of msscfcli's processing, but now that that has been taken care of, it is built,
    linked, and the latest and greatest valgrind test is running.
    
    This is a github-only release.

commit acbc7722d069a80a0d6b02f6f634668c1fa330e3
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 6 09:32:22 2020 -0600

    2020-03-06 MSS Code Factory CFCore, CFBam, MssCF 2.13.11162-20200306930 Many leaks plugged
    
    Many leaks have been plugged that valgrind was reporting, but only another valgrind run
    after libcfbamcustmsscf, libcfbamcustxmlloader, and msscfcli are rebuilt.  libcfcore is
    already built and installed.
    
    Most of the leaks were fairly trivial to isolate and not worth explaining.  There weren't
    any hard-to-find-and-fix leaks this time.
    
    I have high hopes that this will be the release that finally runs clean.
    
    This is a github-only release.

commit 593676dff47e5ed97179333b48ca33c379924d95
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 6 04:27:49 2020 -0600

    2020-03-06 MSS Code Factory CFCore 2.13.11162-202003060430 Manufactured by 2.12.11161-202003060420, bringing msscfcli is down to a svelte 309 MB runtime, running valgrind again
    
    The msscfcli executable at this time is running in a svelte 309 MB of RAM, but I'm not convinced I've
    plugged all the normal execution leaks yet, so I'm running another valgrind test.
    
    This is a github-only release.  I'm on the verge of completing my leak-plugging tasks, so there is little
    point in continuing to post work-in-progress builds now that they occur more frequently.

commit 0e7567721bfc3cc0d4f4477e6aae938c1901b1dc
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 6 02:57:56 2020 -0600

    2020-03-06 MSS Code Factory CFCore 2.13.11162-202003060300 Manufactured by 2.12.11161-202003060200 to plug more GenContexts, msscfcli now runs in under 450 MB of memory
    
    The GelIterator and GelSpread custom code were still leaking GenContexts like a sieve.  That has
    been corrected to great success in reducing the memory footprint, but I'm not ready to stop my
    valgrind-fix-rebuild-valgrind cycles yet.  I don't intend to stop until the only leaks remaining
    are occuring when exceptions are being thrown.  Then and only then will I be ready to issue
    this release pair.
    
    The sha512sums for this release are:
    
            5202b17b35211be94dd88ebdeec64f2f7bb38aef9154c7189d0d0631ec185c30038214e9bed61e499b7259822d1d4ac1ed3a94e1371e5185e0781ba4f16ef579  cfcore_2_13_11162-202003060300-Apache_V2-src.zip
            ce1940fab94cd38e8f0d2d6e1e1dfe130188dbb78ff0524fa96efcf631e6419d5fb1abdccbfff209f4c404da688352690bed96df9f50daafac67d9635485dce6  cfcore_2_13_11162-202003060300-installer.zip
            8f75dbbd3ceaa983a37a3f1b5a9a10a44fb0dd7a2cba9ee96d8d3b54997cab6f5c5757c7e712393b8deccbc74527b66f6aec735dc2f979024f81bd8a5a9a3996  cfcore_2_13_11162-202003060300-wsl-installer.zip

commit 21f25f1cfa7144649583e42beba35fa56f50652f
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 6 02:01:50 2020 -0600

    Latest leak logs.  Getting close... :)

commit 5b871a0d9df255b76d0d4422d64be3e1cbc8b87b
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 6 02:01:29 2020 -0600

    Merge model again.

commit 98cd5e47318c018ac0e6114c160ff4643803712b
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Mar 6 00:23:54 2020 -0600

    Resync the knowledge base and models with the latest from 2.12.

commit a92b65defb47dc9741466071aa081c0f259d46a2
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Mar 3 00:49:35 2020 -0600

    2020-03-03 MSS Code Factory CFAll 2.13.11162-202003030050 Manufactured by 2.12.11161-202003022355 to correct invalid models and plug more memory leaks
    
    I noticed my Windows Home 10 WSL1 Ubuntu subsystem now runs in the UTC time zone, just like a server should ALWAYS
    be configured.  Servers should NOT run in user space.  I might switch my Windows box to UTC, too, if I can get used
    to UTC time under WSL first.  That would cause a lot of grief for me when it comes to communicating with humans, though.
    
    The CFCore and CFBam models weren't specifying initializers for some required attributes (i.e. IsNullable="false".)
    If you don't specify an initializer for a required attribute, the factory will not initialize the variable.
    That is fine for date-time-timestamp, which are always initialized to pre-determined values, but for other
    data types that results in uninitialized memory that could contain anything at runtime; most servers don't clear
    memory to zero when they allocate it.  My initial valgrind test run for msscfcli uncovered this defect.
    
    The remaining leaks of "key" instances for normal operations of the TableObj methods have been plugged.
    
    The detail list leaks in the custom CFCore model C++ code for GelSpread and GelIterator have been plugged.
    
    I can't find any more distinct leaks in the valgrind log due to the clutter from all the key and
    detail list leaks being reported.  Each and every distinct call stack is reported uniquely, over and
    over again for each data type call stack combination possible.
    
    According to valgrind, msscfcli leaks roughly 1.7 GB of memory directly and indirectly while
    manufacturing CFCore 2.14.  It takes 45 minutes to manufacture CFCore 2.14 under valgrind.
    
    Before I start any builds tomorrow, I'll rework the exception hierarchy in CFLib 2.13 for C++.
    
    This is a github-only release.

commit 73ec776e9f7bba04fb65a9e09eb1cc1e64619dd1
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Mar 2 21:45:59 2020 -0600

    The Massive Leak Log To End All Leak Logs - my starting point.

commit ad85720d7359c21abc0b0c1816716d3db6f0b133
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Mar 2 20:54:27 2020 -0600

    First leak log, with notes about how I'll be addressing it later.

commit 7ce0a9dd6dff57aafd9339f364bf4de303ec9ff4
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Mar 2 17:36:01 2020 -0600

    2020-03-02 MSS Code Factory CFAll 2.13.11160 Replaced std::string with classcode_t for class codes in all code
    
    All of the std::string class code variables and constants have been replaced by classcode_t, which is an int32_t.
    
    There is some performance improvement in msscfcli C++, but not as much as I'd hoped for, given how many string
    comparisons the code used to do.
    
    I ran the CFCore 2.14 C++ manufacturing under valgrind.  It took 7.4 GB of memory to do it, so it is a very
    good thing I opted for 16GB of RAM for this computer of mine instead of cheaping out with 8GB (which my old one had.)
    
    It took close to an hour to run that test instead of the 5 minutes or so it takes to run without valgrind.
    
    The log from the run is in git, but not in the source code archives.  You'll find it in msscf_2_13/java/bin, along
    with the Valgrind*.bash script I used for running the test.
    
    I'll look into the details of the leaks for the next release.  I'll try to get those plugged before I worry about
    exception catch-throw cleanups, as I can work on those leaks without rebuilding anything except libcfcore, libcfbammsscf,
    libcfbamcustmsscf, and/or libcfbamcustxmlloader, and then linking the msscfcli executable to the refreshed libraries.
    
    The sha512sums for this release are:
    
            c591f1b3024ad75736e370d8b4f8221bf8c88f329d3e87c4bfd3f54a1d50298934f9d078bbc8bcb7123f7dce3e5cd516c1589ee6246ffbb2a0ed84c8278a5862  cfacc_2_13_11160-Apache_V2-db_scripts.zip
            cfb6df1ff00c5a68d5612b1a3521d02beccb0002130818c285378a8ccb2581008c17a0d1c4c5c60b2f118f8284c3ca4cb96b1bce226b3f307f47a715ff75d879  cfacc_2_13_11160-Apache_V2-src.zip
            1c83c3f33863a4bac0a5aad13616bdbb23a023b30d5e7faf6bec42466071969f582e6b3fbb2c3ab1dfa8e21306d0185601c1fbdddd480ba57959edef336fd567  cfacc_2_13_11160-java-installer.zip
            f116d6377001585813e5bed6be4cfe66c0d80a5b0fd9eea3321553e1dcd0196671eb22fe88bf3fdb42b9133b0849af1db3d74f12508b87230c3a8847c727e9f0  cfacc_2_13_11160-wsl-installer.zip
            29fea043d9964f3fc70bbb889f2aa31e2924b15b8d2ca9a03a6ddd27dfc4b6b9816d84a4929dcc0e4800354745dd740bef5e2617d9ccfe6b8e10a0c4c0b5ac84  cfast_2_13_11160-Apache_V2-db_scripts.zip
            e9038ff622f7192cd59487df40126ca0ba1f88b59db369659d3e61e758ceb8b55f850136758af4d546077e35d451bcd9d535f4c0f84a12b230305d3c0c553fb3  cfast_2_13_11160-Apache_V2-src.zip
            8cc44333d83864715ee9cd3800f8ca03a5cfa22d6a2c5f99f8a7eccf08d493394aefc82a86009e1dbd29b8873dec06b5c8948538b53adaaa74a15fcd41ac724f  cfast_2_13_11160-java-installer.zip
            de174052f7f0ec5a18f647ec130adc8327813ed429b0352cadde6cfbf588566c986f1ded78c3ae65a7f1c97f1fa0941e35154fb20bd7b7c7210783e85f7ff2b9  cfast_2_13_11160-wsl-installer.zip
            6398aec54bf6038f788fe5cec64c16985b4efb94bed323a1d21686f7e9f8ef947725b73f94b881aa112e0dcfff49e9d56f5853e483dfb10eea6f01e1b83d32b3  cfbam_2_13_11160-Apache_V2-db_scripts.zip
            ed711fdc464e292b9f61f4aa5ccf1e2df51ba0f08fee21921703485dd4850d3fa0ccf098f91126411465515638755431ea589419ae599ba5f298ba6bf06c383f  cfbam_2_13_11160-Apache_V2-src.zip
            db11afb0eba7e994a47791f31b13e140be85880889698c781fcc8ec5d6c87c0f71439d12382a06ac7894b7d839acb0705ca1b8c7abc8781ab9f88f04ca5d798c  cfbam_2_13_11160-java-installer.zip
            02a3fdc3f49f9fce7e120662fa70d2489ec3499da973b18165c8a6f1dca2834d0dbc1e6032b6fbb437c2c88ba149436bff7bac9361c888aa0489047092b5a857  cfbam_2_13_11160-wsl-installer.zip
            d4e4d4dc067a3f1462a4e007ac198fe18c8324c858773e543d068ac9e2a451f3224165f0c5306c84cb28e9d56a0258f47cd396fecc7fc7b46e8bd6e384835794  cfcore_2_13_11160-Apache_V2-src.zip
            befe3d9e59ddb56851476eba6e3aa08db53e87e5bdba7ba334d498a16621e11f97c4ce83f47e56f3b0eeb8a2f3e40339814f6f8864e4276804d77ba74d835647  cfcore_2_13_11160-installer.zip
            d261857447a3965ff490cc59bdfa17b31dc63930044cdbe3880f5f8edee949a7d45411595bc4ed3c7d6a8c5aa4933037fc7f0bc06e66b48f97e5d6f1186ef44d  cfcore_2_13_11160-wsl-installer.zip
            fab01568df27dc246ebe95300b579b2bc4f4b86e390a168bb89274b6fc76f6ada22e393963a8a399c00002436b88077254ef9fc6832f0a5f8b382f07a3fce061  cfcrm_2_13_11160-Apache_V2-db_scripts.zip
            912c6fe05bc3c10b0e8bf0de4b6a4e15c979db3490332b7d1185b47e3a9adc5267719652e7cbcee42107eef62f708aef80669f6a61e7de866e0957137943bd3b  cfcrm_2_13_11160-Apache_V2-src.zip
            082380f4c31af0cdbeb3a6ae8cf1d90101422e5eb3d410b79225e7b007788e91980233db2a45b7d63841b6a7f30900a6d5852d2841260f0f72319fcf81401045  cfcrm_2_13_11160-java-installer.zip
            94068885046388ea216b369306adda8bebe0f2dd72924274144c798fb51a8c96bfa02ea7bd0f32bd2f279ddfe40e64b47e49c98166d4804ecdedc79716293b29  cfcrm_2_13_11160-wsl-installer.zip
            39b4b51cb86119777fdb43a61afcc362c606df862d02fe11638fb462a83bfaf922c6b71fd5cece8ec0679107716818f64c9a7b15b908c7453fae09ce6f86a13a  cfdbtst_2_13_11160-Apache_V2-db_scripts.zip
            833f95ee26b4ae75a2dd4e75dd695d1428205047b2c0c59d6969c53ef291bf241b438425cd889572de3531370f6b4bee00bb22c3c99ce7a514fe71c4bac70fd1  cfdbtst_2_13_11160-Apache_V2-src.zip
            ac567ec33efa3bdfefef3634f15a3044dd134fa9060f4fd10f987114dca5afec0759a74d1266baf49603005f18c9ad186b58ceca31c017f98c8b8b4e632aa4fe  cfdbtst_2_13_11160-java-installer.zip
            6322228bcbd17178570d8b8a33846d52bde4fde643f8fd76cb2f7f083b80d71622e318df8d537fcb2af395b8abc04ebbe731d47d237d090a61c45bc97052fe4d  cfdbtst_2_13_11160-wsl-installer.zip
            c5f793d02509da16da688fca85a1e843fc00e50b035293badeccb928b63f7e37af98760f66a6675010e913a1dfe0b1360841fc6ab9257f0f9d57a6bb6f9fd4d6  cffrsw_2_13_11160-Apache_V2-db_scripts.zip
            df473aee51e77857f6dae1c3ac87b04c45bf1ae35d92872ccc0467ffa1dd0352f721ce0ec1bdbdc60fb42f5f3ef69e39a844399f79c44ba783460653009329c5  cffrsw_2_13_11160-Apache_V2-src.zip
            e275c5da713d5f13c16b0049900ef5e52831e6d8636875cc601ca01953a2ee2ced50f7cc8a6f3e398966b7bd3842494e958c5136aecc26add996066f172d0b7a  cffrsw_2_13_11160-java-installer.zip
            b9046dc143d37b0919aaca338dc524ea72f3a7ec6ea6eeea6d5d5bc3d3b86b169749399a68271bccec0dae22af9b456814be66948acdb527ffc2ee4e8ccbfcbe  cffrsw_2_13_11160-wsl-installer.zip
            4a5894c54055df0a3a1b4da5ba6554aeaad26c558e3c10d98113cb696c65265c9cc41f22e3a27f10131e8b9f1b71bffec6508de2101fdba60d5bae71739b3f81  cfint_2_13_11160-Apache_V2-db_scripts.zip
            c62adfb73515ff5e5b9faaa3ab982cfee04d18a269a4a22e5d2259bf3dc67676c06b6fa490fbfccd09a58cacbca2d905107d56e3b4df53553958c5fdb5520183  cfint_2_13_11160-Apache_V2-src.zip
            65d322accd763469dc9f1214821c4bbba376cc7eed005457ebe25873ba41b767e23191d3a3c931f1f8a027daf438ebde1f21bf197a8ad5210646c7b0e3c03f70  cfint_2_13_11160-java-installer.zip
            b28ba7ff5bc0852b67fb586d61781b151fd96ca36751d16ac8e1aa276ead67be7355ab901b48ccdbd74a5c750046e8f716481459a8f8d3474ac925489dcd279d  cfint_2_13_11160-wsl-installer.zip
            9dae00991ff06c62871d39fdfa334ff7c23385219251d2a3e4a46def030d1af9b083363ab66ef96f821d05b0b4ade2496ccd9042db5b79631de64f786ad850e6  cflib_2_13_11160-Apache_V2-src.zip
            19172be02d73677864fcf8ba7c91f1d1201f18319e274cc58387d379201fbd0f3c053b3a501a9b1717f5284227a8609644ebedba2074c3b11895cfe8a254909d  cflib_2_13_11160-java-installer.zip
            251283fea44772eee285c1ac70aec00b84639ce4d198bef4ee68e3d7e6e086348a8ea7036bbf0d0495cccca1ca5d038dafac73b734bcebc4462eca70022a85f7  cflib_2_13_11160-wsl-installer.zip
            3d31e27666351a82b612990eb67b7dc6b09894ac6bfc4a2f7181fa5aa676c70192181eb248d1be50b1c65ccbd2499e451d841c0440e07d49178dc1eb1c249df5  cfsec_2_13_11160-Apache_V2-db_scripts.zip
            3523959fa90f30146d74ea4c8b4ba215d2dfc74d9357e02a44ae1b427b2e8678a636c2dea0fd0a8f16b1062a0ae798058e53ee116178d30bf2774484d5403874  cfsec_2_13_11160-Apache_V2-src.zip
            421fa5891e35f51cbab312d71c4f37178cd39e66e71471057c01bfa058a1a41b8f86f12971d2fc3ed9ea097a2c9d71f99dbf80d5cb44800bcb152dc3de3bc8ba  cfsec_2_13_11160-java-installer.zip
            410058e8b5f4cd0143e0a83318d78d96cdbcd2bdb220515dd82942d9071a558e582e8d47ef61b792feb79a2b80a39e053d1c0ded3a8f879a97ed57828222952d  cfsec_2_13_11160-wsl-installer.zip
            bf1305459389b36adac2c88111f8ce13bdc8be41e0704e91feae95dceb7087bfadac5f163a17c26c1179e4d14b96011006fea7a47a3b3a40cba8559ec1d18032  cfuniv_2_13_11160-Apache_V2-db_scripts.zip
            ba024597ef46abba8266ac73d2b1d3b1341d0a786d8712826b7d07e014e3889d12f0c3196825bb4b76662518a1798ee78dd145340247c951301254703313fef2  cfuniv_2_13_11160-Apache_V2-src.zip
            6b5cd26b25c3c1590dc4dc060a1c813499c6931ea2b1ba7afd50dd4dd9e9c1cc05caaa3465ae6a67e480e04fcc3959cb397367af65320aaee3461e3493b3c4da  cfuniv_2_13_11160-wsl-installer.zip
            6cebb4ca962f007ab239100f1b60d753eff1f213b9d0933a27b461b1e21fa0e71efafc2325e813e1c70e108d22f16fd9c51c00a7709bb83c5ff492cc99d37b53  msscf_2_13_11160-Apache_V2-data.zip
            1c20b22e86aaa28cc9dfaf82f139b3f4166d93aa65eff83e2aa5efca17605084836ed3c42b133493af759c25197bde56b02792a9517de4f9eeee9d4f7357ac4c  msscf_2_13_11160-Apache_V2-src.zip
            490087eb3dc49da0ad2987887651ced4c83cd0b71efc6fac02dfbef278d2ff4d23c6eef63960505999e903e121b25f7f146200c5baddf95abe7d4aa6fd040a63  msscf_2_13_11160-java-installer.zip
            fd7eeb8c797b8f34b161b3c8c85a487a336f9f8efd00c47e04370bbed9b63a1644298e99d39cba3f929655e3f71ab709cd972b074c97c11a26d8f8b94d31e9f9  msscf_2_13_11160-wsl-installer.zip

commit 247fb525d322b639c3e9b315100a68bace34690f
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Mar 1 11:40:59 2020 -0600

    2020-03-01 MSS Code Factory CFAll 2.13.11160-202003011145 Manufactured by 2.12.11159-202003010710 to start with clean base libraries
    
    So far libcflib, libcfcore, libcfsec, libcfsecsaxloader, libcfsecram, and cfsecramloader 2.13
    have been clean compiled and linked.
    
    The Valgrind*.bash scripts in cfsec_2_13/java/bin have been run successfully
    using classcode_t instead of std::string for ClassCode in all its sizes,
    shapes, and forms.
    
    The build stack continues to do what it does best: get built.
    
    This is a github-only release.

commit 3c466958cbe0f609efbd48807840c7407064ff0d
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 29 16:45:30 2020 -0600

    2020-02-29 MSS Code Factory CFAll 2.13.11160-202002291645 Manufactured by 2.12.11159-202002291610 to try, try, try again
    
    If all alse fails, sometimes perseverence pays off.  I'll try another build after I get the manufactured code
    checked in.
    
    This is a github-only release.

commit 958805f2c67ec946b2502b09974c12da1f435f3d
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 29 15:37:17 2020 -0600

    2020-02-29 MSS Code Factory CFAll 2.13.11160-202002291545 Manufactured by 2.12.11159-202002291515 To use classcode_t where applicable
    
    Rather than continuing to use a generic and potentially detail-losing int32_t, I now define a classcode_t macro that
    maps classcode_t to int32_t.  I think this makes the method calls that take class code arguments a little clearer
    about what kind of arguments they're expecting.
    
    I'm ready to begin my test builds now.
    
    This is a github-only release.

commit bb97520e354763a93169ca60f9ddb6d969d296c7
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 29 11:26:30 2020 -0600

    2020-02-29 MSS Code Factory CFAll 2.13.11160-202002291130 Manufactured by 2.12.11159-202002290930, Java 13 code clean compiles
    
    MSS Code Factory 2.12.11159-202002290930 was run with a build string of 11160 to set
    all of the internal code fragments that used to be maintained by ex.cmd scripts.  You
    are no longer restricted to 5-digit build numbers, though I'll be sticking with what I
    have.
    
    The build string is accessed in GEL bodies as $GeneratingBuild$.  I would
    not recommend trying to specify non-numeric build strings; the entire GNU tool chain
    for C++ assumes BUILD is an integer value.
    
    All of the class codes for the 2.13 and 2.14 models are now hexadecimal strings.
    For the 2.13 models, they are all four digit hex codes in the axxx range, which is
    reserved for my application models.  The same hex codes are used in the 2.14 models,
    as those are just a copy-paste-modify of the 2.13 models.
    
    Class codes can be up to six hex digits, which will still fit into an int32_t.  I'll
    leave them as strings in the Java code, but I am going to replace the std::string
    class codes in the C++ code with int32_t values, which should dramatically improve
    the performance of the manufactured code as it replaces a heavy object compare with
    an integer comparison that typically takes a clock cycle or less on average on a
    modern CPU.
    
    msscf_2_12/java/bin/fixcopyright2020.ex and msscf_2_12/java/bin/tidy-empty-lines.ex
    have been applied to all java files in cfcore_2_13/java/cfcore/src/com....../MssCF/
    and in *2_13/java/*cust*.
    
    The code changes made to the 2.12 Java code base have been brought forward
    to 2.13, which also provides the new functionality delivered by MSS Code
    Factory 2.12.11159-202002290930.
    
    This release pair delivers the "2020-02-27 2.13 Programmer's Notes" first feature request
    from the "Future MSS Code Factory 2.13 Features" section.
    
    This is a github-only release.

commit cec453635dc604c035c6f3387def202798c524c0
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Feb 26 16:14:34 2020 -0600

    2020-02-26 MSS Code Factory CFAll 2.13.11159-202002261620 Prepare to work on next release
    
    Prepare the code for working on the next release.  I know I'll be changing the knowledge
    base at a minimum.
    
    This is a github-only release.

commit 551ecce31b270e45ee09667f89f6544e90d9d633
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Feb 26 03:33:34 2020 -0600

    2020-02-25 MSS Code Factory CFAll 2.13.11156 Builds complete using code manufactured by 2.12.11155 to clean up the memory leaks for normal C++2a execution paths
    
    The manufactured GNU C++2a code has been cleaned up so that it no longer leaks memory during
    normal execution of the xxxramloader executables, though it will leak memory if exceptions get
    thrown due to bad data or violated constraints.
    
    C++ uses one's compliment limits on integral ranges for 64-bit numbers, not two's complement.  That
    changes with C++20, but as we're not there yet, and people are likely to try to use code with one's compliment
    platforms sooner or later, I'm restricting by that current two's compliment negative limit to
    a one's compliment negative limit in the CFBam 2.13 and CFBam 2.14 models.
    
    The ManufactureCFUniv213.bash scripts in msscf_2_12/java/bin and msscf_2_13/java/bin have
    been modified to produce a standard manufactured application profile including Java 13 code.
    The resulting new code has been checking in to cfuniv_2_13's github repository, but it is not
    ready for a test compile yet.
    
    The GNU C++2a code for this release has been scrubbed free of valgrind-reported memory leak
    issues which unless exceptions are being thrown.  There are the libxxx, libxxxsaxloader,
    and libxxxram libraries produced, as well as an xxxramloader executable for validating
    documents.  The .xsd files needed by the xxxramloader executable are included in the WSL
    binary zip files, and must be copied and made readable from the searchable
    /usr/share/msobkow/2.0.13/xsd.
    
    If you choose to build the code from source, the C++ "sudo make install" steps in the
    BuildXxx.bash and InstallXxx.bash scripts will instal readable copies of the .xsds to
    the appropriate directory.  Use or modify the BuildXxx.bash scripts in a project source
    archive's cplus directory to target different compilers or platforms.  Only the GNU
    toolchain is supported at this time.
    
    There are ValgrindXxx.bash scripts in cfsec_2_13/java/bin and cfdbtst2_13/java/bin
    for running for each of the tests I ran, so you can validate the xxxramloader executables
    on different target platforms, operating systems, or tool chains.
    
    I will be adding ValgrindXxx214.bash scripts for each of the projects in
    msscf_2_13/java/bin in a later release.  I'm not going to worry further about
    msscfcli at this point in time.
    
    The sha512sums for this release are:
    
            c1793164079b287a60c392cd985368a22772867538d1f235a6f95e83dbf54eb9694d2c0d6ac89c1eb38640dc96be314503fb1c140bc7de781f8cef5463fad016  cfacc_2_13_11156-Apache_V2-db_scripts.zip
            534cccf04772842f4b529f11abde4e4fb29061373a6df56e22c090f3074886eb0aace7e945f2504df019e65ebc33ca2016184b5c0066d7d55e89be90781242d2  cfacc_2_13_11156-Apache_V2-src.zip
            2b0ee5a845652a18e53030f1fb6944d237f1405cb20fdbd29edf4eb01903742f4e5bd98defe4f05e799fdfc866db0ffd38833c045f6d697dba86959ec6a14c91  cfacc_2_13_11156-java-installer.zip
            9b9b708bcec0582ed47e5a35499410724f6790d3a6b9e693d702704739361485148105285b79cadac965a228cc6f3fbea1d338e1b3c5bfcfdb481ae8dcb6f5d9  cfacc_2_13_11156-wsl-installer.zip
            2c2d2cbfc1cea8ca1329a9ed2c8b87d846720b5404acd11b070883d35d2dd4044304cbf069d28fd8eaf9bb216687b00a697d00e3396516bea12584f753e78a6b  cfast_2_13_11156-Apache_V2-db_scripts.zip
            73dcac39f927cc34a19988694b7e826c6347da896ddd37ac04acfccc0b2c98f1e65fc4608919697b81d372e51e799fb0a73565ebe5e91b40535b63d116cf7275  cfast_2_13_11156-Apache_V2-src.zip
            3fa04d3cec915207af3d05df23178df134c92e5f197e12499e7e9199f861f87ebb0881bf303caaab4c6f15cb5a07e5b70d729bb0aa7a3ac50b7f152a3472d0da  cfast_2_13_11156-java-installer.zip
            24cb3dbf3001e5d55fd48d74c5b26703de0ed70d7738f7e985e87ed04255dd496ae081715b9f8ed62a8c03f9ab2c3a357ca355d0e67659e5d50fe9ad98ee7670  cfast_2_13_11156-wsl-installer.zip
            f995902f780bf3d9f7b564c03c631847c416e3dec69ff182419af8bd803a5cd11b9c3a85e1e962b5885b55019f2d6355876cc7165cad5df6d59851caa297b6d5  cfbam_2_13_11156-Apache_V2-db_scripts.zip
            645dee90edc09dbfee73af74e5fb7809492339dc5ebc850e5a150cbe1f54b7e392b4565fd94f6d1dfeae0bb4c661d8068ca8d8fb2eeb97de5c7a5f1e3d818ead  cfbam_2_13_11156-Apache_V2-src.zip
            09debeb5608f43d6b16ef0b482e73b8dd0b30c77f2d5dfd8b6802cc4c66c93ead946ce7a184c1237077210a52e596349fe926f03d245ee0c25d0a25aa47df7be  cfbam_2_13_11156-java-installer.zip
            27d1431e816cc534134a37a0935d0d39cb728c2b2d4a257f5b2a13805243c29f1ad5d2d89011bce6091a6ee18414c7b1f99f47095b65ab15c16d0d66135861f1  cfbam_2_13_11156-wsl-installer.zip
            2d802362e3b37972255d6aee736010683e753d24612b157b54e95413f91e7e806da93b6902940dd49c09bc31480e3f5047d2a139bdc91b32f1c0a5f60d771e2b  cfcore_2_13_11156-Apache_V2-src.zip
            3600f87db7d5dfeb074a02f81d18c7419250fa351a28277b9d7915feb657097e1538dbfeb3d212162053ebf230c73b09ead0b24b5da578995e975be0d9211f7f  cfcore_2_13_11156-installer.zip
            ce5978458eccc00a3f008d368fa1631325f9126744b2503566d8b41aa7783bb6930e16acca5f49d7d23e80fc3a4abe268860f7893e27bebb41eb4508ad937043  cfcore_2_13_11156-wsl-installer.zip
            f6b28780919abdeced160128499a695b097b5c33d3045a07a837b7251a863a264ddbce5a6cdc24c98c30e9bffea965220d85cd9d69c58b6385582d6f408a5bd1  cfcrm_2_13_11156-Apache_V2-db_scripts.zip
            b0372d48695f103b6e47e13efc137f025a7b1661ee3d6de28e12020bf09a7de3aa7dba08fccff31b18b90fc5178502ebb3da6b5a3e00a8461bc36ddc4265486d  cfcrm_2_13_11156-Apache_V2-src.zip
            2f990d582a62431d6bd52e06b6f880cebe23268d7519e074c9efa18bfb0edb6156c0fd769d082522fcd8c29f8494953b2310be551a689ab466db6457c1c4c763  cfcrm_2_13_11156-java-installer.zip
            a7f7f7e0c394b73a3343fbd5d3d90145cd638325d60b6c5c2d7ef709aa757aea0211895fac9336c631ca047fae9a4e395ef4080023a3a3a2432d50591e1305d7  cfcrm_2_13_11156-wsl-installer.zip
            b1add19a0960b42185f0694bdc8a9ff8b595e4d62abaef45f21d8ef57af5bf20682e518faa3271b74b08d258276deacffbb7ecbe9d553c2aa34292e8fd09920b  cfdbtst_2_13_11156-Apache_V2-db_scripts.zip
            794c3b9889dd79ee0a3e71ddb37d4f16f0f5a49a85d2589f9ece3b1f91e6186146d99ce6232e4893f6060d6520d75e4ed4064bf0cf7884e102e62b0841a29576  cfdbtst_2_13_11156-Apache_V2-src.zip
            cfdb2b366abb2a34a0e1a8433cd364582871e0d208ae2efef63f5e5bfa76f165b924acde8237bb9a70138cea11bb2531494af53d2cd8d8265083038d08b12ff1  cfdbtst_2_13_11156-java-installer.zip
            a70560eaaff9e1bcb2585093fd28b4afc863d62bda35c731cf1e8cb79f76e8e4e3f8994931d4ad69e22f6ea69293f729379bd0ddeea4cbc1a3fb276605410d5d  cfdbtst_2_13_11156-wsl-installer.zip
            b06cf73fa7fc80249eadc5caa3496dacd479d2a1d93d268b342cc653acf37179750564e9b4c0d421f1a90fe9dc206a84cb17f257b1e38410bb291a84c21645fd  cffrsw_2_13_11156-Apache_V2-db_scripts.zip
            eee3a42117b0d5665a7b5825e1213cbcd298f02ab157efc023ff063f34ce61fae30f183f4eadabe1730b89a020c3158c2e185df764b553719bc0c0ac87c7e59a  cffrsw_2_13_11156-Apache_V2-src.zip
            daf6c60982a749d3c29acc9b2cf1e96f83ad767d72175355ba5da15ad50357ccb3ae93a578c8b6a672872e2132c53259e94c628f18cdac13ec0ac80f5388de81  cffrsw_2_13_11156-java-installer.zip
            e19a1c0ac7f5817b28086d26d6b921a7106b4c7df018166dedcbd37289fac83af628ed973b936c47ecc9188ded5525f80e2b0f48b0fa3e6d04037558efb76f0f  cffrsw_2_13_11156-wsl-installer.zip
            673bb0e456e949ae7bdfa79568179ee7faf73aa5a893ae738fe68e8620e27712c5f8f12fe3f033fc3c36e7e1d3d01e71fd43a9cfacabd6f516295c3e8fcf11aa  cfint_2_13_11156-Apache_V2-db_scripts.zip
            149ce8599468433ab9ddb4f2e67efd72856080aee0d9c9308b1ded97c9cf05eadfd847991e5ad9de806fbbd338c9636267dec63c1d8e4c611158d8c5582ef043  cfint_2_13_11156-Apache_V2-src.zip
            3dd187227549bbb4d884f1aaf5cc0b09830e96081538db1b0006d15e600eca7f8407e387220d423013e0b4dc4aa43fef86be514f4cdd43beb463e00081d87893  cfint_2_13_11156-java-installer.zip
            808c59411bb23a13c2865a9f95a753cff77b6cf60278dfa8fb9a08fe2768511d9f44fd4c8b71123abad87db69a9b12c67ed3bb70ec518cceb4968932c3ff64af  cfint_2_13_11156-wsl-installer.zip
            1e6cc4a340727d3ace4e76fe2b02d13e844eaaf8cc7cd3977a5f205bfa11565bf8df37a0a6fa43ad66d2433e3bbc5fbe3dee0cefa118e99e21693d5d299cd544  cflib_2_13_11156-202002240230-Apache_V2-src.zip
            9b2dd46455e304761847a16b0cbc2fc0eb7a9f5191fcded66ab7d31c8a6d79065e063994a7a009b389aebca092e3e6d3afacafd52cb14865614760e9b1ae33a9  cflib_2_13_11156-202002240230-java-installer.zip
            c4d5c93b5018e553ff3e3f3c16e9423b04d846207cd175c201a6619f0f6a81908b63a61e3d569d5d87518844c444f92f866a3704810e71a373a21e1d50dd710d  cflib_2_13_11156-202002240230-wsl-installer.zip
            32dc544710219b1b3dd5f7fa8d8d7bc431f73b3c157c8ea9415596547219f9e84432a435c6e677379804d295edd623dea840070351a028ef78647f8c6cad45e2  cflib_2_13_11156-Apache_V2-src.zip
            aba87d911502ec4e5730ea4a5b378cfa3afa16956e6b6d7a61c03b790a0a76d4880ff171c0137e02b0f2a8a3aed46cfa31165970b9c91221562d003da217583b  cflib_2_13_11156-java-installer.zip
            ca29104e2343824aefd8aadf14443d503a49784ba72c95a508ef87b830be051d630fc9c5350cff98277f8a98c7a5a260c7d4117750645c13d01cefc6b0ff0d98  cflib_2_13_11156-wsl-installer.zip
            3d455383c4a0e2f3c4d5e6f3d5eae3089d8d3e181d8978db5e6cc2639e45875e591ea337c2c4271e0a394563214bcc276df569747ba5bd1b7b831b712d30b6bb  cfsec_2_13_11156-Apache_V2-db_scripts.zip
            f7c6fcae8b2ec7625f7a5bc2df5b36e69f0fd54ce36bc1adcfdddba0c4f1f139dba7f7edc09e8fa2bba5b839e701daa1fdd4a4f4b4a021da6c5bcb4dc37e52a3  cfsec_2_13_11156-Apache_V2-src.zip
            a0715f6a11c29c2d5447040d8c1b0506dda830ec9f3491cb4cc33eb21ec572d1f7da49c47c8ea729f2a5309add7441928810160cc7559c67768f552f1e8434e0  cfsec_2_13_11156-java-installer.zip
            d64564b3a5e3525c4c5c8f0e446b87db4b2518cdb1b31d3c02012d94ab9a9a73453cd91baccf289d58d234fd1ec5ecb35835a4714388be6aa4b6ca9141b62590  cfsec_2_13_11156-wsl-installer.zip
            55fc46a783603b62fb541a7bc38bd4b85d87850f2cd89fc191ac8f277c811b4fa39d25a29977757f91e41fcec345516d2a44c9038143180155d4db2ec46788f0  cfuniv_2_13_11156-Apache_V2-db_scripts.zip
            9ba578aadc16a4588a2a61007861945b695c7b301f154ff53b245e11abedf22a9f440f3d0493ea227ef73c56abe3093ac3096397922651b66085a887bc0629d1  cfuniv_2_13_11156-Apache_V2-src.zip
            70802881fbf553f0ececae57b63e5b02fc0842975ccb0b29cb748e1097388428b4ea0a28fb4fd38b03693d1c9519d987d50b1a0a50a30aae7db56f589f39f4b8  cfuniv_2_13_11156-wsl-installer.zip
            2bf61ae172b27f9e922608112c73ef7f27cccd6ed718ca33fce18472784007ed25c7140fe2bdc37bcad68d5e95556cd17c2a920f2b70554d965fb367e87de973  msscf_2_13_11156-Apache_V2-data.zip
            3b605df549eecbfb316cb76c9d952e86c27a905d35544e98e8064e1b80c61329fad19dc497e5c7a28e5fe8cec0027f167efbfa2d4ede7870ac8d9d941d9ad850  msscf_2_13_11156-Apache_V2-src.zip
            92f8db5fbe977528f0935d41cfff1b73c6c016e1b985475685c4f36217656010bc0409ce0b38d28fbd6b152bdf00619b35fbbde1178c503135c2bd1fe714893a  msscf_2_13_11156-java-installer.zip
            397231e2d857726d039f01f2f645d1d04870469cbea3a2264d622250f9bc5049057c7e0c1523a456af42302e513c1f1383f49f6397215653006f47dca41682fb  msscf_2_13_11156-wsl-installer.zip

commit 8e626f83bbc1d84ee6bd1f2bf28191ce87322c67
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 25 23:30:42 2020 -0600

    Update the packaging scripts to include copies of Apache-V2.txt and LICENSE.

commit 744000633db29c55daa1dcdd4d0ddbf6f1855ca5
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 25 23:13:22 2020 -0600

    Update license files to specify Copyright (c) 2020 Mark Stephen Sobkow,
    applying Apache-V2 license.

commit cc8fa8fb0271d99c105ef27dfb705f4427ba88aa
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 25 20:48:04 2020 -0600

    2020-02-25 MSS Code Factory CFAll 2.13.11156 Builds complete using code manufactured by 2.12.11155 to clean up the memory leaks for normal C++2a execution paths
    
    The manufactured GNU C++2a code has been cleaned up so that it no longer leaks memory during
    normal execution of the xxxramloader executables, though it will leak memory if exceptions get
    thrown due to bad data or violated constraints.
    
    C++ uses one's compliment limits on integral ranges for 64-bit numbers, not two's complement.  That
    changes with C++20, but as we're not there yet, and people are likely to try to use code with one's compliment
    platforms sooner or later, I'm restricting by that current two's compliment negative limit to
    a one's compliment negative limit in the CFBam 2.13 and CFBam 2.14 models.
    
    The ManufactureCFUniv213.bash scripts in msscf_2_12/java/bin and msscf_2_13/java/bin have
    been modified to produce a standard manufactured application profile including Java 13 code.
    The resulting new code has been checking in to cfuniv_2_13's github repository, but it is not
    ready for a test compile yet.
    
    The GNU C++2a code for this release has been scrubbed free of valgrind-reported memory leak
    issues which unless exceptions are being thrown.  There are the libxxx, libxxxsaxloader,
    and libxxxram libraries produced, as well as an xxxramloader executable for validating
    documents.  The .xsd files needed by the xxxramloader executable are included in the WSL
    binary zip files, and must be copied and made readable from the searchable
    /usr/share/msobkow/2.0.13/xsd.
    
    If you choose to build the code from source, the C++ "sudo make install" steps in the
    BuildXxx.bash and InstallXxx.bash scripts will instal readable copies of the .xsds to
    the appropriate directory.  Use or modify the BuildXxx.bash scripts in a project source
    archive's cplus directory to target different compilers or platforms.  Only the GNU
    toolchain is supported at this time.
    
    There are ValgrindXxx.bash scripts in cfsec_2_13/java/bin and cfdbtst2_13/java/bin
    for running for each of the tests I ran, so you can validate the xxxramloader executables
    on different target platforms, operating systems, or tool chains.
    
    I will be adding ValgrindXxx214.bash scripts for each of the projects in
    msscf_2_13/java/bin in a later release.  I'm not going to worry further about
    msscfcli at this point in time.
    
    2020-02-25 2.13 Programmer's Notes On Next Release
    
    Task 1: Reworking the CFLib Exception hierarchy
    
    I need to plug the exception case leaks in the C++ code in the next release,
    and that will require reworking the CFLib exception hierarchy in order to
    simplify the manufactured try-catch code to only dealing with CFLibRuntimeException instead
    of all the specific implementations, which will no longer derive froms std exceptions
    except through CFLibRuntimeException.
    
    CFLibRuntimeException will become the base of all exceptions thrown by the manufactured code.
    CFLibRuntimeException will acquire the member attributes and accessors for SourceFileName,
    SourceFileLine (size_t), ClassFieldName (one or the other, depending on how and where
    exceptions are constructed), MethodName, ArgOffset (size_t), ArgName, ArgValueString,
    MinValueString, MaxValueString, Cause, and MessageText (which may be more than one line.)
    
    In addition to the usual getXxx() and setXxx() accessors, there will be a
    getMessageTextFirstLine().
    
    The method getFormattedText( SourceFile, SourceLine, FieldName, MethodName, ArgOffset,
    ArgName, ArgValueString, MinValueString, MaxValueString, Cause, MessageText ) will provide the
    heart of the message formatting, and is used by the various constuctors to set the base std
    exception text.
    
    The methods getFormattedText() and getFormattedTextFirstLine() will return std::strings formatted as:
    
            [$SourceFileName$[$SourceFileLine$]] $Cause$ $ClassFieldName$[[[.$MethodName$][ argument $ArgOffset$ ($ArgName$)]][.$ArgName$]]] $MessageText$
    
    The former method uses the full message text, the latter only uses the first line of message text.
    
    There will be CFLibRuntimeException constructors for each possible variation of optional arguments,
    each of which will initialize superclass exception with message text equivalent to that returned
    by getFormatedTextFirstLine().
    
    The "$SourceFileName$[$SourceFileLine$]" segment is used if SourceFileName is not empty.  The line
    is a size_t, so it could specify stream offsets as well.
    
    The ".$MethodName" segment is used if MethodName is not empty.
    
    If MethodName is not empty, then " argument $ArgOffset$ ($ArgName$)" may be used if ArgName is not empty.
    If MethodName is empty, then ".$ArgName$" will be used if ArgName is not empty.
    
    Cause must be specified for all exceptions, and the first character must be upperces. A single word should
    be used, or a WordPhrase, such as "Overflow", "Underflow", "OutOfRange", "Null", "Empty", or "Unresolved"
    When multiple words are required to describe the condition, they must be provided in CamelCase. Underscores
    and digits may be used after the initial leading uppercase character,
    but whitespace or special carachters are permitted for Cause.
    
    The existing exceptions will define static const class members for CLASS_NAME and S_Cause.
    They will have an assignable S_UserCause initialized to empty.  The exception constructors
    that don't specify a method name will use S_UserCause if available, and S_Cause by default.
    All other exception constructors use S_Cause.
    
    I expect to be able to keep the same exception constructor interfaces that the implementations
    have already.  I'll just be changing the details of how the constructor functions internally
    to pass on more responsibility to the underlying CFLibRuntimeException.

commit 30b52548031b207110ac875454d5f21ee4d2e4d5
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 25 13:41:43 2020 -0600

    2020-02-25 MSS Code Factory CFAll 2.13.11156-202002251345 C++ builds complete, msscfli C++ test run performed
    
    The C++ builds are complete for this release, and ready for me to start working on plugging
    the leaks in CFCore/MssCF for the next release.  I haven't test compiled CFUniv 2.13 foo Java;
    that is just some new code I'm working on and isn't a gating requirement for this release.  It was
    just something I did because I had spare time while builds were running.  I honestly expect to blow
    Java compiler limits left, right, and center with that code.
    
    msscfcli C++ still consumes over 2GB of memory by the time it is done manufactuing
    cfcore_2_14.  Apparently my issues are primarily leaks from libcfcore itself, as most
    of the CustMssCF code is pretty clean, and CustXmlLoader only gets involved for the
    initial loading for the knowledge base.  When the knowledge base is initially loaded
    for CFCore, the executable is a svelte 600MB in size.
    
    I need to refresh the knowledge base in 2.13 from the current 2.12 rule set before I
    issue a release.  The model changes have already been made.

commit 605993adb2dba8582707018ab024f26a1401714f
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Feb 24 21:14:40 2020 -0600

    2020-02-24 MSS Code Factory MssCF, CFUniv 2.13.11156-202002242130 cfuniv_2_13 remanufactured by 2.12.11155-202002242100 to produce Java 13 code for CFUniv 2.13
    
    The ManufactureCFUniv213.bash scripts in msscf_2_12/java/bin and msscf_2_13/java/bin have
    been modified to produce a standard manufactured application profile including Java 13 code.
    
    There is work to be done before I can attempt to build the cfuniv_2_13 Java 13 code with the
    Java 13 compiler under bash and Apache Ant scripts.  For starters, I'll need long-winded variants
    on the module-info.java files that I always crib from existing applications.
    
    This is the raw manufactured code.  It has not been touched since manufacturing save to do
    a "git add ." and run GitMakeBashExecutable213.bash before committing the new code and tagging
    it for this release.
    
    This is a github-only release.

commit 87b041b8ab4f988a0d988a50eaff4664cfc3db5d
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Feb 24 12:41:56 2020 -0600

    2020-02-24 MSS Code Factory CFAll 2.13.11156-202002241245 Manufactured by 2.12.11155-202002241215 to fix the last of the normal operation memory leaks
    
    All of the CFDbTst 2.13 valgrind tests for cfdbtstramloader now pass without a leak in sight.  I am
    thrilled!  It has been a long and frustrating 4-5 days to plug the last of the leaks.  That isn't to
    say it won't leak when throwing exceptions, but during normal operation, the code no longer leaks.
    
    I still want to get msscfcli built and try running that under valgrind to see how bad the state
    of the main factory is, but I don't plan on fixing any leaks that are specific to the custom code
    layers it uses for this release.  However, it does exercise some of the common application library
    interfaces that CFDbTst 2.13's test suite don't, so I'm holding off on doing a release until
    I can check whether those routines are ok.  I want the common application libraries clean as a whistle
    before I issue release pair 11155/11156.
    
    This is a github-only release.

commit adc00ecec54456a9b61ae471456c3af3d3cc9af7
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Feb 24 01:44:51 2020 -0600

    2020-02-24 MSS Code Factory CFAll 2.13.11156-202002240145 Update CFBam 2.14 model to specify limit of -9223372036854775807 instead of -9223372036854775808 for Int64 minimum values
    
    C++ uses one's complement limits on integral ranges for 64-bit numbers, not two's complement.  That
    changes with C++20, but as we're not there yet, and people are likely to try to use code with one's complement
    platforms sooner or later, I'm restricting by that one value in the tool.
    
    I've remanufactured all of the 2.13 projects with MSS Code Factory 2.12.11155-202002240045
    to make sure everything is 100% in sync with the changes I made to the knowledge base over
    the past week to clean up memory leaks.  I really believe this should be the release that
    finally plugs the last of the CFDbTst 2.13 valgrind test leaks (particularly the thorny
    test 0035-ReplaceComplexObjects that has plagued me for three or four days.)  If I'm right,
    I won't want to restart this build set again, but will continue on after my CFDbTst tests
    pass (fingers crossed!)
    
    That won't mean the factory itself won't leak for 2.13; I won't be plugging any leaks in that
    custom code until the next release, though I'll probably run the 2.13 C++ factory under valgrind
    just to have a rude awakening as to how bad the situation is.
    
    Notice the bump in version numbers to track the injection of a 2.11 release with the same change.
    I need to have MSS Code Factory 2.12 and 2.13 enforce that new limit when people are editing models.
    
    This is a github-only release.

commit 5e70245201614c4ba675af7a41e98b689ee60dbb
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Feb 23 21:40:38 2020 -0600

    2020-02-23 MSS Code Factory CFAll 2.13.11155-202002232145 Remanufactured by 2.12.11154-202002232045 correcting leaks, bugs, and oversights
    
    Although I created the readCachedXxx() routines yesterday, I'd neglected to actually use them
    in the deepDisposeXxx() routines.  That oversight has been corrected.
    
    Some of the leaks were still corrected because I had used the new routines
    in the reallyDeepDispose() probes, and because I found an unnecessary buffer
    clone in the RAM create routines that was probably causing some leakage for
    class hierarchy data.  Those leaks were at least plugged by my last round of
    testing.
    
    I don't expect to be doing any more testing until the wee hours of the morning
    after I've had some sleep.  I'm being forced to cut my caffeine intake to a small
    fraction of what it used to be because I've become sensitive to it, so I'm feeling
    tired and draggy this evening.  I might well have to give up my beloved coffee
    entirely, but I hope I can at least continue having a couple of mugs when I get
    up in the mornings.  I'd miss my morning coffee terribly, having been addicted to
    the stuff for 42 years since I was 14 years old!
    
    This is a github-only release.

commit 58ef002124e70406095d23d514db30f5b8c32c63
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Feb 23 01:12:05 2020 -0600

    2020-02-23 MSS Code Factory 2.13.11155-202002230110 Manufactured by 2.12.11154-202002230020 to get readCachedXxx() methods to scan the members map when an index entry is not found
    
    The readCachedXxx() methods now scan incomplete data if required.  By that I mean that as they don't probe the database,
    they only return the data currently in the cache that matches the specified index key values.  They prefer to use the
    maps of index keys to find the data requested, but if they can't find a map entry, they do a full scan of the members
    map looking for instances that match the key and return that instead.  Otherwise reallyDeepDisposeTable() won't
    be able to properly find and clear any and all data that is related to the object being purged from the system,
    resulting in leaks.
    
    libcfcore, libcfsec, and libcfint had clean-compiled with the changes, so I don't expect issues with the
    remainder of the builds.  My only question is whether this change resolves my remaining leaks for valgrind
    test 0035-ReplaceComplexObjects.  If it doesn't, then I've been chasing the wrong cause of those leaks and
    will need to investigate further.
    
    This is a github-only release.

commit 960983090cc8237dc476cc3b4aad34f01feee822
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 22 19:38:40 2020 -0600

    2020-02-22 MSS Code Factory 2.13.11155-202002221940 Remanufactured by 2.12.11154-202002221920 to implement reallyDeepDispose() rather than forget()
    
    The forget APIs from the Java code have largely been replaced by reallyDeepDispose[Table]() and
    deepDisposeXxxByYYY() methods, save for the forget() methods in the Obj and EditObj, which
    invoke reallyDeepDispose[Table]().
    
    There was a lot of work to be done before I could get the new Java code to clean compile,
    but once it did so, the CFDbTst 2.13 Java test suite ran flawlessly on the first try.
    
    I haven't been doing anything with C++ for a few hours; I needed a break from builds.
    
    This is a github-only release.

commit 400634d855c48ace6e9b8e2785f8076c92855094
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 22 11:41:17 2020 -0600

    2020-02-22 MSS Code Factory 2.13.11155-202002221145 Manufactured by 2.12.11154-202002221050 because I missed a couple more "Realtion"s
    
    This time I searched the whole of the knowledge base for "Realtion" typos and fixed both that
    were still in there.
    
    This is a github-only release.

commit fdb0c49084fd491921cf05d5c08fc505deb4ce15
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 22 03:59:26 2020 -0600

    2020-02-22 MSS Code Factory CFAll 2.13.11155-202002220400 Remanufactured by 2.12.11154-202002220350 to recover from my own stupidity
    
    Restoring from github to the 2.12.11154-202002202140 knowledge base has worked out well.
    I reapplied my little changes to use the manufacturing SchemaDef interface as the
    TableObj.schema member, and things started clean compiliing right from the get go.
    
    I should know better than to be mucking with core code when I've only had 4 hours of sleep in 30.
    
    As to whether it runs and whether test case 0035 still leaks, I'll find out in an hour
    or two.  libcfdbtst is up to the 'Op's in the build, so I'm comfortable that the code will
    at least clean compile and link.
    
    This is a github-only release.

commit 52ae3ed0fe4677c041af0f1255b6344938ae75c3
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Feb 21 02:59:33 2020 -0600

    Make the valgrind exit cleanups #ifdef'd so I can turn it off for
    production, relying on the program exit to clean up the memory much
    faster than explictly releasing all those complex objects.

commit 13662ae3ee71fcaa4d7227d197fa85f5e7df81bc
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Feb 21 02:57:46 2020 -0600

    Clean up all allocated and connected resources in preparation for
    valgrind testing.  This will slow down exits significantly, but so
    be it.

commit 16bd789c9e3dda98567a2c82eec24369c5f13674
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Feb 20 19:02:10 2020 -0600

    2020-02-20 MSS Code Factory CFAll 2.13.11155-202002201900 Remanufactured by 2.12.11154-202002201850 to rework deepDispose and added new methods for it
    
    I've reworked the deepDisposeBy$Index$() methods of the SchemaTableObj, and
    completely rewritten reallyDeepDispose( Obj ) as reallyDeepDisposeTable( Obj )
    variants that occur in all tables, not just in base class tables.
    
    I've implemented reallyDetachFromIndexes() based on the realize code for a TableObj,
    except it doesn't deal with keepObj's and it doesn't rebind anything to the indexes.
    It also deletes duplicate index maps if they drain to empty, which used to cause
    problems for the realize code as it clobbers the very index maps you're trying to
    work with, resulting in incorrect behaviour later in the code.  I well remember
    debugging that hairy problem I'd caused myself in pursuit of memory cleanups.
    
    The implementation of reallyDeepDispose() uses subclass evaluation to invoke the specific
    table variant of reallyDetachIndexes() before it deletes the object so that the entire
    hierarchy of references to the object is released.  Whenever a duplicate key map becomes
    empty in reallyDeepDetachIndexes(), the duplicate key map is deleted and the entry for
    it erased, otherwise I'd leak those maps.
    
    The implementation of reallyDeepDisposeTable() now properly chases down DelDeps
    or Cascading deletes, according to the specifications of the table, and then either
    deletes the object instance that was passed in, or invokes the superclass TableObj
    variant on reallyDeepDispose.  It wasn't possible to have a common implementation
    in the base table because the base table knows nothing about the subclass-specific
    DelDeps and sub-objects.
    
    I've implemented readCached() variants that never probe the database,
    and which are intended for the sole use of the deepDispose() code.
    But I made the interfaces public, because you never know when some
    application programmer might find such behaviour handy for other
    reasons.
    
    I am ready for test builds now.
    
    This is a github-only release.

commit f3c98743a9c83e90b42efea57d602968fbcb1952
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Feb 20 02:06:36 2020 -0600

    2020-02-20 MSS Code Factory CFAll 2.13.11155-202002200210 Manufactured by 2.12.11154-202002200200 to plug some seriously pernicious leaks
    
    The most pernicious leak I've encountered to date was in the EditObj rules.  The base of the class
    hierarchy creates a clone of the original object's buffer and saves it to buff.  But then subclasses
    were clobbering buff with NULL, and the getBuff() method was creating a replacement instance.  Neither
    of those things should have been happening; it was a hold-over from Java code, where I relied on the
    inheritance and always-virtual Java functions to use getBuff() to instantiate the EditObj.buff in the
    first place, rather than trying to guess what class was actually being instantiated so I could create
    the buffer explicitly.  That works for Java, but it is bad form for the way I've written my C++ code.
    No wonder all my scanning of higher level logic was failing to find the ultimate source of the leak --
    I wasn't looking in the right place at all!
    
    CFDbTst 2.13 C++ test 0035, replace complex objects, was still leaking under valgrind.
    Once again I neglected to allow for the fact that the read, create, and update methods
    return clones of the saved buffers, so you don't need to re-clone them to edit them.
    I also wasn't deleting the buffers I'd created before exiting the routines, so the
    edit clones were leaking, too -- a double leak.  Valgrind hated that chain code.
    
    I realized the same issue that affects deletes for chained objects will
    also affect the move operations, so I plugged those leaks while I was at it.
    I don't have any test cases for the move methods, but they should be ok now,
    as long as the code clean-compiles.
    
    Deleting stale references gives a handy traceback under valgrind, but it still results in
    the program crashing.  I no longer delete the buffers that were returned by the reads and later
    passed in to updates in the RAM layer.
    
    I should be testing this round of fixes in about an hour.
    
    This is a github-only release.

commit b69e7de2b0fc14f39de5697348658607e6732d4e
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Feb 19 15:08:02 2020 -0600

    The only reason I wasn't seeing my code crash for any and all edits
    opened on subclass objects is that I'd obviously found it crashing
    and implmented an extremely stupid hack to get around it instead
    of fixing the root of the problem.  Well, the root problem has been
    fixed.  Edits should no longer leak buffer instances.

commit 09f01af090edc87999a59d7bf04120670f94e029
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Feb 19 05:46:35 2020 -0600

    2020-02-19 MSS Code Factory CFAll 2.13.11155-202002190545 Still trying to plug those last few leaks
    
    I'm still trying to plug those last few buffer leaks, and have tweaked the core object TableObj
    implementations slightly in an effort to resolve the issues.  However, I am firmly convinced
    the leaks have to do with the linking of newly created objects to the tail of a chain in the
    RAM layer, particularly as I've tried deleting objects (albeit simple ones) with some CFSec 2.13
    valgrind tests.  I even added a couple more test cases this morning, and they run clean, too.
    The main difference between the new test cases and the ones in CFDbTst 2.13 is that CFDbTst
    deals with object chaining.
    
    I'm hoping I also have a fix in place for the leaks of the tmpBuff in the SAX parser.  I think
    that is fixed, as my CFSec 2.13 tests exercise insert-only, update, and replace behaviours that
    should cover all the test cases that could lead to leaks in the SAX parsers themselves.
    
    This is a github-only release.

commit bccbbdec65d179c20d2414f88ec983591e5126b6
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Feb 19 00:00:19 2020 -0600

    2020-02-19 MSS Code Factory CFAll 2.13.11155-202002190000 This release should plug the last of the generic application leaks
    
    Most of the CFDbTst 2.13 valgrind test passed.  The ones for testing attribute bounds failures
    and excepton throws were leaking high-level buffers in the CFCore code; I'm pretty sure I've
    got that plugged in the 2.13 code base.  As to the manufactured code, there were several leaks
    plugged.  I believe the last leak I describe for this release has been plugged and should resolve
    the leaks for tests 0034 and 0035.  See the 2.12 release notes for details.
    
    This is a mostly github-only release, but I am going to post a package of CFLib 2.13 as the
    changes made to that code are necessary in combination with the 2.12 rule changes to plug the leaks.

commit 9c1a1a8deb1a49202548efdc8fa71493bce6fe38
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 18 15:49:46 2020 -0600

    2020-02-18 MSS Code Factory CFAll 2.13.11155-202002181600 First four valgrind tests run clean
    
    The first four valgrind tests which are located in cfsec_2_13/java/bin
    run clean, with no direct or indirect memory leaks found any more.  It
    has been a long haul, but the basic functionality no longer leaks memory.
    
    Now to proceed with the rest of the build stack and run the other
    valgrind tests I have in cfdbtst_2_13.
    
    The fixes for uuid_t leaks were hideous to get implemented in the rules.
    C++ is very fussy about arrays vs. pointers, but eventually I got it done.
    All uuid_t instances in the manufactured code are now automatic variables,
    and no longer leak.
    
    The leak of the SAX hard-coded element handlers is plugged, as is the leak
    of my SAX contexts in the CFLib begin/end element processing.
    
    Most of the CFLib UUID manipulation functions are gone, replaced by direct
    calls to the uuid_xxx() functions defined in /usr/include/uuid/uuid.h.
    
    There were also leaking key allocations in the RAM layer which have been
    plugged.
    
    Since I switched back to dynamic_cast from static_cast, I no longer see
    buffer instances leaking, which confirms my suspicion that static_cast was
    using the interface destructor instead of the object destructor.
    
    This is a github-only release.

commit b1e00cc2958237818c14bc20bdbc45fd06ec8310
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 18 01:24:52 2020 -0600

    2020-02-18 MSS Code Factory CFAll 2.13.11155-202002180130 Switch to using valgrind for leak detection, plugged a number of leaks
    
    I switched to using valgrind for leak detection because DrMemory just flat out does not work
    under WSL 64-bit Ubuntu.  In fact, the tool often crashes.  It reports no leaks whatsoever with
    my code, but valgrind finds plenty of them.  Maybe DrMemory works better under Windows, but for
    me it is a useless tool.  When it does report anything, it pretty much says "to be implemented"
    for location information, which doesn't help me at all.
    
    With testcflib running under valgrind, the only time I'm still seeing memory leaks for TCFLibBigDecimal
    is in the test cases where I'm forcing bad digits/precis values to cause constructors to throw exceptions.
    This is a perfectly reasonable time to leak memory, as it means your source code is completely invalid
    and won't compile and run until you use valid values for digits and precis.
    
    I did attempt to plug leaks in my UUID allocation and deallocation; I don't know if I've succeeded
    or not.  The changed code clean compiles and now uses delete[] instead of delete for uuid_t* pointers,
    as those pointers reference a char array internally when you look at /usr/include/uuid/uuid.h.
    
    There was also a case in the Xml code for CFLib where I needed to use an array delete, and I'd neglected
    to release my SAX parsers that were allocated by the Xerces factory for them.  Last but not least, I wasn't
    calling the mpfr routines for releasing the pool as part of releasing CFLib, nor the Xerces-C routines for
    releasing Xerces-C and its memory pools.  I'm hoping my next test runs show those leaks as having been
    cleaned up.
    
    Not only have I added 4 simple Valgrind test case scripts and test data to CFSec, I've added a Valgrind
    test script for each piece of C++ RAM test data that CFDbTst defines.  When all of those tests run clean
    or only with acceptable errors, then I'll issue a release, and then start working on another release to
    go through the memory leaks in CFCore and CFBam's customization of it used by MSS Code Factory 2.13 C++
    itself.  My goal is to whip the C++ version into good enough shape to be used for production.  Consuming
    2GB of RAM for a simple test case of manufacturing CFCore 2.14 is completely unacceptable to me.  I'm a
    far better programmer than that; it just takes time to work out the kinks, and I've worked out as many
    as I can through manual code inspection.
    
    My saving grace is that I fix entire classes of memory leak because the knowledge base rules fix them
    wherever they occur once I plug them once in the rules.  The long list of leaks will quickly be whittled
    away as a result, though it is going to take a lot of repetitive building and several days to get to
    pass each of my release gating test criteria.
    
    This is a github-only release.

commit d4b3df2f520a3ab24dfd12c65b040f1cdaaa5ed5
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Feb 17 13:56:33 2020 -0600

    2020-02-17 MSS Code Factory CFAll 2.13.11155-202002171400 Code manufactured by 2.12.11154-202002171310 to rework date/time/timestamp implementations
    
    CFLib has new getUTCXxxInstance() methods that return instances of the underlying C++ classes
    instead of pointers to instances.  Whenever and wherever possible, these new methods are now
    used so that as many automatic variables are used by the C++ code as possible.  Although this
    change doesn't plug any leaks, it does reduce the chance of them occuring in the future as
    there are fewer instances of date/time/timestamp pointers in the code.
    
    The date/time/timestamp implementations have been reworked in a futile attemt to plug global
    memory initialization leaks in CFSec.  But I now believe the leaks are actually the static
    UUID variables I allocate as initializers, as all the date/time/timestamp initializers are
    now automatics, as were all other initializers in the first place.  I might have one remaining
    class of global initializer to rework in the form of the TCFLibBigDecimal used to implement
    Number atoms, but I'm not too worried about that and I believe the C++ compiler won't let you
    initialize template globals due to issues with where, when, and how templates are instantiated
    as required at runtime.
    
    This is a github-only release.

commit 0e1603672b51d6d8734a1c1cf65d4ac25753f129
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Feb 16 20:11:25 2020 -0600

    2020-02-16 MSS Code Factory CFAll 2.13.11153-CFAccPrototype Accounting prototype complete
    
    Most of the C++ libraries and executables have not been recompiled for this release,
    as the only low-level change was including cstdio in CFLib.hpp.  Only libcflib,
    libcfbamcustxmlloader, msscfcli, libcfaccram, cfaccramloadfer, libcfunivram, and
    cfunivramloader have actually changed.
    
    I have a fully functional but very simple accounting application implemented.
    I'd shelved it for a long time because I needed TCFLibBigDecimal for C++ in order
    to implement the C++ server side of things for accounting.  But C++ properly enforces
    round-on-the-fly calculations as required for bank processing now, so I'm pretty
    pleased with the end result.  I'll need to implement a similar Java template if I'm to
    enforce proper bank rounding for Java servers.  I should also provide TCFLibBigDecimal
    with a method for rounding that takes a frac argument, so you can do things like round
    a 5-fractional number to 2-fractional (e.g. calculate interest at 5 fractional digits
    precision, then round the result to 2 fractional digit dollars - remember this is only
    a prototype - it doesn't do that yet.)
    
    As to the logic for the accounting application, you issue an Invoice, which credits
    the Account because it is money you are owed.  When you receive Payment, it creates a debit on the
    InvoiceAccount because you are no longer owed that money.  The key difference between an Invoice
    and a Fee is that an Invoice is typically used for taxable line-item purchases of goods and services,
    where Fees are often flat-rate charges to the customer for services rendered that may or may not
    be individually taxable.
    
    When you receive a Bill, it debits the BillAccount because that is money you owe.  You issue a Cheque
    to pay the bill, crediting the BillAccount and debiting the ChequeAccount.
    
    Placing a PurchaseOrder does not debit or credit the ledger, because until you receive a Bill for the
    order, you don't owe anything.
    
    When you make a Deposit, it credits the account you deposited it to.
    
    When you charge a Fee, it credits the Account because it is money you are owed until you received Payment.
    
    Transfers are used to move money between accounts, crediting one and debiting the other.
    
    EFT (Electronic Fund Transfer) flags are supported for Cheques, letting you specify an EFT id code for
    the cheque instead of having the system generate the next cheque number automatically when finalizing
    the cheque.
    
    As to MSS Code Factory 2.13, I neglected to copy the Cpp and Cs server method bodies in
    the SchemaRef handler, and also neglected to copy all of the Cs code customization attributes.
    The changes to the Java version of CFBam 2.13 have been propagated to the C++ version,
    forcing the rebuild of libcfbamcustxmlloader and the recompile and relink of msscfcli.
    
    The sha256sums for this release are as follows:
    
            6e534dbc7dd5f5aab1e80b3f7ba37121881e367a922099b04990a62ce6f1e57c  cfacc_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            3891c1f2f8f4201886b3e96b72752e13fa20218a182ed4956ae8dec2445e8c66  cfacc_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            bceaf978adec47e825945e733c649df0e46ce272a52de99688bfc8c9dd8ae6f1  cfacc_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            5971d5324857319ec92c2ea50b904adad878d36a9a2ade40dac5079aa3790f6b  cfacc_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            6c9ae4e7eb4bcdb9eea63a1c3c4d8118bf7d96c301343350a606b0bf60060177  cfast_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            d0504fadbc9bf45899dd8279d4c54ae3d6d320adbdd9ecfcee985c8463316bde  cfast_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            7336b689dfa5a70de236822b12fe8f69fbca3c1ce2da53009dfcea7e5945ef60  cfast_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            ec1bcf3773759da55072cbe5d699293122a08b63e1833d730ba7a6c24d6b4d9b  cfast_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            009fcdaff8f7e0655821e219570a1c854337f08d3d0bf765deffd1cf772bdf79  cfbam_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            adc74220cb649ef1947bd3dd309b4d4702394c0bc9976eb9015443a84dc531c7  cfbam_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            66ed16056049f250aa8378965d74569566ded0c920dc7cecdf1b5460a5be2eaf  cfbam_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            8d3cec2477d78caf88f6f41ece1746a0c6e50d6657638b7d4d927916a72b41a4  cfbam_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            56665e1cd4930d3ac5ba8b97bba3542666a1b4c8265b9514c616db506a237d43  cfcore_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            47cca4e7cb0920f0c6661926392d387e8a4f8382777e0a2e1152e336cfa3edb2  cfcore_2_13_2.13.11153-CFAccPrototype-installer.zip
            6d998a74f61c6481d7c777db60778a94f2857281b0620c6ab446bb74dbc1e9d3  cfcore_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            838c434f27f6e03a458b4fe6beef2f21b7ca9802874657af4d5d6ef31c994342  cfcrm_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            a7a9a2644c5b3dbfe39d47371bd84596485cc1197d5f2132642e6cfd75246453  cfcrm_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            89fb0689919df11f52b1d5890928628efa3fde2a9a697ff5b061799ce85d5fc3  cfcrm_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            d3ec8bb5884f1136e4978abb76f90734d2aca91e1a88af50e054bdc03ed1dc3c  cfcrm_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            855c35007b466b56b252a26a2957d161bca40423d01a3553315b410510e34b88  cfdbtst_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            35689052e8de857cca92654d46afddb04cca6ee2f6498caa18f9d8ecacf3367f  cfdbtst_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            8774cafd386015a63f716c810e2f9cf5f17520183a0d5b902baf3fe10e59084c  cfdbtst_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            b19f3b02dedefa2f029dee44630b4b33d480b4909b00b04a38e65dbb1fef835f  cfdbtst_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            7111e1f5766117436c6ab8062d95c988d3c77d069faf88d721ae65b72dec05b8  cffrsw_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            8cde6b8f126c1f98d062f67c1557c5ed0b0dd9b9641769f6c384da8f9f40b502  cffrsw_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            68d1d8af38bbdd5671750f8698fb8c92251ac03eafbde3b122b5c1114ed55b93  cffrsw_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            cd3a12fae4268e11527a6f3d2c861152f69e03bd8b3a6639da95dd842a40efeb  cffrsw_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            193d63d25cedfdf505260969003ef00faf2a956a033ba820c5197a42e7f64d94  cfint_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            15716e4a924fc121e8ba74c91be567920ce9cf5b71665be383762e758b469ca0  cfint_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            4ca7d34221bdb1c6769436ac96541ffd9308a7e43f6484efa9461a66fd08e3e0  cfint_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            729731914e60e175c4dd329e1b53362a598b4117399dc2ffae627a8c150bf67b  cfint_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            f4cf1e92ee0b4626b4b2d7892a63ef4c06bc5c6e0f7c59f9be23f65f4a64adab  cflib_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            3344b252038f5928759cfb924a75254e8174b929aca1b5ef1b2cb68432fc9dfc  cflib_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            f81879a62b39cd07c656b3f0326d14bdb9badd31ef09d74539b8401872e1352d  cflib_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            903170c7d0eb46006db508c19dd589cc35efa00a0d0101d1620eb3893b91d35f  cfsec_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            9c03c0256f57708fa35eda307503ea629d60180d3bb2908a00ee3bdb94b2d22d  cfsec_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            6e86e74f656c3846edf126ffd39d9a5e1b8f4d3fbf450ea69a76aafc1bb1e8ee  cfsec_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            a92c8f39ec0ef606fd5f22cd77947e189f1a941b1c9cd4507992fa2b1b281f03  cfsec_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            71cfea615e740d12c387ba87d7eb78f8644a8ab30c8b4d488f3c8d0b97a70f40  cfuniv_2_13_2.13.11153-CFAccPrototype-Apache_V2-db_scripts.zip
            3f6d42de770217d5401c5ce5f019c4899b185ccc842cdf45ed4bd5fdc8c28b70  cfuniv_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            fb58fc9cd0a08c801cd1885ba6030d0ab3fb9ff5f2b2509835a4b5d349cc70ac  cfuniv_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip
            02f3b66386cf13952d616253f5d3e1cc8d81408ce5bf48a244ef229cf6a151d7  msscf_2_13_2.13.11153-CFAccPrototype-Apache_V2-data.zip
            99ad411896f2873a29324c3c9c73ee9de02ee9be2108061a7dc950feda0ded41  msscf_2_13_2.13.11153-CFAccPrototype-Apache_V2-src.zip
            b4df3656e294a540177f1ac3b795ad1634cd769b807fe32c8b62ced18312b949  msscf_2_13_2.13.11153-CFAccPrototype-java-installer.zip
            c6693dc4d70a27768ab0e4ff6aa211493047c95280de67d2fd9547104aa5a39d  msscf_2_13_2.13.11153-CFAccPrototype-wsl-installer.zip

commit 8b6f40d5a2853a85103ae72aeba19e31d5d5ca7a
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Feb 16 05:22:51 2020 -0600

    2020-02-16 MSS Code Factory CFAll 2.13.11151 Manufactured by 2.12.11151-R0
    
    The 2.13 code base was manufactured by 2.12.11151-R0.  With some of the changes
    I'd made during that 2.12 release, I thought it best to do a full-stack build
    of 2.13 to validate the code it was producing.
    
    Note that MssCF 2.13 is fully functional and capable of producing 2.14 code
    from the 2.12 knowledge base migrated to 2.13, and the 2.13 models migrated
    to 2.14 models.  There is no point building that code, though, as it is currently
    identical to 2.13 code save for version numbers.  Note that msscfcli 2.13
    for C++ still has significant memory leaks at run time, and should not be
    used for anything except small test cases that won't run your system
    out of memory.
    
    My next task is to enhance the CFAcc 2.13 model in msscf_2_12 to implement
    the custom C++ server method code.  I've finished the rough
    coding of those changes, save for having to create a finalizeFee() implementation
    for both Java and C++ yet; apparently I neglected to finish the job when
    I'd created the Java versions all those months (over a year?) ago.  Right now
    the compiler produces warnings for the C++ server methods, because they don't have
    return statements but define return types in their method signatures.
    
    Fortunately applying the CFAcc 2.13 changes will only affect the RAM storage
    layer, so all I'll need to build to get the corresponding 2.13.11153 release
    out the door are libcfaccram, libcfunivram, cfaccramloader, and cfunivramloader.
    There will be changes to the libcflib interface, but only the inclusion of another
    header (cstdio), so there won't be any need to rebuild all the other packages
    because of it.  The actual methods defined by CFLib will not be changing for 2.13.11153.
    
    The sha256sums for this release are:
    
            6e534dbc7dd5f5aab1e80b3f7ba37121881e367a922099b04990a62ce6f1e57c  cfacc_2_13_11151-Apache_V2-db_scripts.zip
            64fef2b60e184cb1606ac46ea840ca92ec17de86899ca114e7272c39873fa36e  cfacc_2_13_11151-Apache_V2-src.zip
            d35d877b086b4f0b25e5ab6027de120c0d44d019333511ea833be07eb437f4ab  cfacc_2_13_11151-java-installer.zip
            99cae9c52e00ae5f6becc72f6fb311dbe4ca765856285d1c064ae0700882ec97  cfacc_2_13_11151-wsl-installer.zip
            6c9ae4e7eb4bcdb9eea63a1c3c4d8118bf7d96c301343350a606b0bf60060177  cfast_2_13_11151-Apache_V2-db_scripts.zip
            25d8ba188515be9878d3aec0def4f7f855c91a15dc2b05992df497bbba98f889  cfast_2_13_11151-Apache_V2-src.zip
            880892dd0705289507007c8356d2640fdce08c0ae88c9174ee4eb2ddfd57037d  cfast_2_13_11151-java-installer.zip
            ab4e39e9da574730045af522f28affcca07f45085a5c689f402dcf8922b6ec50  cfast_2_13_11151-wsl-installer.zip
            009fcdaff8f7e0655821e219570a1c854337f08d3d0bf765deffd1cf772bdf79  cfbam_2_13_11151-Apache_V2-db_scripts.zip
            12f8332c7a4c84f1d984b1267567d58624eda36156edc8baebfc1529e47e825a  cfbam_2_13_11151-Apache_V2-src.zip
            457df34db82c6e2847c7c83649e0d9d97000a81305557ce8cbdfcda4e0141ebe  cfbam_2_13_11151-java-installer.zip
            ab5e2a68dca5124a0e68132f0214136b2a065f2ae55d933fdbbd7f81f5ab1592  cfbam_2_13_11151-wsl-installer.zip
            acc8bec27f6028435a88941c1dd6de9bea4cb356773fbc8036a9f2dc031d07d1  cfcore_2_13_11151-Apache_V2-src.zip
            5281d7d200d37c9e9183501f2840b7e138598ce5f103f6133b616d527af856f6  cfcore_2_13_11151-installer.zip
            9d35a44e0ed993a64533d0195ee855e33d6f0dbd306907ef3ee67842f0cfe335  cfcore_2_13_11151-wsl-installer.zip
            838c434f27f6e03a458b4fe6beef2f21b7ca9802874657af4d5d6ef31c994342  cfcrm_2_13_11151-Apache_V2-db_scripts.zip
            543b4bd1f01cc57e138e337bd6c655998453cb357f9adc65b698dd7ac429b18f  cfcrm_2_13_11151-Apache_V2-src.zip
            4941012bccc62284c02475c20bca21c25f7c1885253af0eac44f7297722a4fe2  cfcrm_2_13_11151-java-installer.zip
            8878a4cfffefa1628f5c5c3c29532ec58c7b7ae5b4ac221521f3be3ebfee7ea3  cfcrm_2_13_11151-wsl-installer.zip
            855c35007b466b56b252a26a2957d161bca40423d01a3553315b410510e34b88  cfdbtst_2_13_11151-Apache_V2-db_scripts.zip
            501d10448ed18e3084161961da01d978db52dc4b4aeabd0296d0ba83c9e63cd2  cfdbtst_2_13_11151-Apache_V2-src.zip
            9f390360732acc8f5ef20d72910837869d6c063aa69ab5bed45666f24bf9cd7a  cfdbtst_2_13_11151-java-installer.zip
            f4984da8ad6382aa5155ea2bfc8b67d44be0fbe36c3041284eacac4010f7816a  cfdbtst_2_13_11151-wsl-installer.zip
            7111e1f5766117436c6ab8062d95c988d3c77d069faf88d721ae65b72dec05b8  cffrsw_2_13_11151-Apache_V2-db_scripts.zip
            19df1b8e0620fc806ad5f4b2e6863fcc1bb85c26619e0f0cca8ed8ecf3f2f749  cffrsw_2_13_11151-Apache_V2-src.zip
            c0474f65043e0fc88bf9607a79f4f5b5a2a52e5bb11e28d919e377551ca6e8e8  cffrsw_2_13_11151-java-installer.zip
            96a1ade9bb5f97a2a88264c74d348d9ca42b2b45eb08ff4f65a4356f6599e2ba  cffrsw_2_13_11151-wsl-installer.zip
            193d63d25cedfdf505260969003ef00faf2a956a033ba820c5197a42e7f64d94  cfint_2_13_11151-Apache_V2-db_scripts.zip
            50dcbc924e6b92aad0166bc571e419509809f7a4200f1a6c47dc2890aa3a463b  cfint_2_13_11151-Apache_V2-src.zip
            db4354f1c9f13b43cc3cc5871da84cedd27fd516a18503fbc2adf3e059c62bb4  cfint_2_13_11151-java-installer.zip
            58e2443a89005da19f9227831da258078456e1224779e0564d373de85549d3dd  cfint_2_13_11151-wsl-installer.zip
            4f4b99a613b741bd4d9cdd98debc656ef482fecba2e365d74941023b515aefa8  cflib_2_13_11151-Apache_V2-src.zip
            f3c03d9855dc01bbcb1df29dc3a88ed092815adffe7014a024314dbdfe91abe8  cflib_2_13_11151-java-installer.zip
            2d5260e6f7a9a8294653b58f67757211fb2dc53e2d974eeb40406af3b7212288  cflib_2_13_11151-wsl-installer.zip
            903170c7d0eb46006db508c19dd589cc35efa00a0d0101d1620eb3893b91d35f  cfsec_2_13_11151-Apache_V2-db_scripts.zip
            441c989807d046592d938c3118381b2feee283d6cb09b27e102bc516a8e7601f  cfsec_2_13_11151-Apache_V2-src.zip
            da3afd0d74efcb73ae25784f76676acb9acb699b2d3c5f7f09da2b08cae5cf38  cfsec_2_13_11151-java-installer.zip
            5ba62ab222ec9d96dad149deeb9d959790d6be53702809ce84fddd2dc646bc2a  cfsec_2_13_11151-wsl-installer.zip
            71cfea615e740d12c387ba87d7eb78f8644a8ab30c8b4d488f3c8d0b97a70f40  cfuniv_2_13_11151-Apache_V2-db_scripts.zip
            42d6a271287547f79c92731fa9ab31d0d8ed772667bfcda062f3fb1acfb22991  cfuniv_2_13_11151-Apache_V2-src.zip
            953dfc542b0c5906b8b5f12f163c154424b9ed3aa64771eddf14d3b3d806a0c0  cfuniv_2_13_11151-wsl-installer.zip
            02f3b66386cf13952d616253f5d3e1cc8d81408ce5bf48a244ef229cf6a151d7  msscf_2_13_11151-Apache_V2-data.zip
            13190d79f97189e7ec1c5e2fafa6d1d88399d262fbf267d8db3c82ed8a3b2271  msscf_2_13_11151-Apache_V2-src.zip
            944f055aca8565a3e986168dddb24ee9754c67273928023fca3532e5350fd691  msscf_2_13_11151-java-installer.zip
            80dc9575839684ea1d07217e9759e30ece99ffc09bc24fad7462f92abce53b12  msscf_2_13_11151-wsl-installer.zip

commit e4a2cdaac33b52dca4137fccedf38c52aa91f25e
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 15 05:03:09 2020 -0600

    Remember to use correct version of XSD's

commit 494600da09299ef635f2875683923544b5e58b80
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 15 03:48:23 2020 -0600

    2020-02-15 MSS Code Factory CFAll 2.13.11151-20202150345-EditedModels Ready to do builds in the morning
    
    The 2.13 code base has been remanufactured by MSS Code Factory 2.12.11150-R0-202002150300,
    just to make sure every last change to the knowledge base has been applied; I can't
    remember if I changed any indentation after verifying that the manufactured code
    was matching after the 2.13 models had been edited, so I remanufactured it with
    the latest and greatest version.
    
    The edited 2.13 models produce virtually identical code to the unedited models
    now, give or take some sequencing changes due to slight differences in the order
    in which tables are created and thereby returned by the subclass table iterators.
    
    The Java code clean compiles and the migrated 2.13 BAM editor has been run to
    make sure it is ok and that my edit scripts are valid for the 2.14 models.
    
    The knowledge base has been refreshed from the 2.12 copy.
    
    I'm ready to begin the builds in the morning, but not tonight.  It has been
    a long day.
    
    This is a github-only release.

commit a9dd25a9a3883a395451b90940accf59ceb43d52
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sat Feb 15 03:45:04 2020 -0600

    2020-02-15 MSS Code Factory CFAll 2.13.11151-20202150345-EditedModels Ready to do builds in the morning
    
    The 2.13 code base has been remanufactured by MSS Code Factory 2.12.11150-R0-202002150300,
    just to make sure every last change to the knowledge base has been applied; I can't
    remember if I changed any indentation after verifying that the manufactured code
    was matching after the 2.13 models had been edited, so I remanufactured it with
    the latest and greatest version.
    
    The edited 2.13 models produce virtually identical code to the unedited models
    now, give or take some sequencing changes due to slight differences in the order
    in which tables are created and thereby returned by the subclass table iterators.
    
    The Java code clean compiles and the migrated 2.13 BAM editor has been run to
    make sure it is ok and that my edit scripts are valid for the 2.14 models.
    
    The knowledge base has been refreshed from the 2.12 copy.
    
    I'm ready to begin the builds in the morning, but not tonight.  It has been
    a long day.
    
    This is a github-only release.

commit a4dda5e4e10d6b61c87f7784cae6fc599666e661
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Feb 14 21:30:08 2020 -0600

    2020-02-14 MSS Code Factory CFAll 2.13.11151-202002142130-UneditedModels Manufactured by pre-edited 2.12.11150-R0-202002142000
    
    This is the source code produced by manufacturing the unedited 2.13 models
    in the msscf_2_12/model-2.12 directory.
    
    Once this code is checked in, I'll use the 2.12 BAM editor to edit, validate,
    and save the models, overwriting the existing models.  Then I'll remanufacture
    the code and run a git diff on each of the project directories to see if anything
    changed except the version numbers.
    
    Any changes should indicate where I've overlooked something in the BAM editor.
    
    If there are differences, I'llcheck the 2.12.11150-R0-202002142000 models again,
    undoing the edits, and correct the BAM editor before trying again.  I won't be
    satisfied that the model editor is valid until the edited models produce identical
    code to this release.
    
    This is a github-only release.

commit c2ded82b6df6c27b86dd4ab444881a2a2dabf632
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Fri Feb 14 21:24:43 2020 -0600

    2020-02-14 MSS Code Factory CFAll 2.13.11151-202002142130-UneditedModels Manufactured by pre-edited 2.12.11150-R0-202002142000
    
    This is the source code produced by manufacturing the unedited 2.13 models
    in the msscf_2_12/model-2.12 directory.
    
    Once this code is checked in, I'll use the 2.12 BAM editor to edit, validate,
    and save the models, overwriting the existing models.  Then I'll remanufacture
    the code and run a git diff on each of the project directories to see if anything
    changed except the version numbers.
    
    Any changes should indicate where I've overlooked something in the BAM editor.
    
    If there are differences, I'llcheck the 2.12.11150-R0-202002142000 models again,
    undoing the edits, and correct the BAM editor before trying again.  I won't be
    satisfied that the model editor is valid until the edited models produce identical
    code to this release.
    
    This is a github-only release.

commit 332329ab9ce3cf2bf082d8849d0810ecb6d431bc
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Feb 13 07:28:13 2020 -0600

    2020-02-13 MSS Code Factory 2.13.11146 Switched to c++2a, first full build of the 2.13 code base
    
    I installed gcc/g++ 8 and made them the default compilers so I could switch the 2.13 C++ code
    over from being built with c++1z to being built with c++2a.  No problems with building libcflib
    with the new options, so I'm applying it to all future 2.13 projects.
    
    When the official c++20 release becomes available, I'll switch over to that, as c++20 is my
    target language of choice.
    
    The manufactured C++ SAX Parser logic has been reworked such that the exception catches set a flag
    when they fire, and save a copy of the thrown message, then goto cleanup.  Cleanup is common
    to all exits from the beginElement() processing, cleans up all dynamically allocated memory,
    and then if the exception flag is set, throws a SAXException with the saved message.  Otherwise
    it just returns.
    
    There were a number of subtle issues and bugs caused by the switch to a cleanup section, but
    they've all been resolved.  Due to the subtlety of the issues that arose and the number of
    element handlers in libcfbamcustxmlloader, I will not be attempting to clean up that manually-maintained
    code in the same fashion that I did the automatically manufactured code.
    
    All of the 2.13 tests have been executed successfully, and both the C++ and Java versions of
    MSS Code Factory 2.13 produce 2.14 project code (not that I intend to use it for that yet; I
    just wanted to verify that the 2.13 builds were fully functional.)
    
    The sha256sums for this release are:
    
            e39ce47a35729dcf79ae6c6ddc5e8bad183d704529c5b5d5f3ad99ad5909a0c8  cfacc_2_13_11146-Apache_V2-db_scripts.zip
            211ff28fa79a860f3b792a49b40a386e760bdff89a22db0e9cf954e3b2abe76a  cfacc_2_13_11146-Apache_V2-src.zip
            4735f5af195d180ca832e9188e81c791a3d5cab2ad5d50aa92a146ad70803a87  cfacc_2_13_11146-java-installer.zip
            cddfa7734e201a8ed7c81868f772c2c6334ddc23a8ce0d5044ece507ac33122d  cfacc_2_13_11146-wsl-installer.zip
            2928bc0f4d8d550c717b06e9fbdd727ac548b27c445da539926331e5dc623d79  cfast_2_13_11146-Apache_V2-db_scripts.zip
            f0cc4d29efbfb1564a6edb0e70e2e31e242ab2554d2ded776e5ad50bf4e8a327  cfast_2_13_11146-Apache_V2-src.zip
            a70a713bc3aa080112af0bac4294f588445bc9e24a89d773bc7ac88ffbe3e819  cfast_2_13_11146-java-installer.zip
            5c3cea22da2532cb752816359ef5a6a35d862a0e7326277b3ed190aa8af4b7eb  cfast_2_13_11146-wsl-installer.zip
            ccc0bd7f8a9682cc66ae5c942e896008d9edf9745fd1c36e437f5f51dfdd2f5f  cfbam_2_13_11146-Apache_V2-db_scripts.zip
            7e902e3e48fec425ba8681a314aa4e29bc70cea87905f5ba00e94b528ef9082f  cfbam_2_13_11146-Apache_V2-src.zip
            ddd28ab12a59f9b2246a19df2b9f7ea7afa7aae05a3fd245cf3eee63fe884534  cfbam_2_13_11146-java-installer.zip
            8e248a24b8d23655a26fbb96fdb6fdc882ab2ad666402474a5904c9f794c7f09  cfbam_2_13_11146-wsl-installer.zip
            a19f1df33f8c42247c8f6459b0511078c6baa1d312d842324d152c9ee0dd1d66  cfcore_2_13_11146-Apache_V2-src.zip
            a293557732ca24b0004394f41ea929dba70d9fe97795a5af026704a59fe957fd  cfcore_2_13_11146-installer.zip
            58b8246437e269b076bd91ba0516e9d6aa05326368dadd1c7c436053858ee826  cfcore_2_13_11146-wsl-installer.zip
            6c6966ddcaf43034c36f0634b31a438f6a1b69117ee4d7c5d9b9b857a5e55e1b  cfcrm_2_13_11146-Apache_V2-db_scripts.zip
            0063aab07b9ecd50d87c96ff701b91956a03345a41c22aa300c9c40a33e4b0e0  cfcrm_2_13_11146-Apache_V2-src.zip
            1b878b313991f829f87354ee9fb08ba8aaee6c59d03383ca93e7e95d7563f151  cfcrm_2_13_11146-java-installer.zip
            9f3335b9c9f462d65aa3b1c0e0eb6721777fbe691098751cc2ac009d1cd2b593  cfcrm_2_13_11146-wsl-installer.zip
            2dc45080b36ba834d21f3f02e2e432f71fb677f18eb132d8d4a98b49a951fe8e  cfdbtst_2_13_11146-Apache_V2-db_scripts.zip
            f198dbd9d38fc6d13241d4faa17e7f7abbfaed1e32184ce0cd7382bc2f823643  cfdbtst_2_13_11146-Apache_V2-src.zip
            2f2929382d87941970b100b5fcb715b4c3ccd92712403bb989467e3ec47ad948  cfdbtst_2_13_11146-java-installer.zip
            4f5b2e51781cbb57ada53297f7083a66560a6ad5280c047937467ee00b586b57  cfdbtst_2_13_11146-wsl-installer.zip
            519d368c1990834b5a7165619edfe0d4acbbc2e75dcdf0735f6054c649d2b47e  cffrsw_2_13_11146-Apache_V2-db_scripts.zip
            524e7bd3f24eff56e258ae964cfae8917876e1764042b6d1f6c9840ddb84f70a  cffrsw_2_13_11146-Apache_V2-src.zip
            5f38c1e09b6ab048fc42abbab286924de1936d733cced86c44bcc264e7eeb353  cffrsw_2_13_11146-java-installer.zip
            6f8212436eb16dad1ae294a37fe782dfc565325870ea681b3b6758b69cd90fe1  cffrsw_2_13_11146-wsl-installer.zip
            c516f2a6dd2970185579694eeacc53c7e0799c9dd7b82dc7f8158526bcfba079  cfint_2_13_11146-Apache_V2-db_scripts.zip
            5662f64c6e8986015e3bad99ef3ef9a6a5b217864ad7dae11a8a04bfad752a95  cfint_2_13_11146-Apache_V2-src.zip
            22289215324d1bd4574ca0d2023ff5734f53b42cff5c5cf8726da499c4e7d4dd  cfint_2_13_11146-java-installer.zip
            9dbb5ae4f5afd417f9d041faf16c8194995665ab77aff1b02b4e157110dbd39f  cfint_2_13_11146-wsl-installer.zip
            642b4e89dc2c71145a2db69a0dc9cace8857d6be2d2f8b9e89110fd6639c5b83  cflib_2_13_11146-Apache_V2-src.zip
            bc9d01273323a01b22a88121ec6d848ae2a24519978fd387ef658d000e45c3dc  cflib_2_13_11146-java-installer.zip
            09f9503002dc4bc0d6f66ce5e2650e35e86c48e94c0fd26c4ba6931a010472c0  cflib_2_13_11146-wsl-installer.zip
            1e9c9d1b560ec7d11ac7dd6a982177aa695e9e943ceaa015e34654d476ccdc61  cfsec_2_13_11146-Apache_V2-db_scripts.zip
            16d3046ce9dcf520b14f16e892b12bff6190d274cafa2861b6fc9d28d5f0e7c2  cfsec_2_13_11146-Apache_V2-src.zip
            df7a3bda91fc2ee2492eb7280b0b96abbf310d73b69ce37fdc1058bf4ce7a7a4  cfsec_2_13_11146-java-installer.zip
            be0032aee800fc395088bc0c7a1e8e743568b870c76b4cbef5ed98f55f8e6be4  cfsec_2_13_11146-wsl-installer.zip
            305cbb921c263a34884f2d201c16a7fc50752be3cf820ee71b3015ca64ef3857  cfuniv_2_13_11146-Apache_V2-db_scripts.zip
            1c8e8263b99b6fb2160c839b257b168e54bb3c289dce25f4300889bac39674ba  cfuniv_2_13_11146-Apache_V2-src.zip
            6585c2fdb691576965c518d5f2cd8e8de31f32092ca8f3e8acca68ae47f6172a  cfuniv_2_13_11146-wsl-installer.zip
            2ac5c22e47d6d90b8cdd487b3dc764b91d9d8d840e3d847149452b06a83dd1bc  msscf_2_13_11146-Apache_V2-data.zip
            48b94c1c8b42e785773d5e06a723db12173123d97c28b6a22f7e3c496abcf09d  msscf_2_13_11146-Apache_V2-src.zip
            fd59f17bf3cf2fef688d873e2ae9855accca7ff1a6dbe1468bcd095760a16173  msscf_2_13_11146-java-installer.zip
            22edf5d7d80969e32d75e244f726d71ab6cc13c980d77d57193370e85957fe02  msscf_2_13_11146-wsl-installer.zip

commit 934405388b810ffcdb06b5eea624edfec989c722
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Feb 13 07:27:40 2020 -0600

    2020-02-13 MSS Code Factory 2.13.11146 Switched to c++2a, first full build of the 2.13 code base
    
    I installed gcc/g++ 8 and made them the default compilers so I could switch the 2.13 C++ code
    over from being built with c++1z to being built with c++2a.  No problems with building libcflib
    with the new options, so I'm applying it to all future 2.13 projects.
    
    When the official c++20 release becomes available, I'll switch over to that, as c++20 is my
    target language of choice.
    
    The manufactured C++ SAX Parser logic has been reworked such that the exception catches set a flag
    when they fire, and save a copy of the thrown message, then goto cleanup.  Cleanup is common
    to all exits from the beginElement() processing, cleans up all dynamically allocated memory,
    and then if the exception flag is set, throws a SAXException with the saved message.  Otherwise
    it just returns.
    
    There were a number of subtle issues and bugs caused by the switch to a cleanup section, but
    they've all been resolved.  Due to the subtlety of the issues that arose and the number of
    element handlers in libcfbamcustxmlloader, I will not be attempting to clean up that manually-maintained
    code in the same fashion that I did the automatically manufactured code.
    
    All of the 2.13 tests have been executed successfully, and both the C++ and Java versions of
    MSS Code Factory 2.13 produce 2.14 project code (not that I intend to use it for that yet; I
    just wanted to verify that the 2.13 builds were fully functional.)
    
    The sha256sums for this release are:
    
            e39ce47a35729dcf79ae6c6ddc5e8bad183d704529c5b5d5f3ad99ad5909a0c8  cfacc_2_13_11146-Apache_V2-db_scripts.zip
            211ff28fa79a860f3b792a49b40a386e760bdff89a22db0e9cf954e3b2abe76a  cfacc_2_13_11146-Apache_V2-src.zip
            4735f5af195d180ca832e9188e81c791a3d5cab2ad5d50aa92a146ad70803a87  cfacc_2_13_11146-java-installer.zip
            cddfa7734e201a8ed7c81868f772c2c6334ddc23a8ce0d5044ece507ac33122d  cfacc_2_13_11146-wsl-installer.zip
            2928bc0f4d8d550c717b06e9fbdd727ac548b27c445da539926331e5dc623d79  cfast_2_13_11146-Apache_V2-db_scripts.zip
            f0cc4d29efbfb1564a6edb0e70e2e31e242ab2554d2ded776e5ad50bf4e8a327  cfast_2_13_11146-Apache_V2-src.zip
            a70a713bc3aa080112af0bac4294f588445bc9e24a89d773bc7ac88ffbe3e819  cfast_2_13_11146-java-installer.zip
            5c3cea22da2532cb752816359ef5a6a35d862a0e7326277b3ed190aa8af4b7eb  cfast_2_13_11146-wsl-installer.zip
            ccc0bd7f8a9682cc66ae5c942e896008d9edf9745fd1c36e437f5f51dfdd2f5f  cfbam_2_13_11146-Apache_V2-db_scripts.zip
            7e902e3e48fec425ba8681a314aa4e29bc70cea87905f5ba00e94b528ef9082f  cfbam_2_13_11146-Apache_V2-src.zip
            ddd28ab12a59f9b2246a19df2b9f7ea7afa7aae05a3fd245cf3eee63fe884534  cfbam_2_13_11146-java-installer.zip
            8e248a24b8d23655a26fbb96fdb6fdc882ab2ad666402474a5904c9f794c7f09  cfbam_2_13_11146-wsl-installer.zip
            a19f1df33f8c42247c8f6459b0511078c6baa1d312d842324d152c9ee0dd1d66  cfcore_2_13_11146-Apache_V2-src.zip
            a293557732ca24b0004394f41ea929dba70d9fe97795a5af026704a59fe957fd  cfcore_2_13_11146-installer.zip
            58b8246437e269b076bd91ba0516e9d6aa05326368dadd1c7c436053858ee826  cfcore_2_13_11146-wsl-installer.zip
            6c6966ddcaf43034c36f0634b31a438f6a1b69117ee4d7c5d9b9b857a5e55e1b  cfcrm_2_13_11146-Apache_V2-db_scripts.zip
            0063aab07b9ecd50d87c96ff701b91956a03345a41c22aa300c9c40a33e4b0e0  cfcrm_2_13_11146-Apache_V2-src.zip
            1b878b313991f829f87354ee9fb08ba8aaee6c59d03383ca93e7e95d7563f151  cfcrm_2_13_11146-java-installer.zip
            9f3335b9c9f462d65aa3b1c0e0eb6721777fbe691098751cc2ac009d1cd2b593  cfcrm_2_13_11146-wsl-installer.zip
            2dc45080b36ba834d21f3f02e2e432f71fb677f18eb132d8d4a98b49a951fe8e  cfdbtst_2_13_11146-Apache_V2-db_scripts.zip
            f198dbd9d38fc6d13241d4faa17e7f7abbfaed1e32184ce0cd7382bc2f823643  cfdbtst_2_13_11146-Apache_V2-src.zip
            2f2929382d87941970b100b5fcb715b4c3ccd92712403bb989467e3ec47ad948  cfdbtst_2_13_11146-java-installer.zip
            4f5b2e51781cbb57ada53297f7083a66560a6ad5280c047937467ee00b586b57  cfdbtst_2_13_11146-wsl-installer.zip
            519d368c1990834b5a7165619edfe0d4acbbc2e75dcdf0735f6054c649d2b47e  cffrsw_2_13_11146-Apache_V2-db_scripts.zip
            524e7bd3f24eff56e258ae964cfae8917876e1764042b6d1f6c9840ddb84f70a  cffrsw_2_13_11146-Apache_V2-src.zip
            5f38c1e09b6ab048fc42abbab286924de1936d733cced86c44bcc264e7eeb353  cffrsw_2_13_11146-java-installer.zip
            6f8212436eb16dad1ae294a37fe782dfc565325870ea681b3b6758b69cd90fe1  cffrsw_2_13_11146-wsl-installer.zip
            c516f2a6dd2970185579694eeacc53c7e0799c9dd7b82dc7f8158526bcfba079  cfint_2_13_11146-Apache_V2-db_scripts.zip
            5662f64c6e8986015e3bad99ef3ef9a6a5b217864ad7dae11a8a04bfad752a95  cfint_2_13_11146-Apache_V2-src.zip
            22289215324d1bd4574ca0d2023ff5734f53b42cff5c5cf8726da499c4e7d4dd  cfint_2_13_11146-java-installer.zip
            9dbb5ae4f5afd417f9d041faf16c8194995665ab77aff1b02b4e157110dbd39f  cfint_2_13_11146-wsl-installer.zip
            642b4e89dc2c71145a2db69a0dc9cace8857d6be2d2f8b9e89110fd6639c5b83  cflib_2_13_11146-Apache_V2-src.zip
            bc9d01273323a01b22a88121ec6d848ae2a24519978fd387ef658d000e45c3dc  cflib_2_13_11146-java-installer.zip
            09f9503002dc4bc0d6f66ce5e2650e35e86c48e94c0fd26c4ba6931a010472c0  cflib_2_13_11146-wsl-installer.zip
            1e9c9d1b560ec7d11ac7dd6a982177aa695e9e943ceaa015e34654d476ccdc61  cfsec_2_13_11146-Apache_V2-db_scripts.zip
            16d3046ce9dcf520b14f16e892b12bff6190d274cafa2861b6fc9d28d5f0e7c2  cfsec_2_13_11146-Apache_V2-src.zip
            df7a3bda91fc2ee2492eb7280b0b96abbf310d73b69ce37fdc1058bf4ce7a7a4  cfsec_2_13_11146-java-installer.zip
            be0032aee800fc395088bc0c7a1e8e743568b870c76b4cbef5ed98f55f8e6be4  cfsec_2_13_11146-wsl-installer.zip
            305cbb921c263a34884f2d201c16a7fc50752be3cf820ee71b3015ca64ef3857  cfuniv_2_13_11146-Apache_V2-db_scripts.zip
            1c8e8263b99b6fb2160c839b257b168e54bb3c289dce25f4300889bac39674ba  cfuniv_2_13_11146-Apache_V2-src.zip
            6585c2fdb691576965c518d5f2cd8e8de31f32092ca8f3e8acca68ae47f6172a  cfuniv_2_13_11146-wsl-installer.zip
            2ac5c22e47d6d90b8cdd487b3dc764b91d9d8d840e3d847149452b06a83dd1bc  msscf_2_13_11146-Apache_V2-data.zip
            48b94c1c8b42e785773d5e06a723db12173123d97c28b6a22f7e3c496abcf09d  msscf_2_13_11146-Apache_V2-src.zip
            fd59f17bf3cf2fef688d873e2ae9855accca7ff1a6dbe1468bcd095760a16173  msscf_2_13_11146-java-installer.zip
            22edf5d7d80969e32d75e244f726d71ab6cc13c980d77d57193370e85957fe02  msscf_2_13_11146-wsl-installer.zip

commit ea2d27ed75dd88a9686b131e8f6c3b177e83c4ce
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Thu Feb 13 07:26:50 2020 -0600

    2020-02-13 MSS Code Factory 2.13.11146 Switched to c++2a, first full build of the 2.13 code base
    
    I installed gcc/g++ 8 and made them the default compilers so I could switch the 2.13 C++ code
    over from being built with c++1z to being built with c++2a.  No problems with building libcflib
    with the new options, so I'm applying it to all future 2.13 projects.
    
    When the official c++20 release becomes available, I'll switch over to that, as c++20 is my
    target language of choice.
    
    The manufactured C++ SAX Parser logic has been reworked such that the exception catches set a flag
    when they fire, and save a copy of the thrown message, then goto cleanup.  Cleanup is common
    to all exits from the beginElement() processing, cleans up all dynamically allocated memory,
    and then if the exception flag is set, throws a SAXException with the saved message.  Otherwise
    it just returns.
    
    There were a number of subtle issues and bugs caused by the switch to a cleanup section, but
    they've all been resolved.  Due to the subtlety of the issues that arose and the number of
    element handlers in libcfbamcustxmlloader, I will not be attempting to clean up that manually-maintained
    code in the same fashion that I did the automatically manufactured code.
    
    All of the 2.13 tests have been executed successfully, and both the C++ and Java versions of
    MSS Code Factory 2.13 produce 2.14 project code (not that I intend to use it for that yet; I
    just wanted to verify that the 2.13 builds were fully functional.)
    
    The sha256sums for this release are:
    
            e39ce47a35729dcf79ae6c6ddc5e8bad183d704529c5b5d5f3ad99ad5909a0c8  cfacc_2_13_11146-Apache_V2-db_scripts.zip
            211ff28fa79a860f3b792a49b40a386e760bdff89a22db0e9cf954e3b2abe76a  cfacc_2_13_11146-Apache_V2-src.zip
            4735f5af195d180ca832e9188e81c791a3d5cab2ad5d50aa92a146ad70803a87  cfacc_2_13_11146-java-installer.zip
            cddfa7734e201a8ed7c81868f772c2c6334ddc23a8ce0d5044ece507ac33122d  cfacc_2_13_11146-wsl-installer.zip
            2928bc0f4d8d550c717b06e9fbdd727ac548b27c445da539926331e5dc623d79  cfast_2_13_11146-Apache_V2-db_scripts.zip
            f0cc4d29efbfb1564a6edb0e70e2e31e242ab2554d2ded776e5ad50bf4e8a327  cfast_2_13_11146-Apache_V2-src.zip
            a70a713bc3aa080112af0bac4294f588445bc9e24a89d773bc7ac88ffbe3e819  cfast_2_13_11146-java-installer.zip
            5c3cea22da2532cb752816359ef5a6a35d862a0e7326277b3ed190aa8af4b7eb  cfast_2_13_11146-wsl-installer.zip
            ccc0bd7f8a9682cc66ae5c942e896008d9edf9745fd1c36e437f5f51dfdd2f5f  cfbam_2_13_11146-Apache_V2-db_scripts.zip
            7e902e3e48fec425ba8681a314aa4e29bc70cea87905f5ba00e94b528ef9082f  cfbam_2_13_11146-Apache_V2-src.zip
            ddd28ab12a59f9b2246a19df2b9f7ea7afa7aae05a3fd245cf3eee63fe884534  cfbam_2_13_11146-java-installer.zip
            8e248a24b8d23655a26fbb96fdb6fdc882ab2ad666402474a5904c9f794c7f09  cfbam_2_13_11146-wsl-installer.zip
            a19f1df33f8c42247c8f6459b0511078c6baa1d312d842324d152c9ee0dd1d66  cfcore_2_13_11146-Apache_V2-src.zip
            a293557732ca24b0004394f41ea929dba70d9fe97795a5af026704a59fe957fd  cfcore_2_13_11146-installer.zip
            58b8246437e269b076bd91ba0516e9d6aa05326368dadd1c7c436053858ee826  cfcore_2_13_11146-wsl-installer.zip
            6c6966ddcaf43034c36f0634b31a438f6a1b69117ee4d7c5d9b9b857a5e55e1b  cfcrm_2_13_11146-Apache_V2-db_scripts.zip
            0063aab07b9ecd50d87c96ff701b91956a03345a41c22aa300c9c40a33e4b0e0  cfcrm_2_13_11146-Apache_V2-src.zip
            1b878b313991f829f87354ee9fb08ba8aaee6c59d03383ca93e7e95d7563f151  cfcrm_2_13_11146-java-installer.zip
            9f3335b9c9f462d65aa3b1c0e0eb6721777fbe691098751cc2ac009d1cd2b593  cfcrm_2_13_11146-wsl-installer.zip
            2dc45080b36ba834d21f3f02e2e432f71fb677f18eb132d8d4a98b49a951fe8e  cfdbtst_2_13_11146-Apache_V2-db_scripts.zip
            f198dbd9d38fc6d13241d4faa17e7f7abbfaed1e32184ce0cd7382bc2f823643  cfdbtst_2_13_11146-Apache_V2-src.zip
            2f2929382d87941970b100b5fcb715b4c3ccd92712403bb989467e3ec47ad948  cfdbtst_2_13_11146-java-installer.zip
            4f5b2e51781cbb57ada53297f7083a66560a6ad5280c047937467ee00b586b57  cfdbtst_2_13_11146-wsl-installer.zip
            519d368c1990834b5a7165619edfe0d4acbbc2e75dcdf0735f6054c649d2b47e  cffrsw_2_13_11146-Apache_V2-db_scripts.zip
            524e7bd3f24eff56e258ae964cfae8917876e1764042b6d1f6c9840ddb84f70a  cffrsw_2_13_11146-Apache_V2-src.zip
            5f38c1e09b6ab048fc42abbab286924de1936d733cced86c44bcc264e7eeb353  cffrsw_2_13_11146-java-installer.zip
            6f8212436eb16dad1ae294a37fe782dfc565325870ea681b3b6758b69cd90fe1  cffrsw_2_13_11146-wsl-installer.zip
            c516f2a6dd2970185579694eeacc53c7e0799c9dd7b82dc7f8158526bcfba079  cfint_2_13_11146-Apache_V2-db_scripts.zip
            5662f64c6e8986015e3bad99ef3ef9a6a5b217864ad7dae11a8a04bfad752a95  cfint_2_13_11146-Apache_V2-src.zip
            22289215324d1bd4574ca0d2023ff5734f53b42cff5c5cf8726da499c4e7d4dd  cfint_2_13_11146-java-installer.zip
            9dbb5ae4f5afd417f9d041faf16c8194995665ab77aff1b02b4e157110dbd39f  cfint_2_13_11146-wsl-installer.zip
            642b4e89dc2c71145a2db69a0dc9cace8857d6be2d2f8b9e89110fd6639c5b83  cflib_2_13_11146-Apache_V2-src.zip
            bc9d01273323a01b22a88121ec6d848ae2a24519978fd387ef658d000e45c3dc  cflib_2_13_11146-java-installer.zip
            09f9503002dc4bc0d6f66ce5e2650e35e86c48e94c0fd26c4ba6931a010472c0  cflib_2_13_11146-wsl-installer.zip
            1e9c9d1b560ec7d11ac7dd6a982177aa695e9e943ceaa015e34654d476ccdc61  cfsec_2_13_11146-Apache_V2-db_scripts.zip
            16d3046ce9dcf520b14f16e892b12bff6190d274cafa2861b6fc9d28d5f0e7c2  cfsec_2_13_11146-Apache_V2-src.zip
            df7a3bda91fc2ee2492eb7280b0b96abbf310d73b69ce37fdc1058bf4ce7a7a4  cfsec_2_13_11146-java-installer.zip
            be0032aee800fc395088bc0c7a1e8e743568b870c76b4cbef5ed98f55f8e6be4  cfsec_2_13_11146-wsl-installer.zip
            305cbb921c263a34884f2d201c16a7fc50752be3cf820ee71b3015ca64ef3857  cfuniv_2_13_11146-Apache_V2-db_scripts.zip
            1c8e8263b99b6fb2160c839b257b168e54bb3c289dce25f4300889bac39674ba  cfuniv_2_13_11146-Apache_V2-src.zip
            6585c2fdb691576965c518d5f2cd8e8de31f32092ca8f3e8acca68ae47f6172a  cfuniv_2_13_11146-wsl-installer.zip
            2ac5c22e47d6d90b8cdd487b3dc764b91d9d8d840e3d847149452b06a83dd1bc  msscf_2_13_11146-Apache_V2-data.zip
            48b94c1c8b42e785773d5e06a723db12173123d97c28b6a22f7e3c496abcf09d  msscf_2_13_11146-Apache_V2-src.zip
            fd59f17bf3cf2fef688d873e2ae9855accca7ff1a6dbe1468bcd095760a16173  msscf_2_13_11146-java-installer.zip
            22edf5d7d80969e32d75e244f726d71ab6cc13c980d77d57193370e85957fe02  msscf_2_13_11146-wsl-installer.zip

commit 358a1769ad82ad6fea700e49cf14f10d63305f7b
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Feb 12 18:54:35 2020 -0600

    2020-02-12 MSS Code Factory CFBam, MssCF 2.13.11146-202002121850 The 2.13 Java version of the tool now runs
    
    The rule cartridges and models have been migrated from 2.12 to 2.13, resulting in 2.14 models.
    
    An occurance of the wrong version string in the CFBam Java code was corrected.
    
    The custom Makefile.am files for CFBam 2.13 now properly specify a minor version of 13 instead of 12,
    but they haven't even started building yet, so no damage was done by that oversight.
    
    This is a github-only release.

commit 65752c06d2bd7cf99e68b0cf232dae8829fbfb58
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Wed Feb 12 10:26:35 2020 -0600

    2020-02-12 MSS Code Factory CFAll 2.13.11146-202002121030 Remanufactured by 2.12.11145-202002121015 to clear stale editBuff and edit$TableName$ references
    
    There were a few cases of stale editBuff and edit$TableName$ references in the C++ SAX
    Loader Table handlers, which has been corrected.  The problem only surfaced in one
    CFDbTstRunCPlusRamTests.bash test (0004-TestNamedLookup), but I scanned the rules
    for the table handlers to find all the occurances of stale references I could find.
    
    This is a github-only release.

commit a7bf9c8934db818eaa7f2d461dc4b6c223a1d26a
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 11 23:31:28 2020 -0600

    2020-02-11 MSS Code Factory CFAll 2.13.11146-202002112330 Remanufactured by 2.12.11145-202002112315 to switch from c++1z to c++2a using gcc/g++ 8 instead of 7
    
    I installed gcc/g++ 8 and made them the default compilers so I could switch the 2.13 C++ code
    over from being built with c++1z to being built with c++2a.  No problems with building libcflib
    with the new options, so I'm applying it to all future 2.13 projects.
    
    When the official c++20 release becomes available, I'll switch over to that, as c++20 is my
    target dialect of choice.  Why write new code targeting obsolete standards?
    
    This is a github-only release.

commit 594b79864a5e2e69c656f888cd2e04607729474a
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 11 21:54:06 2020 -0600

    Update version strings.

commit 1aa59def588111427f6b13224ee1ce0a7a30ce8a
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 11 20:46:57 2020 -0600

    2020-02-11 MSS Code Factory CFAll 2.13.11144 Remanufactured by 2.12.11143 to refresh copyright periods
    
    All of the 2.13 projects have been remanufactured by 2.12.11143 to reset the copyright periods
    from 2019-2020 to 2020 and to apply the use of evalXxx() to the SAX parsers.  All of the 2.13 Java
    projects have been clean-compiled.
    
    CFLib and CFCore 2.12 have been migrated to 2.13 with 2020 copyrights instead of 2019-2020, and
    specifing a minor version of 13 instead of 12.  The code for these two projects has been clean-compiled
    and installed.
    
    CFLibXmlUtil.cpp has new evalXxx() methods that return values and instances instead of pointers.  The only
    one that can't be done this way is the UUID, because it is actually an array and you can't pass back arrays
    on the stack; not even small ones of known size.  These replace a lot of the parseXxx() methods in the
    manufactured SAX loaders to plug pernicious memory leaks without the overhead of allocation and deallocation
    of very small objects that slows the parser down.  Note that if empty strings are passed to any but
    the XML string evaluators, exceptions are thrown because there is no other way to respond with a NULL
    value.
    
    The custom code for all 2.13 projects has been migrated from 2.12 and had its copyrights and version
    information updated accordingly.  There are also no longer any references to "MSS Code Factory 2"
    instead of plain old "MSS Code Factory".
    
    Only CFLib and CFCore are being distributed for this release; all other projects are github-only.

commit 93d6ce45e4221588788433fd197482d1fd9c8e6c
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 11 20:42:25 2020 -0600

    2020-02-11 MSS Code Factory CFAll 2.13.11144 Remanufactured by 2.12.11143 to refresh copyright periods
    
    All of the 2.13 projects have been remanufactured by 2.12.11143 to reset the copyright periods
    from 2019-2020 to 2020 and to apply the use of evalXxx() to the SAX parsers.  All of the 2.13 Java
    projects have been clean-compiled.
    
    CFLib and CFCore 2.12 have been migrated to 2.13 with 2020 copyrights instead of 2019-2020, and
    specifing a minor version of 13 instead of 12.  The code for these two projects has been clean-compiled
    and installed.
    
    CFLibXmlUtil.cpp has new evalXxx() methods that return values and instances instead of pointers.  The only
    one that can't be done this way is the UUID, because it is actually an array and you can't pass back arrays
    on the stack; not even small ones of known size.  These replace a lot of the parseXxx() methods in the
    manufactured SAX loaders to plug pernicious memory leaks without the overhead of allocation and deallocation
    of very small objects that slows the parser down.  Note that if empty strings are passed to any but
    the XML string evaluators, exceptions are thrown because there is no other way to respond with a NULL
    value.
    
    The custom code for all 2.13 projects has been migrated from 2.12 and had its copyrights and version
    information updated accordingly.  There are also no longer any references to "MSS Code Factory 2"
    instead of plain old "MSS Code Factory".
    
    Only CFLib and CFCore are being distributed for this release; all other projects are github-only.

commit c382b0098f978832e938725e8458c754785cc7e8
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Tue Feb 11 06:05:08 2020 -0600

    2020-02-11 MSS Code Factory CFAll 2.13.11142 Refresh stdjars
    
    The standard jars used by all MSS Code Factory Java code have been refreshed to their
    latest versions as of today.  In the stdjar directory, you will find two ex editor
    command scripts, update-build-xml-2020_02_11.ex and update-module-info-java-2020_02_11.ex
    which can be applied to the appropriate files of your project to bring them up to date
    with the current jars used.
    
    This release hasn't even been built yet, as I've just started migrating the custom
    code from 2.12 to 2.13 and am not even ready to build cflib_2_13 yet.
    
    This is a github-only release.

commit 80abff41d1af7c0c514eff8dfe2d02f177bd6230
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Feb 10 00:54:12 2020 -0600

    Oops.

commit ed50fb81ee08722d9b086c1114134398cd37b3b1
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Feb 10 00:46:26 2020 -0600

    More script migrations from 2.12.

commit b3006ba2120293b8ee561cbbf2217d58752e41b8
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Mon Feb 10 00:35:45 2020 -0600

    Migrate archiving and packaging scripts, build.xml scripts, and module-info.java for manufactured java modules from 2.12

commit ae3440d89d15c95890c280fa02d77a67073fb78d
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Feb 9 23:52:04 2020 -0600

    2020-02-09 MSS Code Factory CFAll 2.13.11139-INIT Initialize repositories with raw manufactured code
    
    The 2.13 repositories have been initialized with raw code manufactured by
    MSS Code Factory 2.12.11137.  This is where my code will be manufactured from
    now on, and MSS Code Factory 2.12 is where I'll be doing most of my rule and
    model changes to support the development of 2.13.
    
    This is a github-only release.

commit fbe9ce27dc7c0fdeb380a892846a64e60cc6f696
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Feb 9 22:54:10 2020 -0600

    2020-02-09 MSS Code Factory CFAll 2.13.11138 Repositories created
    
    The github repositories have been created, and the GoogleDrive for uploads created
    and added to the welcome.html.

commit b2d83f080f786f5b8f23a8e132a581838a331006
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Feb 9 22:41:33 2020 -0600

    Initialize 2.13 project repository.

commit 4861e216faf2db028ab6843b4ef9f6669271f204
Author: Mark Stephen Sobkow <msobkow@sasktel.net>
Date:   Sun Feb 9 22:33:38 2020 -0600

    Initial commit
